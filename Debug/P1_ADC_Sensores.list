
P1_ADC_Sensores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea4  08006ea4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  08006eb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006eb8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd6  00000000  00000000  0003b237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001798  00000000  00000000  0003df10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001640  00000000  00000000  0003f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000334f0  00000000  00000000  00040ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001279d  00000000  00000000  000741d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013d4c5  00000000  00000000  00086975  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c3e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006560  00000000  00000000  001c3eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006e14 	.word	0x08006e14

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006e14 	.word	0x08006e14

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 faf3 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8ad 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa03 	bl	8000914 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050e:	f000 f92b 	bl	8000768 <MX_ADC1_Init>
  MX_TIM16_Init();
 8000512:	f000 f98d 	bl	8000830 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f9b1 	bl	800087c <MX_USART2_UART_Init>
	//  HAL_UART_RegisterCallback(&huart2,  HAL_UART_RX_COMPLETE_CB_ID , Uart_reception);
	//HAL_UART_Receive_IT(&huart2, &buffer, buffer_size);

	//memcpy(buffer, "000000", buffer_size);

	int periodo = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]

	//INICIALIZA EL MAGNETOMETRO

	magneto_IO.Address 	= 0x3c;		//0011110b b=0 leer, b=1 escribir
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <main+0x12c>)
 8000520:	223c      	movs	r2, #60	; 0x3c
 8000522:	731a      	strb	r2, [r3, #12]
	magneto_IO.BusType 	= 0; 		//0 si I2C
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <main+0x12c>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
	magneto_IO.DeInit 	= BSP_I2C2_DeInit;
 800052a:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <main+0x12c>)
 800052c:	4a3f      	ldr	r2, [pc, #252]	; (800062c <main+0x130>)
 800052e:	605a      	str	r2, [r3, #4]
	magneto_IO.GetTick 	= BSP_GetTick;
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <main+0x12c>)
 8000532:	4a3f      	ldr	r2, [pc, #252]	; (8000630 <main+0x134>)
 8000534:	619a      	str	r2, [r3, #24]
	magneto_IO.Init 	= BSP_I2C2_Init;
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <main+0x12c>)
 8000538:	4a3e      	ldr	r2, [pc, #248]	; (8000634 <main+0x138>)
 800053a:	601a      	str	r2, [r3, #0]
	magneto_IO.ReadReg 	= BSP_I2C2_ReadReg;
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <main+0x12c>)
 800053e:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <main+0x13c>)
 8000540:	615a      	str	r2, [r3, #20]
	magneto_IO.WriteReg = BSP_I2C2_WriteReg;
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <main+0x12c>)
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <main+0x140>)
 8000546:	611a      	str	r2, [r3, #16]

	IIS2MDC_RegisterBusIO(&magneto_sensor, &magneto_IO);
 8000548:	4937      	ldr	r1, [pc, #220]	; (8000628 <main+0x12c>)
 800054a:	483d      	ldr	r0, [pc, #244]	; (8000640 <main+0x144>)
 800054c:	f000 fe5e 	bl	800120c <IIS2MDC_RegisterBusIO>
	IIS2MDC_Init(&magneto_sensor);
 8000550:	483b      	ldr	r0, [pc, #236]	; (8000640 <main+0x144>)
 8000552:	f000 fed1 	bl	80012f8 <IIS2MDC_Init>
	IIS2MDC_MAG_Enable(&magneto_sensor);
 8000556:	483a      	ldr	r0, [pc, #232]	; (8000640 <main+0x144>)
 8000558:	f000 ff0b 	bl	8001372 <IIS2MDC_MAG_Enable>

	IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 800055c:	4939      	ldr	r1, [pc, #228]	; (8000644 <main+0x148>)
 800055e:	4838      	ldr	r0, [pc, #224]	; (8000640 <main+0x144>)
 8000560:	f000 ff37 	bl	80013d2 <IIS2MDC_MAG_GetAxes>

	HAL_TIM_Base_Start_IT(&htim16);
 8000564:	4838      	ldr	r0, [pc, #224]	; (8000648 <main+0x14c>)
 8000566:	f005 f973 	bl	8005850 <HAL_TIM_Base_Start_IT>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_MAG)
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <main+0x150>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d04e      	beq.n	8000610 <main+0x114>
		{
			flag_MAG = 0;
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <main+0x150>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
			IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000578:	4932      	ldr	r1, [pc, #200]	; (8000644 <main+0x148>)
 800057a:	4831      	ldr	r0, [pc, #196]	; (8000640 <main+0x144>)
 800057c:	f000 ff29 	bl	80013d2 <IIS2MDC_MAG_GetAxes>
			buffer[Inicio] = ((magneto_axes.x));
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <main+0x148>)
 8000582:	6819      	ldr	r1, [r3, #0]
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <main+0x154>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	b209      	sxth	r1, r1
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <main+0x158>)
 800058e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			buffer[Inicio++] = ((magneto_axes.y));
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <main+0x148>)
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <main+0x154>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	b290      	uxth	r0, r2
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <main+0x154>)
 80005a0:	8010      	strh	r0, [r2, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	b209      	sxth	r1, r1
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <main+0x158>)
 80005a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			buffer[Inicio++] = ((magneto_axes.z));
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <main+0x148>)
 80005ae:	6899      	ldr	r1, [r3, #8]
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <main+0x154>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	b290      	uxth	r0, r2
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <main+0x154>)
 80005ba:	8010      	strh	r0, [r2, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	b209      	sxth	r1, r1
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <main+0x158>)
 80005c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			Inicio++;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0x154>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x154>)
 80005d0:	801a      	strh	r2, [r3, #0]
			if (Inicio/3 == 10)
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <main+0x154>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	3b1e      	subs	r3, #30
 80005d8:	b29b      	uxth	r3, r3
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d80d      	bhi.n	80005fa <main+0xfe>
			{
				Inicio = 0;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <main+0x154>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	223c      	movs	r2, #60	; 0x3c
 80005ea:	491a      	ldr	r1, [pc, #104]	; (8000654 <main+0x158>)
 80005ec:	481a      	ldr	r0, [pc, #104]	; (8000658 <main+0x15c>)
 80005ee:	f005 fbef 	bl	8005dd0 <HAL_UART_Transmit>
				HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 80005f2:	2102      	movs	r1, #2
 80005f4:	4819      	ldr	r0, [pc, #100]	; (800065c <main+0x160>)
 80005f6:	f002 fddd 	bl	80031b4 <HAL_GPIO_TogglePin>
			}
			if (Inicio/3 == 2){
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x154>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	3b06      	subs	r3, #6
 8000600:	b29b      	uxth	r3, r3
 8000602:	2b02      	cmp	r3, #2
 8000604:	d804      	bhi.n	8000610 <main+0x114>
				HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0x160>)
 800060c:	f002 fdba 	bl	8003184 <HAL_GPIO_WritePin>
			}
		}
		if (flag_UART)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0x164>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0a8      	beq.n	800056a <main+0x6e>
		{
			flag_UART = 0;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <main+0x164>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
			Inicio = 0;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0x154>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
		if (flag_MAG)
 8000624:	e7a1      	b.n	800056a <main+0x6e>
 8000626:	bf00      	nop
 8000628:	20000104 	.word	0x20000104
 800062c:	08001859 	.word	0x08001859
 8000630:	08001971 	.word	0x08001971
 8000634:	080017dd 	.word	0x080017dd
 8000638:	0800190d 	.word	0x0800190d
 800063c:	080018a9 	.word	0x080018a9
 8000640:	200000d8 	.word	0x200000d8
 8000644:	200001f8 	.word	0x200001f8
 8000648:	200001ac 	.word	0x200001ac
 800064c:	20000029 	.word	0x20000029
 8000650:	2000002a 	.word	0x2000002a
 8000654:	2000009c 	.word	0x2000009c
 8000658:	20000120 	.word	0x20000120
 800065c:	48001000 	.word	0x48001000
 8000660:	20000028 	.word	0x20000028

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0be      	sub	sp, #248	; 0xf8
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fbc6 	bl	8006e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	229c      	movs	r2, #156	; 0x9c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 fbb8 	bl	8006e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000694:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000698:	f003 fb94 	bl	8003dc4 <HAL_PWREx_ControlVoltageScaling>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006a2:	f000 fc23 	bl	8000eec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80006a6:	2312      	movs	r3, #18
 80006a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c6:	2360      	movs	r3, #96	; 0x60
 80006c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc28 	bl	8003f2c <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006e2:	f000 fc03 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f834 	bl	8004778 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000716:	f000 fbe9 	bl	8000eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2
 800071a:	f244 0382 	movw	r3, #16514	; 0x4082
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800072c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000734:	2305      	movs	r3, #5
 8000736:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000738:	2360      	movs	r3, #96	; 0x60
 800073a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 800073c:	2319      	movs	r3, #25
 800073e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000740:	2304      	movs	r3, #4
 8000742:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000744:	2304      	movs	r3, #4
 8000746:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800074c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fabd 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800075c:	f000 fbc6 	bl	8000eec <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	37f8      	adds	r7, #248	; 0xf8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_ADC1_Init+0xbc>)
 8000780:	4a29      	ldr	r2, [pc, #164]	; (8000828 <MX_ADC1_Init+0xc0>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_ADC1_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC1_Init+0xbc>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_ADC1_Init+0xbc>)
 80007e0:	f001 fb98 	bl	8001f14 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 fb7f 	bl	8000eec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC1_Init+0xc4>)
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f2:	2306      	movs	r3, #6
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fa:	237f      	movs	r3, #127	; 0x7f
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_ADC1_Init+0xbc>)
 800080c:	f001 fccc 	bl	80021a8 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000816:	f000 fb69 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000030 	.word	0x20000030
 8000828:	50040000 	.word	0x50040000
 800082c:	2a000400 	.word	0x2a000400

08000830 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_TIM16_Init+0x44>)
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_TIM16_Init+0x48>)
 8000838:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM16_Init+0x44>)
 800083c:	2206      	movs	r2, #6
 800083e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_TIM16_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_TIM16_Init+0x44>)
 8000848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_TIM16_Init+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_TIM16_Init+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_TIM16_Init+0x44>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_TIM16_Init+0x44>)
 8000862:	f004 ff9d 	bl	80057a0 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800086c:	f000 fb3e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001ac 	.word	0x200001ac
 8000878:	40014400 	.word	0x40014400

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_USART2_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <MX_USART2_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_USART2_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_USART2_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_USART2_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008c6:	f005 fa33 	bl	8005d30 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 fb0c 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008d8:	f006 f98c 	bl	8006bf4 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 fb03 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008ea:	f006 f9c1 	bl	8006c70 <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 fafa 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_USART2_UART_Init+0x90>)
 80008fa:	f006 f942 	bl	8006b82 <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 faf2 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000120 	.word	0x20000120
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4bb5      	ldr	r3, [pc, #724]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4ab4      	ldr	r2, [pc, #720]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4bb2      	ldr	r3, [pc, #712]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4baf      	ldr	r3, [pc, #700]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4aae      	ldr	r2, [pc, #696]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4bac      	ldr	r3, [pc, #688]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	4ba9      	ldr	r3, [pc, #676]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4aa8      	ldr	r2, [pc, #672]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4ba6      	ldr	r3, [pc, #664]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4ba3      	ldr	r3, [pc, #652]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4aa2      	ldr	r2, [pc, #648]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4ba0      	ldr	r3, [pc, #640]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b9d      	ldr	r3, [pc, #628]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a9c      	ldr	r2, [pc, #624]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b9a      	ldr	r3, [pc, #616]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b97      	ldr	r3, [pc, #604]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a96      	ldr	r2, [pc, #600]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b94      	ldr	r3, [pc, #592]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	4b91      	ldr	r3, [pc, #580]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a90      	ldr	r2, [pc, #576]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b8e      	ldr	r3, [pc, #568]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80009d2:	f003 fa9b 	bl	8003f0c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	4b8a      	ldr	r3, [pc, #552]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a89      	ldr	r2, [pc, #548]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009dc:	f043 0320 	orr.w	r3, r3, #32
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b87      	ldr	r3, [pc, #540]	; (8000c00 <MX_GPIO_Init+0x2ec>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f242 0102 	movw	r1, #8194	; 0x2002
 80009f4:	4883      	ldr	r0, [pc, #524]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 80009f6:	f002 fbc5 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f648 0181 	movw	r1, #34945	; 0x8881
 8000a00:	4881      	ldr	r0, [pc, #516]	; (8000c08 <MX_GPIO_Init+0x2f4>)
 8000a02:	f002 fbbf 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f002 fbb8 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	487c      	ldr	r0, [pc, #496]	; (8000c0c <MX_GPIO_Init+0x2f8>)
 8000a1a:	f002 fbb3 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f247 5128 	movw	r1, #29992	; 0x7528
 8000a24:	487a      	ldr	r0, [pc, #488]	; (8000c10 <MX_GPIO_Init+0x2fc>)
 8000a26:	f002 fbad 	bl	8003184 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2121      	movs	r1, #33	; 0x21
 8000a2e:	4879      	ldr	r0, [pc, #484]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000a30:	f002 fba8 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000a3a:	4877      	ldr	r0, [pc, #476]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000a3c:	f002 fba2 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8000a40:	f240 4301 	movw	r3, #1025	; 0x401
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	486b      	ldr	r0, [pc, #428]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000a56:	f002 f911 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8000a5a:	f244 3301 	movw	r3, #17153	; 0x4301
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	486a      	ldr	r0, [pc, #424]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000a70:	f002 f904 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8000a74:	2308      	movs	r3, #8
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4865      	ldr	r0, [pc, #404]	; (8000c1c <MX_GPIO_Init+0x308>)
 8000a88:	f002 f8f8 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8000a8c:	2338      	movs	r3, #56	; 0x38
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	485c      	ldr	r0, [pc, #368]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000aa8:	f002 f8e8 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8000aac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4850      	ldr	r0, [pc, #320]	; (8000c0c <MX_GPIO_Init+0x2f8>)
 8000aca:	f002 f8d7 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8000ace:	f64c 1308 	movw	r3, #51464	; 0xc908
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x30c>)
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4848      	ldr	r0, [pc, #288]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000ae4:	f002 f8ca 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af8:	2305      	movs	r3, #5
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4841      	ldr	r0, [pc, #260]	; (8000c08 <MX_GPIO_Init+0x2f4>)
 8000b04:	f002 f8ba 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8000b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f002 f8a8 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8000b2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b3e:	230a      	movs	r3, #10
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f002 f896 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8000b50:	23f4      	movs	r3, #244	; 0xf4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b60:	230d      	movs	r3, #13
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4826      	ldr	r0, [pc, #152]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000b6c:	f002 f886 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8000b70:	f242 0302 	movw	r3, #8194	; 0x2002
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x2f0>)
 8000b8a:	f002 f877 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8000b8e:	f648 0381 	movw	r3, #34945	; 0x8881
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_GPIO_Init+0x2f4>)
 8000ba8:	f002 f868 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8000bac:	f240 6313 	movw	r3, #1555	; 0x613
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f002 f85a 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8000bc8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000be6:	f002 f849 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8000bea:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	e011      	b.n	8000c24 <MX_GPIO_Init+0x310>
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48001000 	.word	0x48001000
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48001400 	.word	0x48001400
 8000c14:	48001800 	.word	0x48001800
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48001c00 	.word	0x48001c00
 8000c20:	10110000 	.word	0x10110000
 8000c24:	489f      	ldr	r0, [pc, #636]	; (8000ea4 <MX_GPIO_Init+0x590>)
 8000c26:	f002 f829 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4898      	ldr	r0, [pc, #608]	; (8000ea8 <MX_GPIO_Init+0x594>)
 8000c46:	f002 f819 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 f809 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	488a      	ldr	r0, [pc, #552]	; (8000eac <MX_GPIO_Init+0x598>)
 8000c82:	f001 fffb 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000c86:	f247 5328 	movw	r3, #29992	; 0x7528
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4884      	ldr	r0, [pc, #528]	; (8000eb0 <MX_GPIO_Init+0x59c>)
 8000ca0:	f001 ffec 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000ca4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4878      	ldr	r0, [pc, #480]	; (8000ea4 <MX_GPIO_Init+0x590>)
 8000cc2:	f001 ffdb 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4873      	ldr	r0, [pc, #460]	; (8000eb0 <MX_GPIO_Init+0x59c>)
 8000ce2:	f001 ffcb 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8000ce6:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cec:	4b71      	ldr	r3, [pc, #452]	; (8000eb4 <MX_GPIO_Init+0x5a0>)
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	486d      	ldr	r0, [pc, #436]	; (8000eb0 <MX_GPIO_Init+0x59c>)
 8000cfc:	f001 ffbe 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8000d00:	231c      	movs	r3, #28
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d10:	2305      	movs	r3, #5
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4862      	ldr	r0, [pc, #392]	; (8000ea4 <MX_GPIO_Init+0x590>)
 8000d1c:	f001 ffae 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8000d20:	2321      	movs	r3, #33	; 0x21
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	485b      	ldr	r0, [pc, #364]	; (8000ea4 <MX_GPIO_Init+0x590>)
 8000d38:	f001 ffa0 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8000d3c:	2342      	movs	r3, #66	; 0x42
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <MX_GPIO_Init+0x5a0>)
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4855      	ldr	r0, [pc, #340]	; (8000ea4 <MX_GPIO_Init+0x590>)
 8000d50:	f001 ff94 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8000d54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d66:	2304      	movs	r3, #4
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	484d      	ldr	r0, [pc, #308]	; (8000ea8 <MX_GPIO_Init+0x594>)
 8000d72:	f001 ff83 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4846      	ldr	r0, [pc, #280]	; (8000eac <MX_GPIO_Init+0x598>)
 8000d92:	f001 ff73 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8000d96:	f241 0304 	movw	r3, #4100	; 0x1004
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4843      	ldr	r0, [pc, #268]	; (8000eb8 <MX_GPIO_Init+0x5a4>)
 8000dac:	f001 ff66 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	483a      	ldr	r0, [pc, #232]	; (8000eb0 <MX_GPIO_Init+0x59c>)
 8000dc6:	f001 ff59 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <MX_GPIO_Init+0x5a0>)
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4832      	ldr	r0, [pc, #200]	; (8000ea8 <MX_GPIO_Init+0x594>)
 8000de0:	f001 ff4c 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df6:	2307      	movs	r3, #7
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <MX_GPIO_Init+0x594>)
 8000e02:	f001 ff3b 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8000e06:	f242 0302 	movw	r3, #8194	; 0x2002
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <MX_GPIO_Init+0x5a4>)
 8000e24:	f001 ff2a 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <MX_GPIO_Init+0x5a8>)
 8000e46:	f001 ff19 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8000e4a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0x5a4>)
 8000e64:	f001 ff0a 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_GPIO_Init+0x5a0>)
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f001 fefd 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_GPIO_Init+0x5a8>)
 8000e98:	f001 fef0 	bl	8002c7c <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48001800 	.word	0x48001800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48001000 	.word	0x48001000

08000ec0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d102      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		flag_MAG = 1;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
	}

}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200001ac 	.word	0x200001ac
 8000ee8:	20000029 	.word	0x20000029

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <Error_Handler+0x6>

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x44>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x44>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_MspInit+0x44>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_MspInit+0x44>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_ADC_MspInit+0xa4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d13c      	bne.n	8000fd8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0xa8>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000faa:	230b      	movs	r3, #11
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <HAL_ADC_MspInit+0xac>)
 8000fba:	f001 fe5f 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fc2:	230b      	movs	r3, #11
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f001 fe52 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	50040000 	.word	0x50040000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000800 	.word	0x48000800

08000fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_TIM_Base_MspInit+0x44>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d113      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6613      	str	r3, [r2, #96]	; 0x60
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2019      	movs	r0, #25
 800101c:	f001 fd99 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001020:	2019      	movs	r0, #25
 8001022:	f001 fdb2 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40014400 	.word	0x40014400
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0x8c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12f      	bne.n	80010ba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_UART_MspInit+0x90>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <HAL_UART_MspInit+0x90>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UART_MspInit+0x90>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UART_MspInit+0x90>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0x90>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_MspInit+0x90>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 800108a:	2370      	movs	r3, #112	; 0x70
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109a:	2307      	movs	r3, #7
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_UART_MspInit+0x94>)
 80010a6:	f001 fde9 	bl	8002c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2026      	movs	r0, #38	; 0x26
 80010b0:	f001 fd4f 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b4:	2026      	movs	r0, #38	; 0x26
 80010b6:	f001 fd68 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40004400 	.word	0x40004400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000c00 	.word	0x48000c00

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 fd3a 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800112a:	f004 fc01 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001ac 	.word	0x200001ac

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f004 fedf 	bl	8005f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000120 	.word	0x20000120

0800114c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SystemInit+0x64>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <SystemInit+0x64>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <SystemInit+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <SystemInit+0x68>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <SystemInit+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <SystemInit+0x68>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <SystemInit+0x68>)
 8001178:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800117c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001180:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <SystemInit+0x68>)
 8001184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001188:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <SystemInit+0x68>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <SystemInit+0x68>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <SystemInit+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SystemInit+0x64>)
 800119e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a2:	609a      	str	r2, [r3, #8]
#endif
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	40021000 	.word	0x40021000

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011bc:	f7ff ffc6 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
	ldr	r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011dc:	f842 3b04 	str.w	r3, [r2], #4

080011e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <LoopForever+0x16>)
	cmp	r2, r3
 80011e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f005 fde9 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff f987 	bl	80004fc <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80011f4:	08006eac 	.word	0x08006eac
	ldr	r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011fc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001200:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001204:	20000258 	.word	0x20000258

08001208 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_IRQHandler>
	...

0800120c <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e05e      	b.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	7b1a      	ldrb	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <IIS2MDC_RegisterBusIO+0xe4>)
 8001264:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <IIS2MDC_RegisterBusIO+0xe8>)
 800126a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e031      	b.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4798      	blx	r3
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e027      	b.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d023      	beq.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11e      	bne.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
        {
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10e      	bne.n	80012ce <IIS2MDC_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80012b0:	2334      	movs	r3, #52	; 0x34
 80012b2:	72fb      	strb	r3, [r7, #11]

            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2162      	movs	r1, #98	; 0x62
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8d7 	bl	800146e <IIS2MDC_Write_Reg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00f      	beq.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e00b      	b.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	331c      	adds	r3, #28
 80012d2:	2101      	movs	r1, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fa5a 	bl	800178e <iis2mdc_i2c_interface_set>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	080014a5 	.word	0x080014a5
 80012f4:	08001507 	.word	0x08001507

080012f8 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	331c      	adds	r3, #28
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f9aa 	bl	8001660 <iis2mdc_block_data_update_set>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e028      	b.n	800136a <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	331c      	adds	r3, #28
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f952 	bl	80015c8 <iis2mdc_operating_mode_set>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e01c      	b.n	800136a <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	331c      	adds	r3, #28
 8001334:	2103      	movs	r1, #3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f96c 	bl	8001614 <iis2mdc_data_rate_set>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e010      	b.n	800136a <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	331c      	adds	r3, #28
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f9f7 	bl	8001742 <iis2mdc_self_test_set>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e004      	b.n	800136a <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e010      	b.n	80013aa <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	331c      	adds	r3, #28
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f91a 	bl	80015c8 <iis2mdc_operating_mode_set>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e004      	b.n	80013aa <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80013c2:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	331c      	adds	r3, #28
 80013e0:	f107 0210 	add.w	r2, r7, #16
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f960 	bl	80016ac <iis2mdc_magnetic_raw_get>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e036      	b.n	8001466 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffd7 	bl	80013b2 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001404:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	edd7 7a03 	vldr	s15, [r7, #12]
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	edd7 7a03 	vldr	s15, [r7, #12]
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143c:	ee17 2a90 	vmov	r2, s15
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001444:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145c:	ee17 2a90 	vmov	r2, s15
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <IIS2MDC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Write_Reg(IIS2MDC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	70fb      	strb	r3, [r7, #3]
 800147a:	4613      	mov	r3, r2
 800147c:	70bb      	strb	r3, [r7, #2]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 001c 	add.w	r0, r3, #28
 8001484:	1cba      	adds	r2, r7, #2
 8001486:	78f9      	ldrb	r1, [r7, #3]
 8001488:	2301      	movs	r3, #1
 800148a:	f000 f885 	bl	8001598 <iis2mdc_write_reg>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <IIS2MDC_Write_Reg+0x2c>
  {
    return IIS2MDC_ERROR;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e000      	b.n	800149c <IIS2MDC_Write_Reg+0x2e>
  }

  return IIS2MDC_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	461a      	mov	r2, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	72fb      	strb	r3, [r7, #11]
 80014b4:	4613      	mov	r3, r2
 80014b6:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10e      	bne.n	80014e2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	695c      	ldr	r4, [r3, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	7b1b      	ldrb	r3, [r3, #12]
 80014cc:	b298      	uxth	r0, r3
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b299      	uxth	r1, r3
 80014d8:	893b      	ldrh	r3, [r7, #8]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	47a0      	blx	r4
 80014de:	4603      	mov	r3, r0
 80014e0:	e00d      	b.n	80014fe <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	695c      	ldr	r4, [r3, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b299      	uxth	r1, r3
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	47a0      	blx	r4
 80014fc:	4603      	mov	r3, r0
  }
}
 80014fe:	4618      	mov	r0, r3
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
 8001516:	4613      	mov	r3, r2
 8001518:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	691c      	ldr	r4, [r3, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	7b1b      	ldrb	r3, [r3, #12]
 800152e:	b298      	uxth	r0, r3
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b299      	uxth	r1, r3
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	47a0      	blx	r4
 8001540:	4603      	mov	r3, r0
 8001542:	e00d      	b.n	8001560 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	691c      	ldr	r4, [r3, #16]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
 800154c:	b298      	uxth	r0, r3
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001554:	b2db      	uxtb	r3, r3
 8001556:	b299      	uxth	r1, r3
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	47a0      	blx	r4
 800155e:	4603      	mov	r3, r0
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}

08001568 <iis2mdc_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	72fb      	strb	r3, [r7, #11]
 8001578:	4613      	mov	r3, r2
 800157a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685c      	ldr	r4, [r3, #4]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6898      	ldr	r0, [r3, #8]
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	7af9      	ldrb	r1, [r7, #11]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	47a0      	blx	r4
 800158c:	6178      	str	r0, [r7, #20]
  return ret;
 800158e:	697b      	ldr	r3, [r7, #20]
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}

08001598 <iis2mdc_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	7af9      	ldrb	r1, [r7, #11]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	47a0      	blx	r4
 80015bc:	6178      	str	r0, [r7, #20]
  return ret;
 80015be:	697b      	ldr	r3, [r7, #20]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}

080015c8 <iis2mdc_operating_mode_set>:
  * @param  val      change the values of md in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx, iis2mdc_md_t val)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 80015d4:	f107 0208 	add.w	r2, r7, #8
 80015d8:	2301      	movs	r3, #1
 80015da:	2160      	movs	r1, #96	; 0x60
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffc3 	bl	8001568 <iis2mdc_read_reg>
 80015e2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	7a3b      	ldrb	r3, [r7, #8]
 80015f4:	f362 0301 	bfi	r3, r2, #0, #2
 80015f8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 80015fa:	f107 0208 	add.w	r2, r7, #8
 80015fe:	2301      	movs	r3, #1
 8001600:	2160      	movs	r1, #96	; 0x60
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffc8 	bl	8001598 <iis2mdc_write_reg>
 8001608:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001620:	f107 0208 	add.w	r2, r7, #8
 8001624:	2301      	movs	r3, #1
 8001626:	2160      	movs	r1, #96	; 0x60
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff9d 	bl	8001568 <iis2mdc_read_reg>
 800162e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	7a3b      	ldrb	r3, [r7, #8]
 8001640:	f362 0383 	bfi	r3, r2, #2, #2
 8001644:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001646:	f107 0208 	add.w	r2, r7, #8
 800164a:	2301      	movs	r3, #1
 800164c:	2160      	movs	r1, #96	; 0x60
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa2 	bl	8001598 <iis2mdc_write_reg>
 8001654:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	2301      	movs	r3, #1
 8001672:	2162      	movs	r1, #98	; 0x62
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff77 	bl	8001568 <iis2mdc_read_reg>
 800167a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	7a3b      	ldrb	r3, [r7, #8]
 800168c:	f362 1304 	bfi	r3, r2, #4, #1
 8001690:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	2301      	movs	r3, #1
 8001698:	2162      	movs	r1, #98	; 0x62
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff7c 	bl	8001598 <iis2mdc_write_reg>
 80016a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80016b6:	f107 020c 	add.w	r2, r7, #12
 80016ba:	2306      	movs	r3, #6
 80016bc:	2168      	movs	r1, #104	; 0x68
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff52 	bl	8001568 <iis2mdc_read_reg>
 80016c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29a      	uxth	r2, r3
 80016da:	7b3b      	ldrb	r3, [r7, #12]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	b212      	sxth	r2, r2
 80016f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	3302      	adds	r3, #2
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29a      	uxth	r2, r3
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3302      	adds	r3, #2
 800170c:	b212      	sxth	r2, r2
 800170e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001710:	7c7a      	ldrb	r2, [r7, #17]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3304      	adds	r3, #4
 8001716:	b212      	sxth	r2, r2
 8001718:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3304      	adds	r3, #4
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	b29b      	uxth	r3, r3
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b29a      	uxth	r2, r3
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b29a      	uxth	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3304      	adds	r3, #4
 8001734:	b212      	sxth	r2, r2
 8001736:	801a      	strh	r2, [r3, #0]

  return ret;
 8001738:	697b      	ldr	r3, [r7, #20]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	2301      	movs	r3, #1
 8001754:	2162      	movs	r1, #98	; 0x62
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff06 	bl	8001568 <iis2mdc_read_reg>
 800175c:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	7a3b      	ldrb	r3, [r7, #8]
 800176e:	f362 0341 	bfi	r3, r2, #1, #1
 8001772:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2301      	movs	r3, #1
 800177a:	2162      	movs	r1, #98	; 0x62
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff0b 	bl	8001598 <iis2mdc_write_reg>
 8001782:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <iis2mdc_i2c_interface_set>:
  * @param  val      change the values of i2c_dis in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx, iis2mdc_i2c_dis_t val)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 800179a:	f107 0208 	add.w	r2, r7, #8
 800179e:	2301      	movs	r3, #1
 80017a0:	2162      	movs	r1, #98	; 0x62
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fee0 	bl	8001568 <iis2mdc_read_reg>
 80017a8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	7a3b      	ldrb	r3, [r7, #8]
 80017ba:	f362 1345 	bfi	r3, r2, #5, #1
 80017be:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80017c0:	f107 0208 	add.w	r2, r7, #8
 80017c4:	2301      	movs	r3, #1
 80017c6:	2162      	movs	r1, #98	; 0x62
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fee5 	bl	8001598 <iis2mdc_write_reg>
 80017ce:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017d0:	68fb      	ldr	r3, [r7, #12]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <BSP_I2C2_Init+0x70>)
 80017e8:	4a19      	ldr	r2, [pc, #100]	; (8001850 <BSP_I2C2_Init+0x74>)
 80017ea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <BSP_I2C2_Init+0x78>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	4918      	ldr	r1, [pc, #96]	; (8001854 <BSP_I2C2_Init+0x78>)
 80017f4:	600a      	str	r2, [r1, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d122      	bne.n	8001840 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80017fa:	4814      	ldr	r0, [pc, #80]	; (800184c <BSP_I2C2_Init+0x70>)
 80017fc:	f001 fff4 	bl	80037e8 <HAL_I2C_GetState>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11c      	bne.n	8001840 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <BSP_I2C2_Init+0x70>)
 8001808:	f000 f8fe 	bl	8001a08 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001812:	480e      	ldr	r0, [pc, #56]	; (800184c <BSP_I2C2_Init+0x70>)
 8001814:	f000 f8b4 	bl	8001980 <MX_I2C2_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 800181e:	f06f 0307 	mvn.w	r3, #7
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e00c      	b.n	8001840 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <BSP_I2C2_Init+0x70>)
 800182a:	f002 fa13 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001834:	f06f 0307 	mvn.w	r3, #7
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	e001      	b.n	8001840 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000208 	.word	0x20000208
 8001850:	40005800 	.word	0x40005800
 8001854:	2000002c 	.word	0x2000002c

08001858 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <BSP_I2C2_DeInit+0x48>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d014      	beq.n	8001894 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <BSP_I2C2_DeInit+0x48>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3b01      	subs	r3, #1
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <BSP_I2C2_DeInit+0x48>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <BSP_I2C2_DeInit+0x48>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <BSP_I2C2_DeInit+0x4c>)
 800187e:	f000 f917 	bl	8001ab0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <BSP_I2C2_DeInit+0x4c>)
 8001884:	f001 fd3f 	bl	8003306 <HAL_I2C_DeInit>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800188e:	f06f 0307 	mvn.w	r3, #7
 8001892:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000002c 	.word	0x2000002c
 80018a4:	20000208 	.word	0x20000208

080018a8 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	460b      	mov	r3, r1
 80018b8:	81bb      	strh	r3, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80018c2:	89ba      	ldrh	r2, [r7, #12]
 80018c4:	89f9      	ldrh	r1, [r7, #14]
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2301      	movs	r3, #1
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <BSP_I2C2_WriteReg+0x60>)
 80018d8:	f001 fd58 	bl	800338c <HAL_I2C_Mem_Write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80018e2:	4809      	ldr	r0, [pc, #36]	; (8001908 <BSP_I2C2_WriteReg+0x60>)
 80018e4:	f001 ff8e 	bl	8003804 <HAL_I2C_GetError>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d103      	bne.n	80018f6 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80018ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e002      	b.n	80018fc <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80018f6:	f06f 0303 	mvn.w	r3, #3
 80018fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80018fc:	697b      	ldr	r3, [r7, #20]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000208 	.word	0x20000208

0800190c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af04      	add	r7, sp, #16
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	81fb      	strh	r3, [r7, #14]
 800191a:	460b      	mov	r3, r1
 800191c:	81bb      	strh	r3, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001926:	89ba      	ldrh	r2, [r7, #12]
 8001928:	89f9      	ldrh	r1, [r7, #14]
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <BSP_I2C2_ReadReg+0x60>)
 800193c:	f001 fe3a 	bl	80035b4 <HAL_I2C_Mem_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <BSP_I2C2_ReadReg+0x60>)
 8001948:	f001 ff5c 	bl	8003804 <HAL_I2C_GetError>
 800194c:	4603      	mov	r3, r0
 800194e:	2b04      	cmp	r3, #4
 8001950:	d103      	bne.n	800195a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001952:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e002      	b.n	8001960 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800195a:	f06f 0303 	mvn.w	r3, #3
 800195e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000208 	.word	0x20000208

08001970 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001974:	f000 f922 	bl	8001bbc <HAL_GetTick>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <MX_I2C2_Init+0x84>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f640 6214 	movw	r2, #3604	; 0xe14
 8001998:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f001 fc0f 	bl	80031e8 <HAL_I2C_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019d4:	2100      	movs	r1, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f002 f93c 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C2_Init+0x66>
  {
    ret = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f002 f97e 	bl	8003cea <HAL_I2CEx_ConfigDigitalFilter>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C2_Init+0x78>
  {
    ret = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40005800 	.word	0x40005800

08001a08 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SMBA_GPIO_PIN;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SMBA_GPIO_AF;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SMBA_GPIO_PORT, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	481a      	ldr	r0, [pc, #104]	; (8001aac <I2C2_MspInit+0xa4>)
 8001a44:	f001 f91a 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4812      	ldr	r0, [pc, #72]	; (8001aac <I2C2_MspInit+0xa4>)
 8001a64:	f001 f90a 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <I2C2_MspInit+0xa4>)
 8001a84:	f001 f8fa 	bl	8002c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <I2C2_MspInit+0xa0>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48001400 	.word	0x48001400

08001ab0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <I2C2_MspDeInit+0x34>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <I2C2_MspDeInit+0x34>)
 8001abe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ac2:	6593      	str	r3, [r2, #88]	; 0x58
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SMBA_GPIO_PORT, BUS_I2C2_SMBA_GPIO_PIN);
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <I2C2_MspDeInit+0x38>)
 8001ac8:	f001 fa6a 	bl	8002fa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001acc:	2102      	movs	r1, #2
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <I2C2_MspDeInit+0x38>)
 8001ad0:	f001 fa66 	bl	8002fa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <I2C2_MspDeInit+0x38>)
 8001ad8:	f001 fa62 	bl	8002fa0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48001400 	.word	0x48001400

08001aec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af6:	2003      	movs	r0, #3
 8001af8:	f001 f820 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f80d 	bl	8001b1c <HAL_InitTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	e001      	b.n	8001b12 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0e:	f7ff f9f1 	bl	8000ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_InitTick+0x70>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f82d 	bl	8002ba6 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d809      	bhi.n	8001b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 fff7 	bl	8002b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_InitTick+0x74>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e004      	b.n	8001b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e001      	b.n	8001b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000254 	.word	0x20000254

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000254 	.word	0x20000254

08001bd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	609a      	str	r2, [r3, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3360      	adds	r3, #96	; 0x60
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <LL_ADC_SetOffset+0x44>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	03fff000 	.word	0x03fff000

08001c84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3360      	adds	r3, #96	; 0x60
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3330      	adds	r3, #48	; 0x30
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	211f      	movs	r1, #31
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 011f 	and.w	r1, r3, #31
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3314      	adds	r3, #20
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0e5b      	lsrs	r3, r3, #25
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	0d1b      	lsrs	r3, r3, #20
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2107      	movs	r1, #7
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	401a      	ands	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	0d1b      	lsrs	r3, r3, #20
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	431a      	orrs	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0318 	and.w	r3, r3, #24
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001de0:	40d9      	lsrs	r1, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	400b      	ands	r3, r1
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	0007ffff 	.word	0x0007ffff

08001e04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6093      	str	r3, [r2, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e3c:	d101      	bne.n	8001e42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <LL_ADC_IsEnabled+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_ADC_IsEnabled+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d101      	bne.n	8001f04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e12d      	b.n	800218a <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7fe fffd 	bl	8000f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff67 	bl	8001e28 <LL_ADC_IsDeepPowerDownEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff4d 	bl	8001e04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff82 	bl	8001e78 <LL_ADC_IsInternalRegulatorEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff66 	bl	8001e50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f84:	4b83      	ldr	r3, [pc, #524]	; (8002194 <HAL_ADC_Init+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	4a83      	ldr	r2, [pc, #524]	; (8002198 <HAL_ADC_Init+0x284>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff66 	bl	8001e78 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff77 	bl	8001ec6 <LL_ADC_REG_IsConversionOngoing>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80c8 	bne.w	8002178 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80c4 	bne.w	8002178 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ff8:	f043 0202 	orr.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff4b 	bl	8001ea0 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002010:	4862      	ldr	r0, [pc, #392]	; (800219c <HAL_ADC_Init+0x288>)
 8002012:	f7ff ff45 	bl	8001ea0 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4619      	mov	r1, r3
 8002022:	485f      	ldr	r0, [pc, #380]	; (80021a0 <HAL_ADC_Init+0x28c>)
 8002024:	f7ff fdd6 	bl	8001bd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e5b      	ldrb	r3, [r3, #25]
 800202c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002032:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002038:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800203e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d106      	bne.n	8002064 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	3b01      	subs	r3, #1
 800205c:	045b      	lsls	r3, r3, #17
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_ADC_Init+0x290>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	430b      	orrs	r3, r1
 8002092:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff14 	bl	8001ec6 <LL_ADC_REG_IsConversionOngoing>
 800209e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff21 	bl	8001eec <LL_ADC_INJ_IsConversionOngoing>
 80020aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d140      	bne.n	8002134 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d13d      	bne.n	8002134 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020c2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020da:	f023 0306 	bic.w	r3, r3, #6
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d118      	bne.n	8002124 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002114:	430a      	orrs	r2, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	e007      	b.n	8002134 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10c      	bne.n	8002156 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f023 010f 	bic.w	r1, r3, #15
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
 8002154:	e007      	b.n	8002166 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 020f 	bic.w	r2, r2, #15
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	; 0x58
 8002176:	e007      	b.n	8002188 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002188:	7ffb      	ldrb	r3, [r7, #31]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000
 8002198:	053e2d63 	.word	0x053e2d63
 800219c:	50040000 	.word	0x50040000
 80021a0:	50040300 	.word	0x50040300
 80021a4:	fff0c007 	.word	0xfff0c007

080021a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0b6      	sub	sp, #216	; 0xd8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x22>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e3d4      	b.n	8002974 <HAL_ADC_ConfigChannel+0x7cc>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe75 	bl	8001ec6 <LL_ADC_REG_IsConversionOngoing>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 83b9 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d824      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	3b02      	subs	r3, #2
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d81b      	bhi.n	800222e <HAL_ADC_ConfigChannel+0x86>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_ADC_ConfigChannel+0x54>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	08002215 	.word	0x08002215
 8002204:	0800221d 	.word	0x0800221d
 8002208:	08002225 	.word	0x08002225
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	220c      	movs	r2, #12
 8002210:	605a      	str	r2, [r3, #4]
          break;
 8002212:	e011      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2212      	movs	r2, #18
 8002218:	605a      	str	r2, [r3, #4]
          break;
 800221a:	e00d      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2218      	movs	r2, #24
 8002220:	605a      	str	r2, [r3, #4]
          break;
 8002222:	e009      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	605a      	str	r2, [r3, #4]
          break;
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2206      	movs	r2, #6
 8002232:	605a      	str	r2, [r3, #4]
          break;
 8002234:	e000      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002236:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	f7ff fd61 	bl	8001d0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe39 	bl	8001ec6 <LL_ADC_REG_IsConversionOngoing>
 8002254:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fe45 	bl	8001eec <LL_ADC_INJ_IsConversionOngoing>
 8002262:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 81c1 	bne.w	80025f2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 81bc 	bne.w	80025f2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002282:	d10f      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	f7ff fd68 	bl	8001d64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fd22 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022a2:	e00e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7ff fd57 	bl	8001d64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd12 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d00a      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6919      	ldr	r1, [r3, #16]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022f4:	f7ff fca2 	bl	8001c3c <LL_ADC_SetOffset>
 80022f8:	e17b      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fcbf 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x17e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fcb4 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x1bc>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fca9 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800234c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d4>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	e018      	b.n	80023ae <HAL_ADC_ConfigChannel+0x206>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e004      	b.n	80023ae <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d106      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fc78 	bl	8001cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fc5c 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x244>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fc51 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	e01e      	b.n	800242a <HAL_ADC_ConfigChannel+0x282>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc46 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800240a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800240e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800241e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x29a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	e018      	b.n	8002474 <HAL_ADC_ConfigChannel+0x2cc>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800245a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800245e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e004      	b.n	8002474 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800246a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2200      	movs	r2, #0
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fc15 	bl	8001cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fbf9 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x30a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2102      	movs	r1, #2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fbee 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	e01e      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x348>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2102      	movs	r1, #2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fbe3 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e004      	b.n	80024ee <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80024e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x360>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	e016      	b.n	8002536 <HAL_ADC_ConfigChannel+0x38e>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800251a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800251c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e004      	b.n	8002536 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002536:	429a      	cmp	r2, r3
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fbb4 	bl	8001cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2103      	movs	r1, #3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fb98 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x3cc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb8d 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 021f 	and.w	r2, r3, #31
 8002572:	e017      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3fc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fb82 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800258c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800258e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800259a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x414>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e011      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x438>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2103      	movs	r1, #3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fb5f 	bl	8001cb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fc52 	bl	8001ea0 <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8140 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff fbd3 	bl	8001dbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a8f      	ldr	r2, [pc, #572]	; (8002858 <HAL_ADC_ConfigChannel+0x6b0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 8131 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <HAL_ADC_ConfigChannel+0x4a2>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	3301      	adds	r3, #1
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2b09      	cmp	r3, #9
 8002640:	bf94      	ite	ls
 8002642:	2301      	movls	r3, #1
 8002644:	2300      	movhi	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e019      	b.n	800267e <HAL_ADC_ConfigChannel+0x4d6>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800265c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b09      	cmp	r3, #9
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267e:	2b00      	cmp	r3, #0
 8002680:	d079      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d107      	bne.n	800269e <HAL_ADC_ConfigChannel+0x4f6>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	3301      	adds	r3, #1
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269c:	e015      	b.n	80026ca <HAL_ADC_ConfigChannel+0x522>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	069b      	lsls	r3, r3, #26
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x542>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	e017      	b.n	800271a <HAL_ADC_ConfigChannel+0x572>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	ea42 0103 	orr.w	r1, r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	e018      	b.n	8002772 <HAL_ADC_ConfigChannel+0x5ca>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002772:	430b      	orrs	r3, r1
 8002774:	e081      	b.n	800287a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x5ea>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002790:	e015      	b.n	80027be <HAL_ADC_ConfigChannel+0x616>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_ConfigChannel+0x636>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	e017      	b.n	800280e <HAL_ADC_ConfigChannel+0x666>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	61fb      	str	r3, [r7, #28]
  return result;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	ea42 0103 	orr.w	r1, r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_ADC_ConfigChannel+0x692>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	3b1e      	subs	r3, #30
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002838:	e01e      	b.n	8002878 <HAL_ADC_ConfigChannel+0x6d0>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	613b      	str	r3, [r7, #16]
  return result;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e006      	b.n	8002864 <HAL_ADC_ConfigChannel+0x6bc>
 8002856:	bf00      	nop
 8002858:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	3b1e      	subs	r3, #30
 8002872:	051b      	lsls	r3, r3, #20
 8002874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002878:	430b      	orrs	r3, r1
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	4619      	mov	r1, r3
 8002880:	f7ff fa70 	bl	8001d64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_ADC_ConfigChannel+0x7d4>)
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d06b      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002890:	483b      	ldr	r0, [pc, #236]	; (8002980 <HAL_ADC_ConfigChannel+0x7d8>)
 8002892:	f7ff f9c5 	bl	8001c20 <LL_ADC_GetCommonPathInternalCh>
 8002896:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_ADC_ConfigChannel+0x7dc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d126      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d120      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a34      	ldr	r2, [pc, #208]	; (8002988 <HAL_ADC_ConfigChannel+0x7e0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d156      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c2:	4619      	mov	r1, r3
 80028c4:	482e      	ldr	r0, [pc, #184]	; (8002980 <HAL_ADC_ConfigChannel+0x7d8>)
 80028c6:	f7ff f998 	bl	8001bfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_ADC_ConfigChannel+0x7e4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <HAL_ADC_ConfigChannel+0x7e8>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	099a      	lsrs	r2, r3, #6
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028e2:	e002      	b.n	80028ea <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f0:	e03a      	b.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_ADC_ConfigChannel+0x7ec>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d113      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x77c>
 80028fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_ADC_ConfigChannel+0x7e0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291a:	4619      	mov	r1, r3
 800291c:	4818      	ldr	r0, [pc, #96]	; (8002980 <HAL_ADC_ConfigChannel+0x7d8>)
 800291e:	f7ff f96c 	bl	8001bfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002922:	e021      	b.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_ADC_ConfigChannel+0x7f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11c      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800292e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_ADC_ConfigChannel+0x7e0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d111      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294c:	4619      	mov	r1, r3
 800294e:	480c      	ldr	r0, [pc, #48]	; (8002980 <HAL_ADC_ConfigChannel+0x7d8>)
 8002950:	f7ff f953 	bl	8001bfa <LL_ADC_SetCommonPathInternalCh>
 8002954:	e008      	b.n	8002968 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002970:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002974:	4618      	mov	r0, r3
 8002976:	37d8      	adds	r7, #216	; 0xd8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	80080000 	.word	0x80080000
 8002980:	50040300 	.word	0x50040300
 8002984:	c7520000 	.word	0xc7520000
 8002988:	50040000 	.word	0x50040000
 800298c:	20000000 	.word	0x20000000
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	cb840000 	.word	0xcb840000
 8002998:	80000001 	.word	0x80000001

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff8e 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff29 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff3e 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff8e 	bl	8002a90 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5d 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff31 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d005      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e047      	b.n	8002c72 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 020e 	bic.w	r2, r2, #14
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f003 021c 	and.w	r2, r3, #28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c2e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c50:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
    }
  }
  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e166      	b.n	8002f5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8158 	beq.w	8002f54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d00b      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b12      	cmp	r3, #18
 8002cc2:	d130      	bne.n	8002d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0201 	and.w	r2, r3, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0xea>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d123      	bne.n	8002dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80b2 	beq.w	8002f54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	4a60      	ldr	r2, [pc, #384]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e08:	4a5c      	ldr	r2, [pc, #368]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e32:	d02b      	beq.n	8002e8c <HAL_GPIO_Init+0x210>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d025      	beq.n	8002e88 <HAL_GPIO_Init+0x20c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_GPIO_Init+0x308>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01f      	beq.n	8002e84 <HAL_GPIO_Init+0x208>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <HAL_GPIO_Init+0x30c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d019      	beq.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a4f      	ldr	r2, [pc, #316]	; (8002f8c <HAL_GPIO_Init+0x310>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_GPIO_Init+0x200>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a4e      	ldr	r2, [pc, #312]	; (8002f90 <HAL_GPIO_Init+0x314>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00d      	beq.n	8002e78 <HAL_GPIO_Init+0x1fc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a4d      	ldr	r2, [pc, #308]	; (8002f94 <HAL_GPIO_Init+0x318>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <HAL_GPIO_Init+0x1f8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_GPIO_Init+0x31c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_GPIO_Init+0x1f4>
 8002e6c:	2307      	movs	r3, #7
 8002e6e:	e00e      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e70:	2308      	movs	r3, #8
 8002e72:	e00c      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e74:	2306      	movs	r3, #6
 8002e76:	e00a      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e78:	2305      	movs	r3, #5
 8002e7a:	e008      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e006      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9e:	4937      	ldr	r1, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed0:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efa:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f00:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f ae91 	bne.w	8002c8c <HAL_GPIO_Init+0x10>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	48001400 	.word	0x48001400
 8002f94:	48001800 	.word	0x48001800
 8002f98:	48001c00 	.word	0x48001c00
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002fae:	e0c9      	b.n	8003144 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80bc 	beq.w	800313e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002fc6:	4a66      	ldr	r2, [pc, #408]	; (8003160 <HAL_GPIO_DeInit+0x1c0>)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fee:	d02b      	beq.n	8003048 <HAL_GPIO_DeInit+0xa8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a5c      	ldr	r2, [pc, #368]	; (8003164 <HAL_GPIO_DeInit+0x1c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d025      	beq.n	8003044 <HAL_GPIO_DeInit+0xa4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a5b      	ldr	r2, [pc, #364]	; (8003168 <HAL_GPIO_DeInit+0x1c8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d01f      	beq.n	8003040 <HAL_GPIO_DeInit+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a5a      	ldr	r2, [pc, #360]	; (800316c <HAL_GPIO_DeInit+0x1cc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d019      	beq.n	800303c <HAL_GPIO_DeInit+0x9c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a59      	ldr	r2, [pc, #356]	; (8003170 <HAL_GPIO_DeInit+0x1d0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_GPIO_DeInit+0x98>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_GPIO_DeInit+0x1d4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_GPIO_DeInit+0x94>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_GPIO_DeInit+0x1d8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <HAL_GPIO_DeInit+0x90>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a56      	ldr	r2, [pc, #344]	; (800317c <HAL_GPIO_DeInit+0x1dc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_GPIO_DeInit+0x8c>
 8003028:	2307      	movs	r3, #7
 800302a:	e00e      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 800302c:	2308      	movs	r3, #8
 800302e:	e00c      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003030:	2306      	movs	r3, #6
 8003032:	e00a      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003034:	2305      	movs	r3, #5
 8003036:	e008      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003038:	2304      	movs	r3, #4
 800303a:	e006      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 800303c:	2303      	movs	r3, #3
 800303e:	e004      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003040:	2302      	movs	r3, #2
 8003042:	e002      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_GPIO_DeInit+0xaa>
 8003048:	2300      	movs	r3, #0
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	f002 0203 	and.w	r2, r2, #3
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	4093      	lsls	r3, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	429a      	cmp	r2, r3
 8003058:	d132      	bne.n	80030c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	4947      	ldr	r1, [pc, #284]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 8003064:	4013      	ands	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	4943      	ldr	r1, [pc, #268]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 8003072:	4013      	ands	r3, r2
 8003074:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003076:	4b42      	ldr	r3, [pc, #264]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	4940      	ldr	r1, [pc, #256]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 8003080:	4013      	ands	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	43db      	mvns	r3, r3
 800308c:	493c      	ldr	r1, [pc, #240]	; (8003180 <HAL_GPIO_DeInit+0x1e0>)
 800308e:	4013      	ands	r3, r2
 8003090:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030a2:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <HAL_GPIO_DeInit+0x1c0>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	482b      	ldr	r0, [pc, #172]	; (8003160 <HAL_GPIO_DeInit+0x1c0>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	400a      	ands	r2, r1
 80030ba:	3302      	adds	r3, #2
 80030bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2103      	movs	r1, #3
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	08d2      	lsrs	r2, r2, #3
 80030f4:	4019      	ands	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3208      	adds	r2, #8
 80030fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2103      	movs	r1, #3
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2101      	movs	r1, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2103      	movs	r1, #3
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f af2f 	bne.w	8002fb0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	48000400 	.word	0x48000400
 8003168:	48000800 	.word	0x48000800
 800316c:	48000c00 	.word	0x48000c00
 8003170:	48001000 	.word	0x48001000
 8003174:	48001400 	.word	0x48001400
 8003178:	48001800 	.word	0x48001800
 800317c:	48001c00 	.word	0x48001c00
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43d9      	mvns	r1, r3
 80031d2:	887b      	ldrh	r3, [r7, #2]
 80031d4:	400b      	ands	r3, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e081      	b.n	80032fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8a8 	bl	8003364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e006      	b.n	8003270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800326e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d104      	bne.n	8003282 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	ea42 0103 	orr.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e021      	b.n	800335c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f821 	bl	8003378 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	460b      	mov	r3, r1
 80033a0:	813b      	strh	r3, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	f040 80f9 	bne.w	80035a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_I2C_Mem_Write+0x34>
 80033ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0ed      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_I2C_Mem_Write+0x4e>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0e6      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e2:	f7fe fbeb 	bl	8001bbc <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2319      	movs	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fadd 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0d1      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2221      	movs	r2, #33	; 0x21
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800342c:	88f8      	ldrh	r0, [r7, #6]
 800342e:	893a      	ldrh	r2, [r7, #8]
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4603      	mov	r3, r0
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f9ed 	bl	800381c <I2C_RequestMemoryWrite>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0a9      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d90e      	bls.n	800347c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fbbf 	bl	8003bf8 <I2C_TransferConfig>
 800347a:	e00f      	b.n	800349c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	b2da      	uxtb	r2, r3
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fbae 	bl	8003bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fac7 	bl	8003a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e07b      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d034      	beq.n	8003554 <HAL_I2C_Mem_Write+0x1c8>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d130      	bne.n	8003554 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fa59 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04d      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2bff      	cmp	r3, #255	; 0xff
 8003514:	d90e      	bls.n	8003534 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fb63 	bl	8003bf8 <I2C_TransferConfig>
 8003532:	e00f      	b.n	8003554 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	b2da      	uxtb	r2, r3
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fb52 	bl	8003bf8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d19e      	bne.n	800349c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 faa6 	bl	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01a      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2220      	movs	r2, #32
 8003578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_I2C_Mem_Write+0x224>)
 8003586:	400b      	ands	r3, r1
 8003588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	f040 80fd 	bne.w	80037d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_I2C_Mem_Read+0x34>
 80035e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0f1      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Mem_Read+0x4e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ea      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800360a:	f7fe fad7 	bl	8001bbc <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f9c9 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d5      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2222      	movs	r2, #34	; 0x22
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003654:	88f8      	ldrh	r0, [r7, #6]
 8003656:	893a      	ldrh	r2, [r7, #8]
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4603      	mov	r3, r0
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f92d 	bl	80038c4 <I2C_RequestMemoryRead>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0ad      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2bff      	cmp	r3, #255	; 0xff
 8003684:	d90e      	bls.n	80036a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	b2da      	uxtb	r2, r3
 8003692:	8979      	ldrh	r1, [r7, #10]
 8003694:	4b52      	ldr	r3, [pc, #328]	; (80037e0 <HAL_I2C_Mem_Read+0x22c>)
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 faab 	bl	8003bf8 <I2C_TransferConfig>
 80036a2:	e00f      	b.n	80036c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	8979      	ldrh	r1, [r7, #10]
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_I2C_Mem_Read+0x22c>)
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa9a 	bl	8003bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	2200      	movs	r2, #0
 80036cc:	2104      	movs	r1, #4
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f970 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07c      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d034      	beq.n	8003784 <HAL_I2C_Mem_Read+0x1d0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d130      	bne.n	8003784 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	2200      	movs	r2, #0
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f941 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e04d      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d90e      	bls.n	8003764 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	22ff      	movs	r2, #255	; 0xff
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	b2da      	uxtb	r2, r3
 8003752:	8979      	ldrh	r1, [r7, #10]
 8003754:	2300      	movs	r3, #0
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fa4b 	bl	8003bf8 <I2C_TransferConfig>
 8003762:	e00f      	b.n	8003784 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	b2da      	uxtb	r2, r3
 8003774:	8979      	ldrh	r1, [r7, #10]
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa3a 	bl	8003bf8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d19a      	bne.n	80036c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f98e 	bl	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e01a      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2220      	movs	r2, #32
 80037a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_I2C_Mem_Read+0x230>)
 80037b6:	400b      	ands	r3, r1
 80037b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	80002400 	.word	0x80002400
 80037e4:	fe00e800 	.word	0xfe00e800

080037e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	461a      	mov	r2, r3
 800382a:	4603      	mov	r3, r0
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	460b      	mov	r3, r1
 8003830:	813b      	strh	r3, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	8979      	ldrh	r1, [r7, #10]
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <I2C_RequestMemoryWrite+0xa4>)
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f9d7 	bl	8003bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	69b9      	ldr	r1, [r7, #24]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8f0 	bl	8003a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e02c      	b.n	80038b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
 800386e:	e015      	b.n	800389c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8d6 	bl	8003a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e012      	b.n	80038b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f884 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	80002000 	.word	0x80002000

080038c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <I2C_RequestMemoryRead+0xa4>)
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2300      	movs	r3, #0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f984 	bl	8003bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	69b9      	ldr	r1, [r7, #24]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f89d 	bl	8003a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e02c      	b.n	800395e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800390a:	893b      	ldrh	r3, [r7, #8]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
 8003914:	e015      	b.n	8003942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003916:	893b      	ldrh	r3, [r7, #8]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f883 	bl	8003a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e012      	b.n	800395e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003938:	893b      	ldrh	r3, [r7, #8]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2200      	movs	r2, #0
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f831 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	80002000 	.word	0x80002000

0800396c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d103      	bne.n	800398a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d007      	beq.n	80039a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	619a      	str	r2, [r3, #24]
  }
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c4:	e022      	b.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d01e      	beq.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe f8f5 	bl	8001bbc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d113      	bne.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e00f      	b.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d0cd      	beq.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a40:	e02c      	b.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f870 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02a      	b.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d01e      	beq.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fe f8ad 	bl	8001bbc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d113      	bne.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e007      	b.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d1cb      	bne.n	8003a42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac0:	e028      	b.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f830 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e026      	b.n	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe f871 	bl	8001bbc <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d1cf      	bne.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d151      	bne.n	8003bea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b46:	e022      	b.n	8003b8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d01e      	beq.n	8003b8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fe f834 	bl	8001bbc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <I2C_IsAcknowledgeFailed+0x3a>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d113      	bne.n	8003b8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e02e      	b.n	8003bec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d1d5      	bne.n	8003b48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff fedd 	bl	800396c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	fe00e800 	.word	0xfe00e800

08003bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	4613      	mov	r3, r2
 8003c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	0d5b      	lsrs	r3, r3, #21
 8003c14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <I2C_TransferConfig+0x58>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	ea02 0103 	and.w	r1, r2, r3
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c28:	7a7b      	ldrb	r3, [r7, #9]
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	03ff63ff 	.word	0x03ff63ff

08003c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d138      	bne.n	8003cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e032      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d139      	bne.n	8003d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e033      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2224      	movs	r2, #36	; 0x24
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d102      	bne.n	8003d9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9a:	e00b      	b.n	8003db4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d102      	bne.n	8003db2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db0:	e000      	b.n	8003db4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003db2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40007000 	.word	0x40007000

08003dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d141      	bne.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd2:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d131      	bne.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de6:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df8:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2232      	movs	r2, #50	; 0x32
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0c9b      	lsrs	r3, r3, #18
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	e002      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1e:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d102      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f2      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d158      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e057      	b.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e54:	e04d      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d141      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d131      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e72:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e84:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	0c9b      	lsrs	r3, r3, #18
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea2:	e002      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d102      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f2      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d112      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ee0:	e007      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40007000 	.word	0x40007000
 8003f04:	20000000 	.word	0x20000000
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1a:	6053      	str	r3, [r2, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40007000 	.word	0x40007000

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 bc16 	b.w	800476c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	4ba0      	ldr	r3, [pc, #640]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f4a:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80e4 	beq.w	800412a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4c>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	f040 808b 	bne.w	8004086 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 8087 	bne.w	8004086 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f78:	4b92      	ldr	r3, [pc, #584]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x64>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e3ed      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_RCC_OscConfig+0x7e>
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCC_OscConfig+0x8a>
 8003faa:	4b86      	ldr	r3, [pc, #536]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d223      	bcs.n	8004002 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fdc6 	bl	8004b50 <RCC_SetFlashLatencyFromMSIRange>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e3ce      	b.n	800476c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7c      	ldr	r2, [pc, #496]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4977      	ldr	r1, [pc, #476]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	4972      	ldr	r1, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e025      	b.n	800404e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004002:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6f      	ldr	r2, [pc, #444]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	496a      	ldr	r1, [pc, #424]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004020:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	4965      	ldr	r1, [pc, #404]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd86 	bl	8004b50 <RCC_SetFlashLatencyFromMSIRange>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e38e      	b.n	800476c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404e:	f000 fcbf 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a5a      	ldr	r2, [pc, #360]	; (80041c8 <HAL_RCC_OscConfig+0x29c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	fa21 f303 	lsr.w	r3, r1, r3
 800406a:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_OscConfig+0x2a0>)
 800406c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800406e:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_RCC_OscConfig+0x2a4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd fd52 	bl	8001b1c <HAL_InitTick>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d052      	beq.n	8004128 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	e372      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d032      	beq.n	80040f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800409a:	f7fd fd8f 	bl	8001bbc <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a2:	f7fd fd8b 	bl	8001bbc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e35b      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c0:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3f      	ldr	r2, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040c6:	f043 0308 	orr.w	r3, r3, #8
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	493a      	ldr	r1, [pc, #232]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040de:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	4935      	ldr	r1, [pc, #212]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
 80040f2:	e01a      	b.n	800412a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040f4:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004100:	f7fd fd5c 	bl	8001bbc <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004108:	f7fd fd58 	bl	8001bbc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e328      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1dc>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d073      	beq.n	800421e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x21c>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d10e      	bne.n	8004160 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d10b      	bne.n	8004160 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d063      	beq.n	800421c <HAL_RCC_OscConfig+0x2f0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d15f      	bne.n	800421c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e305      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x24c>
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0x288>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x270>
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0x288>
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_RCC_OscConfig+0x298>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fcfe 	bl	8001bbc <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c2:	e010      	b.n	80041e6 <HAL_RCC_OscConfig+0x2ba>
 80041c4:	40021000 	.word	0x40021000
 80041c8:	08006e3c 	.word	0x08006e3c
 80041cc:	20000000 	.word	0x20000000
 80041d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fcf2 	bl	8001bbc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e2c2      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e6:	4baf      	ldr	r3, [pc, #700]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x2a8>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fce2 	bl	8001bbc <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fcde 	bl	8001bbc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e2ae      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420e:	4ba5      	ldr	r3, [pc, #660]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x2d0>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d060      	beq.n	80042ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x310>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d119      	bne.n	800426a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d116      	bne.n	800426a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423c:	4b99      	ldr	r3, [pc, #612]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x328>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e28b      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b93      	ldr	r3, [pc, #588]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	4990      	ldr	r1, [pc, #576]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004268:	e040      	b.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d023      	beq.n	80042ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004272:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a8b      	ldr	r2, [pc, #556]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fc9d 	bl	8001bbc <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7fd fc99 	bl	8001bbc <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e269      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004298:	4b82      	ldr	r3, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b7f      	ldr	r3, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	497c      	ldr	r1, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
 80042b8:	e018      	b.n	80042ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b7a      	ldr	r3, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a79      	ldr	r2, [pc, #484]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80042c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fc79 	bl	8001bbc <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fd fc75 	bl	8001bbc <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e245      	b.n	800476c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042e0:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d03c      	beq.n	8004372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01c      	beq.n	800433a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	4a67      	ldr	r2, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd fc54 	bl	8001bbc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd fc50 	bl	8001bbc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e220      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800432a:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ef      	beq.n	8004318 <HAL_RCC_OscConfig+0x3ec>
 8004338:	e01b      	b.n	8004372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433a:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fd fc37 	bl	8001bbc <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7fd fc33 	bl	8001bbc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e203      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004364:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ef      	bne.n	8004352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80a6 	beq.w	80044cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004384:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10d      	bne.n	80043ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004390:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	4a43      	ldr	r2, [pc, #268]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	6593      	str	r3, [r2, #88]	; 0x58
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCC_OscConfig+0x57c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d118      	bne.n	80043ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b8:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_OscConfig+0x57c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3a      	ldr	r2, [pc, #232]	; (80044a8 <HAL_RCC_OscConfig+0x57c>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c4:	f7fd fbfa 	bl	8001bbc <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fd fbf6 	bl	8001bbc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1c6      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <HAL_RCC_OscConfig+0x57c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_OscConfig+0x4d8>
 80043f2:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004402:	e024      	b.n	800444e <HAL_RCC_OscConfig+0x522>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d110      	bne.n	800442e <HAL_RCC_OscConfig+0x502>
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442c:	e00f      	b.n	800444e <HAL_RCC_OscConfig+0x522>
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd fbb1 	bl	8001bbc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd fbad 	bl	8001bbc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e17b      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x578>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ed      	beq.n	800445e <HAL_RCC_OscConfig+0x532>
 8004482:	e01a      	b.n	80044ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd fb9a 	bl	8001bbc <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800448a:	e00f      	b.n	80044ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fd fb96 	bl	8001bbc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d906      	bls.n	80044ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e164      	b.n	800476c <HAL_RCC_OscConfig+0x840>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ac:	4ba8      	ldr	r3, [pc, #672]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e8      	bne.n	800448c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4ba3      	ldr	r3, [pc, #652]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	4aa2      	ldr	r2, [pc, #648]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d03c      	beq.n	8004552 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01c      	beq.n	800451a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044e0:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80044e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e6:	4a9a      	ldr	r2, [pc, #616]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fb64 	bl	8001bbc <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f8:	f7fd fb60 	bl	8001bbc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e130      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800450a:	4b91      	ldr	r3, [pc, #580]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5cc>
 8004518:	e01b      	b.n	8004552 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800451a:	4b8d      	ldr	r3, [pc, #564]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004520:	4a8b      	ldr	r2, [pc, #556]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd fb47 	bl	8001bbc <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004532:	f7fd fb43 	bl	8001bbc <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e113      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004544:	4b82      	ldr	r3, [pc, #520]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ef      	bne.n	8004532 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8107 	beq.w	800476a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	f040 80cb 	bne.w	80046fc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004566:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	429a      	cmp	r2, r3
 8004578:	d12c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	3b01      	subs	r3, #1
 8004586:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d123      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d11b      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d113      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d06d      	beq.n	80046b0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d068      	beq.n	80046ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045da:	4b5d      	ldr	r3, [pc, #372]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045e6:	4b5a      	ldr	r3, [pc, #360]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0ba      	b.n	800476c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045f6:	4b56      	ldr	r3, [pc, #344]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a55      	ldr	r2, [pc, #340]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80045fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004600:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004602:	f7fd fadb 	bl	8001bbc <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460a:	f7fd fad7 	bl	8001bbc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0a7      	b.n	800476c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b49      	ldr	r3, [pc, #292]	; (8004754 <HAL_RCC_OscConfig+0x828>)
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004638:	3a01      	subs	r2, #1
 800463a:	0112      	lsls	r2, r2, #4
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004642:	0212      	lsls	r2, r2, #8
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800464a:	0852      	lsrs	r2, r2, #1
 800464c:	3a01      	subs	r2, #1
 800464e:	0552      	lsls	r2, r2, #21
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004656:	0852      	lsrs	r2, r2, #1
 8004658:	3a01      	subs	r2, #1
 800465a:	0652      	lsls	r2, r2, #25
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004662:	06d2      	lsls	r2, r2, #27
 8004664:	430a      	orrs	r2, r1
 8004666:	493a      	ldr	r1, [pc, #232]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004668:	4313      	orrs	r3, r2
 800466a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800466c:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a37      	ldr	r2, [pc, #220]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a34      	ldr	r2, [pc, #208]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800467e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004682:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004684:	f7fd fa9a 	bl	8001bbc <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7fd fa96 	bl	8001bbc <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e066      	b.n	800476c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469e:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046aa:	e05e      	b.n	800476a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e05d      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d156      	bne.n	800476a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046bc:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a23      	ldr	r2, [pc, #140]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c8:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046d4:	f7fd fa72 	bl	8001bbc <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fa6e 	bl	8001bbc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e03e      	b.n	800476c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x7b0>
 80046fa:	e036      	b.n	800476a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d031      	beq.n	8004766 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004720:	f023 0303 	bic.w	r3, r3, #3
 8004724:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_RCC_OscConfig+0x824>)
 800472c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004734:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd fa41 	bl	8001bbc <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	e00c      	b.n	8004758 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd fa3d 	bl	8001bbc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d905      	bls.n	8004758 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e00d      	b.n	800476c <HAL_RCC_OscConfig+0x840>
 8004750:	40021000 	.word	0x40021000
 8004754:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_OscConfig+0x848>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ec      	bne.n	800473e <HAL_RCC_OscConfig+0x812>
 8004764:	e001      	b.n	800476a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e10f      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b89      	ldr	r3, [pc, #548]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d910      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 020f 	bic.w	r2, r3, #15
 80047a6:	4984      	ldr	r1, [pc, #528]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0f7      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8089 	beq.w	80048e0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d133      	bne.n	800483e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b79      	ldr	r3, [pc, #484]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0e4      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80047e6:	f000 fa0d 	bl	8004c04 <RCC_GetSysClockFreqFromPLLSource>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <HAL_RCC_ClockConfig+0x248>)
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d955      	bls.n	800489e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047f2:	4b72      	ldr	r3, [pc, #456]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047fe:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004806:	4a6d      	ldr	r2, [pc, #436]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e044      	b.n	800489e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03e      	beq.n	800489e <HAL_RCC_ClockConfig+0x126>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d13a      	bne.n	800489e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004828:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004830:	4a62      	ldr	r2, [pc, #392]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004836:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e02f      	b.n	800489e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004846:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d115      	bne.n	800487e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0ac      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485e:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0a0      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486e:	4b53      	ldr	r3, [pc, #332]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e098      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800487e:	f000 f8a7 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <HAL_RCC_ClockConfig+0x248>)
 8004886:	429a      	cmp	r2, r3
 8004888:	d909      	bls.n	800489e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800488a:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	4a4a      	ldr	r2, [pc, #296]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4944      	ldr	r1, [pc, #272]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd f984 	bl	8001bbc <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd f980 	bl	8001bbc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e070      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4930      	ldr	r1, [pc, #192]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
 80048fe:	e008      	b.n	8004912 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d105      	bne.n	8004912 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004906:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800490c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004910:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d210      	bcs.n	8004942 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 020f 	bic.w	r2, r3, #15
 8004928:	4923      	ldr	r1, [pc, #140]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_ClockConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e036      	b.n	80049b0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4918      	ldr	r1, [pc, #96]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4910      	ldr	r1, [pc, #64]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004980:	f000 f826 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8004984:	4601      	mov	r1, r0
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <HAL_RCC_ClockConfig+0x244>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <HAL_RCC_ClockConfig+0x24c>)
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	fa21 f303 	lsr.w	r3, r1, r3
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x250>)
 800499e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x254>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd f8b9 	bl	8001b1c <HAL_InitTick>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40022000 	.word	0x40022000
 80049bc:	40021000 	.word	0x40021000
 80049c0:	04c4b400 	.word	0x04c4b400
 80049c4:	08006e3c 	.word	0x08006e3c
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e8:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d121      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d11e      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a04:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a10:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e005      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e004      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a54:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d133      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa4>
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0xaa>
 8004a72:	e005      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a76:	617b      	str	r3, [r7, #20]
      break;
 8004a78:	e005      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a7a:	4b18      	ldr	r3, [pc, #96]	; (8004adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a7c:	617b      	str	r3, [r7, #20]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	617b      	str	r3, [r7, #20]
      break;
 8004a84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	3301      	adds	r3, #1
 8004a92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	fb02 f203 	mul.w	r2, r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0e5b      	lsrs	r3, r3, #25
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3724      	adds	r7, #36	; 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08006e54 	.word	0x08006e54
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000000 	.word	0x20000000

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004afc:	f7ff fff0 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b00:	4601      	mov	r1, r0
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	08006e4c 	.word	0x08006e4c

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b28:	f7ff ffda 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0adb      	lsrs	r3, r3, #11
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	08006e4c 	.word	0x08006e4c

08004b50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b68:	f7ff f90c 	bl	8003d84 <HAL_PWREx_GetVoltageRange>
 8004b6c:	6178      	str	r0, [r7, #20]
 8004b6e:	e014      	b.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b88:	f7ff f8fc 	bl	8003d84 <HAL_PWREx_GetVoltageRange>
 8004b8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d10b      	bne.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d913      	bls.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2ba0      	cmp	r3, #160	; 0xa0
 8004bac:	d902      	bls.n	8004bb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bae:	2302      	movs	r3, #2
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e00d      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e00a      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bbe:	d902      	bls.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	e004      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d101      	bne.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bcc:	2301      	movs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 020f 	bic.w	r2, r3, #15
 8004bd8:	4909      	ldr	r1, [pc, #36]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40022000 	.word	0x40022000

08004c04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004c0e:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d118      	bne.n	8004c4c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c1a:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e005      	b.n	8004c42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c36:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c42:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d002      	beq.n	8004c62 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d003      	beq.n	8004c68 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8004c60:	e005      	b.n	8004c6e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c64:	613b      	str	r3, [r7, #16]
    break;
 8004c66:	e005      	b.n	8004c74 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c68:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c6a:	613b      	str	r3, [r7, #16]
    break;
 8004c6c:	e002      	b.n	8004c74 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	613b      	str	r3, [r7, #16]
    break;
 8004c72:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c74:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	fb02 f203 	mul.w	r2, r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	0e5b      	lsrs	r3, r3, #25
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004cb4:	683b      	ldr	r3, [r7, #0]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	08006e54 	.word	0x08006e54
 8004ccc:	00f42400 	.word	0x00f42400

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd8:	2300      	movs	r3, #0
 8004cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03d      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d804      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00e      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d00:	e01d      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d02:	2b60      	cmp	r3, #96	; 0x60
 8004d04:	d01e      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d01c      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d0a:	e018      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d0c:	4b86      	ldr	r3, [pc, #536]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a85      	ldr	r2, [pc, #532]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d18:	e015      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb5d 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d2a:	e00c      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3320      	adds	r3, #32
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fc44 	bl	80055c0 <RCCEx_PLLSAI2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	74fb      	strb	r3, [r7, #19]
      break;
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d4c:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d52:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	4973      	ldr	r1, [pc, #460]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d62:	e001      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d042      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7c:	d00f      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d805      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d011      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8c:	d017      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004d8e:	e01f      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d01f      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d9e:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a61      	ldr	r2, [pc, #388]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004daa:	e015      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb14 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3320      	adds	r3, #32
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fbfb 	bl	80055c0 <RCCEx_PLLSAI2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	74fb      	strb	r3, [r7, #19]
      break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dde:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	494e      	ldr	r1, [pc, #312]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004df4:	e001      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 809f 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	4a40      	ldr	r2, [pc, #256]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3a      	ldr	r2, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4a:	f7fc feb7 	bl	8001bbc <HAL_GetTick>
 8004e4e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e50:	e009      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fc feb3 	bl	8001bbc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d902      	bls.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	74fb      	strb	r3, [r7, #19]
        break;
 8004e64:	e005      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ef      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004e72:	7cfb      	ldrb	r3, [r7, #19]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d15b      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01f      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d019      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec2:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fc fe72 	bl	8001bbc <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eda:	e00b      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fc fe6e 	bl	8001bbc <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d902      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef2:	e006      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ec      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10c      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f20:	e008      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
 8004f26:	e005      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f34:	7c7b      	ldrb	r3, [r7, #17]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4ba0      	ldr	r3, [pc, #640]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a9f      	ldr	r2, [pc, #636]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f52:	4b9a      	ldr	r3, [pc, #616]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 0203 	bic.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	4996      	ldr	r1, [pc, #600]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f74:	4b91      	ldr	r3, [pc, #580]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 020c 	bic.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	498e      	ldr	r1, [pc, #568]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f96:	4b89      	ldr	r3, [pc, #548]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	4985      	ldr	r1, [pc, #532]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb8:	4b80      	ldr	r3, [pc, #512]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	497d      	ldr	r1, [pc, #500]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fda:	4b78      	ldr	r3, [pc, #480]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe8:	4974      	ldr	r1, [pc, #464]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ffc:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	496c      	ldr	r1, [pc, #432]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800501e:	4b67      	ldr	r3, [pc, #412]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502c:	4963      	ldr	r1, [pc, #396]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005040:	4b5e      	ldr	r3, [pc, #376]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800504e:	495b      	ldr	r1, [pc, #364]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005062:	4b56      	ldr	r3, [pc, #344]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	4952      	ldr	r1, [pc, #328]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005084:	4b4d      	ldr	r3, [pc, #308]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	494a      	ldr	r1, [pc, #296]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050a6:	4b45      	ldr	r3, [pc, #276]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	4941      	ldr	r1, [pc, #260]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050c8:	4b3c      	ldr	r3, [pc, #240]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	4939      	ldr	r1, [pc, #228]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d028      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	4930      	ldr	r1, [pc, #192]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005108:	d106      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005114:	60d3      	str	r3, [r2, #12]
 8005116:	e011      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005120:	d10c      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	2101      	movs	r1, #1
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f959 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d04d      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005150:	d108      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800515e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005162:	e012      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800516a:	4a14      	ldr	r2, [pc, #80]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005170:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005182:	490e      	ldr	r1, [pc, #56]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005192:	d106      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a08      	ldr	r2, [pc, #32]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519e:	60d3      	str	r3, [r2, #12]
 80051a0:	e020      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051aa:	d109      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a02      	ldr	r2, [pc, #8]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b6:	60d3      	str	r3, [r2, #12]
 80051b8:	e014      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f905 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d028      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f0:	4b7a      	ldr	r3, [pc, #488]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fe:	4977      	ldr	r1, [pc, #476]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520e:	d106      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b72      	ldr	r3, [pc, #456]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a71      	ldr	r2, [pc, #452]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
 800521c:	e011      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005226:	d10c      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f8d6 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01e      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524e:	4b63      	ldr	r3, [pc, #396]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525e:	495f      	ldr	r1, [pc, #380]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005270:	d10c      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f8b1 	bl	80053e0 <RCCEx_PLLSAI1_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005298:	4b50      	ldr	r3, [pc, #320]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800529a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529e:	f023 0204 	bic.w	r2, r3, #4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a8:	494c      	ldr	r1, [pc, #304]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052bc:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80052be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c2:	f023 0218 	bic.w	r2, r3, #24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	4943      	ldr	r1, [pc, #268]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d035      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052e0:	4b3e      	ldr	r3, [pc, #248]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ec:	f7fc fc66 	bl	8001bbc <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052f2:	e009      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052f4:	f7fc fc62 	bl	8001bbc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d902      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	74fb      	strb	r3, [r7, #19]
        break;
 8005306:	e005      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005308:	4b34      	ldr	r3, [pc, #208]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ef      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d113      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800531a:	4b30      	ldr	r3, [pc, #192]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800531c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532a:	492c      	ldr	r1, [pc, #176]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3320      	adds	r3, #32
 8005336:	2102      	movs	r1, #2
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f941 	bl	80055c0 <RCCEx_PLLSAI2_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01e      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005358:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800535a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800535e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	491c      	ldr	r1, [pc, #112]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537a:	d10c      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3320      	adds	r3, #32
 8005380:	2101      	movs	r1, #1
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f91c 	bl	80055c0 <RCCEx_PLLSAI2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80053a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	490a      	ldr	r1, [pc, #40]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c4:	d105      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4a04      	ldr	r2, [pc, #16]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80053cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000

080053e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ee:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053fa:	4b6d      	ldr	r3, [pc, #436]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d103      	bne.n	8005412 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
       ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d13f      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
 8005416:	e03c      	b.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d00c      	beq.n	800543a <RCCEx_PLLSAI1_Config+0x5a>
 8005420:	2b03      	cmp	r3, #3
 8005422:	d013      	beq.n	800544c <RCCEx_PLLSAI1_Config+0x6c>
 8005424:	2b01      	cmp	r3, #1
 8005426:	d120      	bne.n	800546a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005428:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d11d      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005438:	e01a      	b.n	8005470 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800543a:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d116      	bne.n	8005474 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544a:	e013      	b.n	8005474 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800544c:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10f      	bne.n	8005478 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005458:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005468:	e006      	b.n	8005478 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
      break;
 800546e:	e004      	b.n	800547a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005470:	bf00      	nop
 8005472:	e002      	b.n	800547a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005478:	bf00      	nop
    }

    if(status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005480:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4948      	ldr	r1, [pc, #288]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 8086 	bne.w	80055a6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800549a:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a44      	ldr	r2, [pc, #272]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80054a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fc fb89 	bl	8001bbc <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ac:	e009      	b.n	80054c2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ae:	f7fc fb85 	bl	8001bbc <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d902      	bls.n	80054c2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	73fb      	strb	r3, [r7, #15]
        break;
 80054c0:	e005      	b.n	80054ce <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054c2:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1ef      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d168      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d113      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054da:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	0211      	lsls	r1, r2, #8
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68d2      	ldr	r2, [r2, #12]
 80054ec:	06d2      	lsls	r2, r2, #27
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6852      	ldr	r2, [r2, #4]
 80054f4:	3a01      	subs	r2, #1
 80054f6:	0112      	lsls	r2, r2, #4
 80054f8:	430a      	orrs	r2, r1
 80054fa:	492d      	ldr	r1, [pc, #180]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]
 8005500:	e02d      	b.n	800555e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d115      	bne.n	8005534 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005508:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6892      	ldr	r2, [r2, #8]
 8005514:	0211      	lsls	r1, r2, #8
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6912      	ldr	r2, [r2, #16]
 800551a:	0852      	lsrs	r2, r2, #1
 800551c:	3a01      	subs	r2, #1
 800551e:	0552      	lsls	r2, r2, #21
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	3a01      	subs	r2, #1
 8005528:	0112      	lsls	r2, r2, #4
 800552a:	430a      	orrs	r2, r1
 800552c:	4920      	ldr	r1, [pc, #128]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	610b      	str	r3, [r1, #16]
 8005532:	e014      	b.n	800555e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800553a:	4013      	ands	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6892      	ldr	r2, [r2, #8]
 8005540:	0211      	lsls	r1, r2, #8
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6952      	ldr	r2, [r2, #20]
 8005546:	0852      	lsrs	r2, r2, #1
 8005548:	3a01      	subs	r2, #1
 800554a:	0652      	lsls	r2, r2, #25
 800554c:	4311      	orrs	r1, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6852      	ldr	r2, [r2, #4]
 8005552:	3a01      	subs	r2, #1
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	430a      	orrs	r2, r1
 8005558:	4915      	ldr	r1, [pc, #84]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fc fb27 	bl	8001bbc <HAL_GetTick>
 800556e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005570:	e009      	b.n	8005586 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005572:	f7fc fb23 	bl	8001bbc <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	73fb      	strb	r3, [r7, #15]
          break;
 8005584:	e005      	b.n	8005592 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ef      	beq.n	8005572 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	4903      	ldr	r1, [pc, #12]	; (80055b0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	07ff800f 	.word	0x07ff800f
 80055b8:	ff9f800f 	.word	0xff9f800f
 80055bc:	f9ff800f 	.word	0xf9ff800f

080055c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ce:	4b70      	ldr	r3, [pc, #448]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055da:	4b6d      	ldr	r3, [pc, #436]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0203 	and.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d103      	bne.n	80055f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
       ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d13f      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e03c      	b.n	8005672 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d00c      	beq.n	800561a <RCCEx_PLLSAI2_Config+0x5a>
 8005600:	2b03      	cmp	r3, #3
 8005602:	d013      	beq.n	800562c <RCCEx_PLLSAI2_Config+0x6c>
 8005604:	2b01      	cmp	r3, #1
 8005606:	d120      	bne.n	800564a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005608:	4b61      	ldr	r3, [pc, #388]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d11d      	bne.n	8005650 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005618:	e01a      	b.n	8005650 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800561a:	4b5d      	ldr	r3, [pc, #372]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005622:	2b00      	cmp	r3, #0
 8005624:	d116      	bne.n	8005654 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800562a:	e013      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800562c:	4b58      	ldr	r3, [pc, #352]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005648:	e006      	b.n	8005658 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      break;
 800564e:	e004      	b.n	800565a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005650:	bf00      	nop
 8005652:	e002      	b.n	800565a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005654:	bf00      	nop
 8005656:	e000      	b.n	800565a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005658:	bf00      	nop
    }

    if(status == HAL_OK)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d108      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005660:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f023 0203 	bic.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4948      	ldr	r1, [pc, #288]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f040 8086 	bne.w	8005786 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800567a:	4b45      	ldr	r3, [pc, #276]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a44      	ldr	r2, [pc, #272]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005686:	f7fc fa99 	bl	8001bbc <HAL_GetTick>
 800568a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800568c:	e009      	b.n	80056a2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800568e:	f7fc fa95 	bl	8001bbc <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d902      	bls.n	80056a2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	73fb      	strb	r3, [r7, #15]
        break;
 80056a0:	e005      	b.n	80056ae <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056a2:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1ef      	bne.n	800568e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d168      	bne.n	8005786 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d113      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056ba:	4b35      	ldr	r3, [pc, #212]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <RCCEx_PLLSAI2_Config+0x1d4>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6892      	ldr	r2, [r2, #8]
 80056c6:	0211      	lsls	r1, r2, #8
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68d2      	ldr	r2, [r2, #12]
 80056cc:	06d2      	lsls	r2, r2, #27
 80056ce:	4311      	orrs	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6852      	ldr	r2, [r2, #4]
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	430a      	orrs	r2, r1
 80056da:	492d      	ldr	r1, [pc, #180]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	614b      	str	r3, [r1, #20]
 80056e0:	e02d      	b.n	800573e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d115      	bne.n	8005714 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056e8:	4b29      	ldr	r3, [pc, #164]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6892      	ldr	r2, [r2, #8]
 80056f4:	0211      	lsls	r1, r2, #8
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6912      	ldr	r2, [r2, #16]
 80056fa:	0852      	lsrs	r2, r2, #1
 80056fc:	3a01      	subs	r2, #1
 80056fe:	0552      	lsls	r2, r2, #21
 8005700:	4311      	orrs	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6852      	ldr	r2, [r2, #4]
 8005706:	3a01      	subs	r2, #1
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	430a      	orrs	r2, r1
 800570c:	4920      	ldr	r1, [pc, #128]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	614b      	str	r3, [r1, #20]
 8005712:	e014      	b.n	800573e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005714:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	4b20      	ldr	r3, [pc, #128]	; (800579c <RCCEx_PLLSAI2_Config+0x1dc>)
 800571a:	4013      	ands	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6892      	ldr	r2, [r2, #8]
 8005720:	0211      	lsls	r1, r2, #8
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6952      	ldr	r2, [r2, #20]
 8005726:	0852      	lsrs	r2, r2, #1
 8005728:	3a01      	subs	r2, #1
 800572a:	0652      	lsls	r2, r2, #25
 800572c:	4311      	orrs	r1, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6852      	ldr	r2, [r2, #4]
 8005732:	3a01      	subs	r2, #1
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	430a      	orrs	r2, r1
 8005738:	4915      	ldr	r1, [pc, #84]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fc fa37 	bl	8001bbc <HAL_GetTick>
 800574e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005750:	e009      	b.n	8005766 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005752:	f7fc fa33 	bl	8001bbc <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d902      	bls.n	8005766 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	73fb      	strb	r3, [r7, #15]
          break;
 8005764:	e005      	b.n	8005772 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ef      	beq.n	8005752 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	4903      	ldr	r1, [pc, #12]	; (8005790 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	07ff800f 	.word	0x07ff800f
 8005798:	ff9f800f 	.word	0xff9f800f
 800579c:	f9ff800f 	.word	0xf9ff800f

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e049      	b.n	8005846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fc10 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f000 f9ee 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e04f      	b.n	8005908 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <HAL_TIM_Base_Start_IT+0xc4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01d      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d018      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_TIM_Base_Start_IT+0xc8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_TIM_Base_Start_IT+0xcc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <HAL_TIM_Base_Start_IT+0xd4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0x76>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <HAL_TIM_Base_Start_IT+0xd8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d115      	bne.n	80058f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_TIM_Base_Start_IT+0xdc>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	d015      	beq.n	8005904 <HAL_TIM_Base_Start_IT+0xb4>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058de:	d011      	beq.n	8005904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f0:	e008      	b.n	8005904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e000      	b.n	8005906 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40013400 	.word	0x40013400
 8005928:	40014000 	.word	0x40014000
 800592c:	00010007 	.word	0x00010007

08005930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d122      	bne.n	800598c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0202 	mvn.w	r2, #2
 800595c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f905 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8f7 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f908 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0204 	mvn.w	r2, #4
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f8db 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8cd 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f8de 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0208 	mvn.w	r2, #8
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8b1 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8a3 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8b4 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0210 	mvn.w	r2, #16
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f887 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f879 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f88a 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10e      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0201 	mvn.w	r2, #1
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fa06 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d107      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f914 	bl	8005d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aee:	d10e      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f907 	bl	8005d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	d10e      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d107      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f838 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0220 	mvn.w	r2, #32
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8c7 	bl	8005cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a12      	ldr	r2, [pc, #72]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a11      	ldr	r2, [pc, #68]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a10      	ldr	r2, [pc, #64]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40013400 	.word	0x40013400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e042      	b.n	8005dc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fb f96f 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2224      	movs	r2, #36	; 0x24
 8005d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa58 	bl	8006228 <UART_SetConfig>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e022      	b.n	8005dc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd1e 	bl	80067cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fda5 	bl	8006910 <UART_CheckIdleState>
 8005dc6:	4603      	mov	r3, r0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	f040 8084 	bne.w	8005ef4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Transmit+0x28>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e07c      	b.n	8005ef6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Transmit+0x3a>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e075      	b.n	8005ef6 <HAL_UART_Transmit+0x126>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005e22:	f7fb fecb 	bl	8001bbc <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d108      	bne.n	8005e54 <HAL_UART_Transmit+0x84>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	e003      	b.n	8005e5c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005e64:	e02d      	b.n	8005ec2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fd95 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e03a      	b.n	8005ef6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e92:	b292      	uxth	r2, r2
 8005e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	3302      	adds	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e008      	b.n	8005eb0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1cb      	bne.n	8005e66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2140      	movs	r1, #64	; 0x40
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fd61 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e006      	b.n	8005ef6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f26:	4013      	ands	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d118      	bne.n	8005f62 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d013      	beq.n	8005f62 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8145 	beq.w	80061e2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
      }
      return;
 8005f60:	e13f      	b.n	80061e2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80e8 	beq.w	800613a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4ba1      	ldr	r3, [pc, #644]	; (80061f4 <HAL_UART_IRQHandler+0x2f4>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4ba0      	ldr	r3, [pc, #640]	; (80061f8 <HAL_UART_IRQHandler+0x2f8>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80dd 	beq.w	800613a <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_UART_IRQHandler+0xac>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d010      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xd8>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <HAL_UART_IRQHandler+0x104>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f043 0202 	orr.w	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d015      	beq.n	800603a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4b76      	ldr	r3, [pc, #472]	; (80061f4 <HAL_UART_IRQHandler+0x2f4>)
 800601c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2208      	movs	r2, #8
 8006028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f043 0208 	orr.w	r2, r3, #8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	d011      	beq.n	8006068 <HAL_UART_IRQHandler+0x168>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80b9 	beq.w	80061e6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d004      	beq.n	80060c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d031      	beq.n	8006126 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fcec 	bl	8006aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d123      	bne.n	800611e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d013      	beq.n	8006116 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060f2:	4a42      	ldr	r2, [pc, #264]	; (80061fc <HAL_UART_IRQHandler+0x2fc>)
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fc fd5f 	bl	8002bbe <HAL_DMA_Abort_IT>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	e00f      	b.n	8006136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f87c 	bl	8006214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e00b      	b.n	8006136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f878 	bl	8006214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	e007      	b.n	8006136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f874 	bl	8006214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006134:	e057      	b.n	80061e6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	bf00      	nop
    return;
 8006138:	e055      	b.n	80061e6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <HAL_UART_IRQHandler+0x260>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fcf4 	bl	8006b46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800615e:	e045      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d012      	beq.n	8006190 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	2b00      	cmp	r3, #0
 8006184:	d031      	beq.n	80061ea <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
    }
    return;
 800618e:	e02c      	b.n	80061ea <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_UART_IRQHandler+0x2ac>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fcb4 	bl	8006b12 <UART_EndTransmit_IT>
    return;
 80061aa:	e01f      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_UART_IRQHandler+0x2c8>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fcd4 	bl	8006b6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061c6:	e011      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_UART_IRQHandler+0x2ec>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da09      	bge.n	80061ec <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fcbe 	bl	8006b5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061de:	bf00      	nop
 80061e0:	e004      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
      return;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
    return;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_UART_IRQHandler+0x2ec>
    return;
 80061ea:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	10000001 	.word	0x10000001
 80061f8:	04000120 	.word	0x04000120
 80061fc:	08006ae7 	.word	0x08006ae7

08006200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006228:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800622c:	b088      	sub	sp, #32
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4313      	orrs	r3, r2
 800624c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	4313      	orrs	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4bb1      	ldr	r3, [pc, #708]	; (8006524 <UART_SetConfig+0x2fc>)
 8006260:	4013      	ands	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	430b      	orrs	r3, r1
 800626a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4aa6      	ldr	r2, [pc, #664]	; (8006528 <UART_SetConfig+0x300>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	4313      	orrs	r3, r2
 800629a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	69f9      	ldr	r1, [r7, #28]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	f023 010f 	bic.w	r1, r3, #15
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a97      	ldr	r2, [pc, #604]	; (800652c <UART_SetConfig+0x304>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d121      	bne.n	8006318 <UART_SetConfig+0xf0>
 80062d4:	4b96      	ldr	r3, [pc, #600]	; (8006530 <UART_SetConfig+0x308>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d816      	bhi.n	8006310 <UART_SetConfig+0xe8>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0xc0>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	08006305 	.word	0x08006305
 80062f0:	080062ff 	.word	0x080062ff
 80062f4:	0800630b 	.word	0x0800630b
 80062f8:	2301      	movs	r3, #1
 80062fa:	76fb      	strb	r3, [r7, #27]
 80062fc:	e0e8      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80062fe:	2302      	movs	r3, #2
 8006300:	76fb      	strb	r3, [r7, #27]
 8006302:	e0e5      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006304:	2304      	movs	r3, #4
 8006306:	76fb      	strb	r3, [r7, #27]
 8006308:	e0e2      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800630a:	2308      	movs	r3, #8
 800630c:	76fb      	strb	r3, [r7, #27]
 800630e:	e0df      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006310:	2310      	movs	r3, #16
 8006312:	76fb      	strb	r3, [r7, #27]
 8006314:	bf00      	nop
 8006316:	e0db      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a85      	ldr	r2, [pc, #532]	; (8006534 <UART_SetConfig+0x30c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d134      	bne.n	800638c <UART_SetConfig+0x164>
 8006322:	4b83      	ldr	r3, [pc, #524]	; (8006530 <UART_SetConfig+0x308>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d829      	bhi.n	8006384 <UART_SetConfig+0x15c>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x110>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800636d 	.word	0x0800636d
 800633c:	08006385 	.word	0x08006385
 8006340:	08006385 	.word	0x08006385
 8006344:	08006385 	.word	0x08006385
 8006348:	08006379 	.word	0x08006379
 800634c:	08006385 	.word	0x08006385
 8006350:	08006385 	.word	0x08006385
 8006354:	08006385 	.word	0x08006385
 8006358:	08006373 	.word	0x08006373
 800635c:	08006385 	.word	0x08006385
 8006360:	08006385 	.word	0x08006385
 8006364:	08006385 	.word	0x08006385
 8006368:	0800637f 	.word	0x0800637f
 800636c:	2300      	movs	r3, #0
 800636e:	76fb      	strb	r3, [r7, #27]
 8006370:	e0ae      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006372:	2302      	movs	r3, #2
 8006374:	76fb      	strb	r3, [r7, #27]
 8006376:	e0ab      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006378:	2304      	movs	r3, #4
 800637a:	76fb      	strb	r3, [r7, #27]
 800637c:	e0a8      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800637e:	2308      	movs	r3, #8
 8006380:	76fb      	strb	r3, [r7, #27]
 8006382:	e0a5      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006384:	2310      	movs	r3, #16
 8006386:	76fb      	strb	r3, [r7, #27]
 8006388:	bf00      	nop
 800638a:	e0a1      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a69      	ldr	r2, [pc, #420]	; (8006538 <UART_SetConfig+0x310>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d120      	bne.n	80063d8 <UART_SetConfig+0x1b0>
 8006396:	4b66      	ldr	r3, [pc, #408]	; (8006530 <UART_SetConfig+0x308>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d00f      	beq.n	80063c4 <UART_SetConfig+0x19c>
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d802      	bhi.n	80063ae <UART_SetConfig+0x186>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <UART_SetConfig+0x190>
 80063ac:	e010      	b.n	80063d0 <UART_SetConfig+0x1a8>
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d005      	beq.n	80063be <UART_SetConfig+0x196>
 80063b2:	2b30      	cmp	r3, #48	; 0x30
 80063b4:	d009      	beq.n	80063ca <UART_SetConfig+0x1a2>
 80063b6:	e00b      	b.n	80063d0 <UART_SetConfig+0x1a8>
 80063b8:	2300      	movs	r3, #0
 80063ba:	76fb      	strb	r3, [r7, #27]
 80063bc:	e088      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80063be:	2302      	movs	r3, #2
 80063c0:	76fb      	strb	r3, [r7, #27]
 80063c2:	e085      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80063c4:	2304      	movs	r3, #4
 80063c6:	76fb      	strb	r3, [r7, #27]
 80063c8:	e082      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80063ca:	2308      	movs	r3, #8
 80063cc:	76fb      	strb	r3, [r7, #27]
 80063ce:	e07f      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80063d0:	2310      	movs	r3, #16
 80063d2:	76fb      	strb	r3, [r7, #27]
 80063d4:	bf00      	nop
 80063d6:	e07b      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a57      	ldr	r2, [pc, #348]	; (800653c <UART_SetConfig+0x314>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d120      	bne.n	8006424 <UART_SetConfig+0x1fc>
 80063e2:	4b53      	ldr	r3, [pc, #332]	; (8006530 <UART_SetConfig+0x308>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d00f      	beq.n	8006410 <UART_SetConfig+0x1e8>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d802      	bhi.n	80063fa <UART_SetConfig+0x1d2>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <UART_SetConfig+0x1dc>
 80063f8:	e010      	b.n	800641c <UART_SetConfig+0x1f4>
 80063fa:	2b80      	cmp	r3, #128	; 0x80
 80063fc:	d005      	beq.n	800640a <UART_SetConfig+0x1e2>
 80063fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006400:	d009      	beq.n	8006416 <UART_SetConfig+0x1ee>
 8006402:	e00b      	b.n	800641c <UART_SetConfig+0x1f4>
 8006404:	2300      	movs	r3, #0
 8006406:	76fb      	strb	r3, [r7, #27]
 8006408:	e062      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800640a:	2302      	movs	r3, #2
 800640c:	76fb      	strb	r3, [r7, #27]
 800640e:	e05f      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006410:	2304      	movs	r3, #4
 8006412:	76fb      	strb	r3, [r7, #27]
 8006414:	e05c      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006416:	2308      	movs	r3, #8
 8006418:	76fb      	strb	r3, [r7, #27]
 800641a:	e059      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800641c:	2310      	movs	r3, #16
 800641e:	76fb      	strb	r3, [r7, #27]
 8006420:	bf00      	nop
 8006422:	e055      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a45      	ldr	r2, [pc, #276]	; (8006540 <UART_SetConfig+0x318>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d124      	bne.n	8006478 <UART_SetConfig+0x250>
 800642e:	4b40      	ldr	r3, [pc, #256]	; (8006530 <UART_SetConfig+0x308>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643c:	d012      	beq.n	8006464 <UART_SetConfig+0x23c>
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d802      	bhi.n	800644a <UART_SetConfig+0x222>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <UART_SetConfig+0x230>
 8006448:	e012      	b.n	8006470 <UART_SetConfig+0x248>
 800644a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800644e:	d006      	beq.n	800645e <UART_SetConfig+0x236>
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d009      	beq.n	800646a <UART_SetConfig+0x242>
 8006456:	e00b      	b.n	8006470 <UART_SetConfig+0x248>
 8006458:	2300      	movs	r3, #0
 800645a:	76fb      	strb	r3, [r7, #27]
 800645c:	e038      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800645e:	2302      	movs	r3, #2
 8006460:	76fb      	strb	r3, [r7, #27]
 8006462:	e035      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006464:	2304      	movs	r3, #4
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e032      	b.n	80064d0 <UART_SetConfig+0x2a8>
 800646a:	2308      	movs	r3, #8
 800646c:	76fb      	strb	r3, [r7, #27]
 800646e:	e02f      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006470:	2310      	movs	r3, #16
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	bf00      	nop
 8006476:	e02b      	b.n	80064d0 <UART_SetConfig+0x2a8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2a      	ldr	r2, [pc, #168]	; (8006528 <UART_SetConfig+0x300>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d124      	bne.n	80064cc <UART_SetConfig+0x2a4>
 8006482:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <UART_SetConfig+0x308>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006490:	d012      	beq.n	80064b8 <UART_SetConfig+0x290>
 8006492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006496:	d802      	bhi.n	800649e <UART_SetConfig+0x276>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <UART_SetConfig+0x284>
 800649c:	e012      	b.n	80064c4 <UART_SetConfig+0x29c>
 800649e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a2:	d006      	beq.n	80064b2 <UART_SetConfig+0x28a>
 80064a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064a8:	d009      	beq.n	80064be <UART_SetConfig+0x296>
 80064aa:	e00b      	b.n	80064c4 <UART_SetConfig+0x29c>
 80064ac:	2300      	movs	r3, #0
 80064ae:	76fb      	strb	r3, [r7, #27]
 80064b0:	e00e      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80064b2:	2302      	movs	r3, #2
 80064b4:	76fb      	strb	r3, [r7, #27]
 80064b6:	e00b      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80064b8:	2304      	movs	r3, #4
 80064ba:	76fb      	strb	r3, [r7, #27]
 80064bc:	e008      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80064be:	2308      	movs	r3, #8
 80064c0:	76fb      	strb	r3, [r7, #27]
 80064c2:	e005      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80064c4:	2310      	movs	r3, #16
 80064c6:	76fb      	strb	r3, [r7, #27]
 80064c8:	bf00      	nop
 80064ca:	e001      	b.n	80064d0 <UART_SetConfig+0x2a8>
 80064cc:	2310      	movs	r3, #16
 80064ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a14      	ldr	r2, [pc, #80]	; (8006528 <UART_SetConfig+0x300>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	f040 80a1 	bne.w	800661e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064dc:	7efb      	ldrb	r3, [r7, #27]
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d836      	bhi.n	8006550 <UART_SetConfig+0x328>
 80064e2:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x2c0>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006551 	.word	0x08006551
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006551 	.word	0x08006551
 80064f8:	0800651b 	.word	0x0800651b
 80064fc:	08006551 	.word	0x08006551
 8006500:	08006551 	.word	0x08006551
 8006504:	08006551 	.word	0x08006551
 8006508:	08006549 	.word	0x08006549
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fe faf4 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006510:	6178      	str	r0, [r7, #20]
        break;
 8006512:	e022      	b.n	800655a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <UART_SetConfig+0x31c>)
 8006516:	617b      	str	r3, [r7, #20]
        break;
 8006518:	e01f      	b.n	800655a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651a:	f7fe fa59 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800651e:	6178      	str	r0, [r7, #20]
        break;
 8006520:	e01b      	b.n	800655a <UART_SetConfig+0x332>
 8006522:	bf00      	nop
 8006524:	cfff69f3 	.word	0xcfff69f3
 8006528:	40008000 	.word	0x40008000
 800652c:	40013800 	.word	0x40013800
 8006530:	40021000 	.word	0x40021000
 8006534:	40004400 	.word	0x40004400
 8006538:	40004800 	.word	0x40004800
 800653c:	40004c00 	.word	0x40004c00
 8006540:	40005000 	.word	0x40005000
 8006544:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654c:	617b      	str	r3, [r7, #20]
        break;
 800654e:	e004      	b.n	800655a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	76bb      	strb	r3, [r7, #26]
        break;
 8006558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 811d 	beq.w	800679c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	4a97      	ldr	r2, [pc, #604]	; (80067c4 <UART_SetConfig+0x59c>)
 8006568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800656c:	461a      	mov	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	fbb3 f3f2 	udiv	r3, r3, r2
 8006574:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	d305      	bcc.n	8006592 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d902      	bls.n	8006598 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	76bb      	strb	r3, [r7, #26]
 8006596:	e101      	b.n	800679c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4618      	mov	r0, r3
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	4a87      	ldr	r2, [pc, #540]	; (80067c4 <UART_SetConfig+0x59c>)
 80065a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f04f 0400 	mov.w	r4, #0
 80065b0:	461a      	mov	r2, r3
 80065b2:	4623      	mov	r3, r4
 80065b4:	f7f9 fe22 	bl	80001fc <__aeabi_uldivmod>
 80065b8:	4603      	mov	r3, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	4619      	mov	r1, r3
 80065be:	4622      	mov	r2, r4
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	f04f 0400 	mov.w	r4, #0
 80065c8:	0214      	lsls	r4, r2, #8
 80065ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80065ce:	020b      	lsls	r3, r1, #8
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6852      	ldr	r2, [r2, #4]
 80065d4:	0852      	lsrs	r2, r2, #1
 80065d6:	4611      	mov	r1, r2
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	eb13 0b01 	adds.w	fp, r3, r1
 80065e0:	eb44 0c02 	adc.w	ip, r4, r2
 80065e4:	4658      	mov	r0, fp
 80065e6:	4661      	mov	r1, ip
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f04f 0400 	mov.w	r4, #0
 80065f0:	461a      	mov	r2, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	f7f9 fe02 	bl	80001fc <__aeabi_uldivmod>
 80065f8:	4603      	mov	r3, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006604:	d308      	bcc.n	8006618 <UART_SetConfig+0x3f0>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660c:	d204      	bcs.n	8006618 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	e0c1      	b.n	800679c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	76bb      	strb	r3, [r7, #26]
 800661c:	e0be      	b.n	800679c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006626:	d164      	bne.n	80066f2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006628:	7efb      	ldrb	r3, [r7, #27]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d827      	bhi.n	800667e <UART_SetConfig+0x456>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0x40c>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006659 	.word	0x08006659
 8006638:	08006661 	.word	0x08006661
 800663c:	08006669 	.word	0x08006669
 8006640:	0800667f 	.word	0x0800667f
 8006644:	0800666f 	.word	0x0800666f
 8006648:	0800667f 	.word	0x0800667f
 800664c:	0800667f 	.word	0x0800667f
 8006650:	0800667f 	.word	0x0800667f
 8006654:	08006677 	.word	0x08006677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006658:	f7fe fa4e 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 800665c:	6178      	str	r0, [r7, #20]
        break;
 800665e:	e013      	b.n	8006688 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006660:	f7fe fa60 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8006664:	6178      	str	r0, [r7, #20]
        break;
 8006666:	e00f      	b.n	8006688 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006668:	4b57      	ldr	r3, [pc, #348]	; (80067c8 <UART_SetConfig+0x5a0>)
 800666a:	617b      	str	r3, [r7, #20]
        break;
 800666c:	e00c      	b.n	8006688 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fe f9af 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 8006672:	6178      	str	r0, [r7, #20]
        break;
 8006674:	e008      	b.n	8006688 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667a:	617b      	str	r3, [r7, #20]
        break;
 800667c:	e004      	b.n	8006688 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	76bb      	strb	r3, [r7, #26]
        break;
 8006686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8086 	beq.w	800679c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	4a4b      	ldr	r2, [pc, #300]	; (80067c4 <UART_SetConfig+0x59c>)
 8006696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669a:	461a      	mov	r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a2:	005a      	lsls	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	441a      	add	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	d916      	bls.n	80066ec <UART_SetConfig+0x4c4>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c4:	d212      	bcs.n	80066ec <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f023 030f 	bic.w	r3, r3, #15
 80066ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	b29a      	uxth	r2, r3
 80066dc:	89fb      	ldrh	r3, [r7, #14]
 80066de:	4313      	orrs	r3, r2
 80066e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	89fa      	ldrh	r2, [r7, #14]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	e057      	b.n	800679c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	76bb      	strb	r3, [r7, #26]
 80066f0:	e054      	b.n	800679c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066f2:	7efb      	ldrb	r3, [r7, #27]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d828      	bhi.n	800674a <UART_SetConfig+0x522>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <UART_SetConfig+0x4d8>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006725 	.word	0x08006725
 8006704:	0800672d 	.word	0x0800672d
 8006708:	08006735 	.word	0x08006735
 800670c:	0800674b 	.word	0x0800674b
 8006710:	0800673b 	.word	0x0800673b
 8006714:	0800674b 	.word	0x0800674b
 8006718:	0800674b 	.word	0x0800674b
 800671c:	0800674b 	.word	0x0800674b
 8006720:	08006743 	.word	0x08006743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006724:	f7fe f9e8 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006728:	6178      	str	r0, [r7, #20]
        break;
 800672a:	e013      	b.n	8006754 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800672c:	f7fe f9fa 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8006730:	6178      	str	r0, [r7, #20]
        break;
 8006732:	e00f      	b.n	8006754 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006734:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <UART_SetConfig+0x5a0>)
 8006736:	617b      	str	r3, [r7, #20]
        break;
 8006738:	e00c      	b.n	8006754 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673a:	f7fe f949 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800673e:	6178      	str	r0, [r7, #20]
        break;
 8006740:	e008      	b.n	8006754 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006746:	617b      	str	r3, [r7, #20]
        break;
 8006748:	e004      	b.n	8006754 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	76bb      	strb	r3, [r7, #26]
        break;
 8006752:	bf00      	nop
    }

    if (pclk != 0U)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d020      	beq.n	800679c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <UART_SetConfig+0x59c>)
 8006760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006764:	461a      	mov	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	fbb3 f2f2 	udiv	r2, r3, r2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	441a      	add	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	fbb2 f3f3 	udiv	r3, r2, r3
 800677c:	b29b      	uxth	r3, r3
 800677e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d908      	bls.n	8006798 <UART_SetConfig+0x570>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d204      	bcs.n	8006798 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	60da      	str	r2, [r3, #12]
 8006796:	e001      	b.n	800679c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80067b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80067c4:	08006e84 	.word	0x08006e84
 80067c8:	00f42400 	.word	0x00f42400

080067cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01a      	beq.n	80068e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ca:	d10a      	bne.n	80068e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
  }
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006920:	f7fb f94c 	bl	8001bbc <HAL_GetTick>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b08      	cmp	r3, #8
 8006932:	d10e      	bne.n	8006952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f82c 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e022      	b.n	8006998 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b04      	cmp	r3, #4
 800695e:	d10e      	bne.n	800697e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f816 	bl	80069a0 <UART_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e00c      	b.n	8006998 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b0:	e062      	b.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d05e      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ba:	f7fb f8ff 	bl	8001bbc <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d302      	bcc.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11d      	bne.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069de:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e045      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d02e      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d126      	bne.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a42:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e00f      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69da      	ldr	r2, [r3, #28]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d08d      	beq.n	80069b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ab6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fb85 	bl	8006214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b28:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fb61 	bl	8006200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e027      	b.n	8006be8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e02d      	b.n	8006c68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f84f 	bl	8006cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e02d      	b.n	8006ce4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2224      	movs	r2, #36	; 0x24
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f811 	bl	8006cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006cf4:	4a2f      	ldr	r2, [pc, #188]	; (8006db4 <UARTEx_SetNbDataToProcess+0xc8>)
 8006cf6:	f107 0314 	add.w	r3, r7, #20
 8006cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cfe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <UARTEx_SetNbDataToProcess+0xcc>)
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d28:	e03d      	b.n	8006da6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d2e:	2308      	movs	r3, #8
 8006d30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	0e5b      	lsrs	r3, r3, #25
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	0f5b      	lsrs	r3, r3, #29
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006d52:	7fbb      	ldrb	r3, [r7, #30]
 8006d54:	7f3a      	ldrb	r2, [r7, #28]
 8006d56:	f107 0120 	add.w	r1, r7, #32
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	7f3a      	ldrb	r2, [r7, #28]
 8006d66:	f107 0120 	add.w	r1, r7, #32
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006d7c:	7ffb      	ldrb	r3, [r7, #31]
 8006d7e:	7f7a      	ldrb	r2, [r7, #29]
 8006d80:	f107 0120 	add.w	r1, r7, #32
 8006d84:	440a      	add	r2, r1
 8006d86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	7f7a      	ldrb	r2, [r7, #29]
 8006d90:	f107 0120 	add.w	r1, r7, #32
 8006d94:	440a      	add	r2, r1
 8006d96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006da6:	bf00      	nop
 8006da8:	3724      	adds	r7, #36	; 0x24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	08006e2c 	.word	0x08006e2c
 8006db8:	08006e34 	.word	0x08006e34

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4e0d      	ldr	r6, [pc, #52]	; (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1ba4      	subs	r4, r4, r6
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	42a5      	cmp	r5, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4e0b      	ldr	r6, [pc, #44]	; (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	; (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f000 f820 	bl	8006e14 <_init>
 8006dd4:	1ba4      	subs	r4, r4, r6
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2500      	movs	r5, #0
 8006dda:	42a5      	cmp	r5, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006de4:	4798      	blx	r3
 8006de6:	3501      	adds	r5, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dee:	4798      	blx	r3
 8006df0:	3501      	adds	r5, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	08006ea4 	.word	0x08006ea4
 8006df8:	08006ea4 	.word	0x08006ea4
 8006dfc:	08006ea4 	.word	0x08006ea4
 8006e00:	08006ea8 	.word	0x08006ea8

08006e04 <memset>:
 8006e04:	4402      	add	r2, r0
 8006e06:	4603      	mov	r3, r0
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d100      	bne.n	8006e0e <memset+0xa>
 8006e0c:	4770      	bx	lr
 8006e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e12:	e7f9      	b.n	8006e08 <memset+0x4>

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
