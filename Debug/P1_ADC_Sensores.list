
P1_ADC_Sensores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f28  08005f28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f30  08005f30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08005fa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005fa8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c59  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002092  00000000  00000000  00032cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  00034d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  00035ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031ff7  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfc6  00000000  00000000  00068f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001390f6  00000000  00000000  00076f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001afffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  001b0078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005e64 	.word	0x08005e64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08005e64 	.word	0x08005e64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fe4a 	bl	800124e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f83d 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f993 	bl	80008e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c2:	f000 f8b9 	bl	8000738 <MX_ADC1_Init>
  MX_TIM16_Init();
 80005c6:	f000 f91b 	bl	8000800 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f941 	bl	8000850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80005ce:	4815      	ldr	r0, [pc, #84]	; (8000624 <main+0x74>)
 80005d0:	f003 ff5e 	bl	8004490 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if (flag_ADC){
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <main+0x78>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0fb      	beq.n	80005d4 <main+0x24>
		  flag_ADC = 0;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start(&hadc1);
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <main+0x7c>)
 80005e4:	f001 f9cc 	bl	8001980 <HAL_ADC_Start>
		  //ESPERA A QUE SE COMPLETE LA CONVERSION
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0x7c>)
 80005ee:	f001 fa2a 	bl	8001a46 <HAL_ADC_PollForConversion>
		  raw = HAL_ADC_GetValue(&hadc1);
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <main+0x7c>)
 80005f4:	f001 faaf 	bl	8001b56 <HAL_ADC_GetValue>
 80005f8:	4603      	mov	r3, r0
 80005fa:	81fb      	strh	r3, [r7, #14]

		  // Convert to string and print
		  sprintf(msg, "%hu\r\n", raw);
 80005fc:	89fa      	ldrh	r2, [r7, #14]
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	490b      	ldr	r1, [pc, #44]	; (8000630 <main+0x80>)
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f828 	bl	8005658 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fdf8 	bl	8000200 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x84>)
 800061c:	f004 f9f8 	bl	8004a10 <HAL_UART_Transmit>
	  if (flag_ADC){
 8000620:	e7d8      	b.n	80005d4 <main+0x24>
 8000622:	bf00      	nop
 8000624:	20000190 	.word	0x20000190
 8000628:	2000008c 	.word	0x2000008c
 800062c:	2000009c 	.word	0x2000009c
 8000630:	08005e7c 	.word	0x08005e7c
 8000634:	20000104 	.word	0x20000104

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0be      	sub	sp, #248	; 0xf8
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fffe 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	229c      	movs	r2, #156	; 0x9c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fff0 	bl	8005648 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000668:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066c:	f002 f9ca 	bl	8002a04 <HAL_PWREx_ControlVoltageScaling>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000676:	f000 fc37 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800067a:	2312      	movs	r3, #18
 800067c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800069a:	2360      	movs	r3, #96	; 0x60
 800069c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fa5e 	bl	8002b6c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006b6:	f000 fc17 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fe6a 	bl	80033b8 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ea:	f000 fbfd 	bl	8000ee8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80006ee:	f244 0302 	movw	r3, #16386	; 0x4002
 80006f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000704:	2305      	movs	r3, #5
 8000706:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 800070c:	2319      	movs	r3, #25
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800071c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f8f5 	bl	8003910 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800072c:	f000 fbdc 	bl	8000ee8 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	37f8      	adds	r7, #248	; 0xf8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000750:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <MX_ADC1_Init+0xc0>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800076e:	2204      	movs	r2, #4
 8000770:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000780:	2201      	movs	r2, #1
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ADC1_Init+0xbc>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_ADC1_Init+0xbc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_ADC1_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_ADC1_Init+0xbc>)
 80007b0:	f000 ff9c 	bl	80016ec <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ba:	f000 fb95 	bl	8000ee8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC1_Init+0xc4>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2306      	movs	r3, #6
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ca:	237f      	movs	r3, #127	; 0x7f
 80007cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ce:	2304      	movs	r3, #4
 80007d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0xbc>)
 80007dc:	f001 f9c8 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007e6:	f000 fb7f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000009c 	.word	0x2000009c
 80007f8:	50040000 	.word	0x50040000
 80007fc:	04300002 	.word	0x04300002

08000800 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_TIM16_Init+0x48>)
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <MX_TIM16_Init+0x4c>)
 8000808:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 611;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_TIM16_Init+0x48>)
 800080c:	f240 2263 	movw	r2, #611	; 0x263
 8000810:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_TIM16_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_TIM16_Init+0x48>)
 800081a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_TIM16_Init+0x48>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_TIM16_Init+0x48>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_TIM16_Init+0x48>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_TIM16_Init+0x48>)
 8000834:	f003 fdd4 	bl	80043e0 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800083e:	f000 fb53 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000190 	.word	0x20000190
 800084c:	40014400 	.word	0x40014400

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <MX_USART2_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 800089a:	f004 f869 	bl	8004970 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 fb20 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 80008ac:	f004 fdbd 	bl	800542a <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 fb17 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 80008be:	f004 fdf2 	bl	80054a6 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 fb0e 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_USART2_UART_Init+0x90>)
 80008ce:	f004 fd73 	bl	80053b8 <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 fb06 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000104 	.word	0x20000104
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	4bb5      	ldr	r3, [pc, #724]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4ab4      	ldr	r2, [pc, #720]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4bb2      	ldr	r3, [pc, #712]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4baf      	ldr	r3, [pc, #700]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4aae      	ldr	r2, [pc, #696]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4bac      	ldr	r3, [pc, #688]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
 800092c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4ba9      	ldr	r3, [pc, #676]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4aa8      	ldr	r2, [pc, #672]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4ba6      	ldr	r3, [pc, #664]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4ba3      	ldr	r3, [pc, #652]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4aa2      	ldr	r2, [pc, #648]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4ba0      	ldr	r3, [pc, #640]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b9d      	ldr	r3, [pc, #628]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a9c      	ldr	r2, [pc, #624]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b9a      	ldr	r3, [pc, #616]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b97      	ldr	r3, [pc, #604]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a96      	ldr	r2, [pc, #600]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b94      	ldr	r3, [pc, #592]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	4b91      	ldr	r3, [pc, #580]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a90      	ldr	r2, [pc, #576]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b8e      	ldr	r3, [pc, #568]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80009a6:	f002 f8d1 	bl	8002b4c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b8a      	ldr	r3, [pc, #552]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a89      	ldr	r2, [pc, #548]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b87      	ldr	r3, [pc, #540]	; (8000bd4 <MX_GPIO_Init+0x2ec>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f242 0102 	movw	r1, #8194	; 0x2002
 80009c8:	4883      	ldr	r0, [pc, #524]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 80009ca:	f001 ffc9 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f648 0181 	movw	r1, #34945	; 0x8881
 80009d4:	4881      	ldr	r0, [pc, #516]	; (8000bdc <MX_GPIO_Init+0x2f4>)
 80009d6:	f001 ffc3 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 ffbc 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	487c      	ldr	r0, [pc, #496]	; (8000be0 <MX_GPIO_Init+0x2f8>)
 80009ee:	f001 ffb7 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80009f2:	2200      	movs	r2, #0
 80009f4:	f247 5128 	movw	r1, #29992	; 0x7528
 80009f8:	487a      	ldr	r0, [pc, #488]	; (8000be4 <MX_GPIO_Init+0x2fc>)
 80009fa:	f001 ffb1 	bl	8002960 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2121      	movs	r1, #33	; 0x21
 8000a02:	4879      	ldr	r0, [pc, #484]	; (8000be8 <MX_GPIO_Init+0x300>)
 8000a04:	f001 ffac 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000a0e:	4877      	ldr	r0, [pc, #476]	; (8000bec <MX_GPIO_Init+0x304>)
 8000a10:	f001 ffa6 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8000a14:	f240 4301 	movw	r3, #1025	; 0x401
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	486b      	ldr	r0, [pc, #428]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000a2a:	f001 fe07 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8000a2e:	f244 3301 	movw	r3, #17153	; 0x4301
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	486a      	ldr	r0, [pc, #424]	; (8000bec <MX_GPIO_Init+0x304>)
 8000a44:	f001 fdfa 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4865      	ldr	r0, [pc, #404]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000a5c:	f001 fdee 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8000a60:	2338      	movs	r3, #56	; 0x38
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a70:	2306      	movs	r3, #6
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	485c      	ldr	r0, [pc, #368]	; (8000bec <MX_GPIO_Init+0x304>)
 8000a7c:	f001 fdde 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8000a80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a92:	230c      	movs	r3, #12
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4850      	ldr	r0, [pc, #320]	; (8000be0 <MX_GPIO_Init+0x2f8>)
 8000a9e:	f001 fdcd 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8000aa2:	f64c 1308 	movw	r3, #51464	; 0xc908
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4848      	ldr	r0, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000ab8:	f001 fdc0 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8000abc:	2302      	movs	r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000acc:	2305      	movs	r3, #5
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4841      	ldr	r0, [pc, #260]	; (8000bdc <MX_GPIO_Init+0x2f4>)
 8000ad8:	f001 fdb0 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8000adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aee:	2301      	movs	r3, #1
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f001 fd9e 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8000b00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b12:	230a      	movs	r3, #10
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fd8c 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8000b24:	23f4      	movs	r3, #244	; 0xf4
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b34:	230d      	movs	r3, #13
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000b40:	f001 fd7c 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8000b44:	f242 0302 	movw	r3, #8194	; 0x2002
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x2f0>)
 8000b5e:	f001 fd6d 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8000b62:	f648 0381 	movw	r3, #34945	; 0x8881
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x2f4>)
 8000b7c:	f001 fd5e 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8000b80:	f240 6313 	movw	r3, #1555	; 0x613
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f001 fd50 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8000b9c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <MX_GPIO_Init+0x304>)
 8000bba:	f001 fd3f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8000bbe:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e011      	b.n	8000bf8 <MX_GPIO_Init+0x310>
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48001000 	.word	0x48001000
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48000800 	.word	0x48000800
 8000be4:	48001400 	.word	0x48001400
 8000be8:	48001800 	.word	0x48001800
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48001c00 	.word	0x48001c00
 8000bf4:	10110000 	.word	0x10110000
 8000bf8:	48a7      	ldr	r0, [pc, #668]	; (8000e98 <MX_GPIO_Init+0x5b0>)
 8000bfa:	f001 fd1f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	48a0      	ldr	r0, [pc, #640]	; (8000e9c <MX_GPIO_Init+0x5b4>)
 8000c1a:	f001 fd0f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f001 fcff 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4892      	ldr	r0, [pc, #584]	; (8000ea0 <MX_GPIO_Init+0x5b8>)
 8000c56:	f001 fcf1 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5e:	2312      	movs	r3, #18
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	488b      	ldr	r0, [pc, #556]	; (8000ea4 <MX_GPIO_Init+0x5bc>)
 8000c76:	f001 fce1 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000c7a:	f247 5328 	movw	r3, #29992	; 0x7528
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4884      	ldr	r0, [pc, #528]	; (8000ea4 <MX_GPIO_Init+0x5bc>)
 8000c94:	f001 fcd2 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000c98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9e:	2312      	movs	r3, #18
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000caa:	2304      	movs	r3, #4
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4878      	ldr	r0, [pc, #480]	; (8000e98 <MX_GPIO_Init+0x5b0>)
 8000cb6:	f001 fcc1 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4873      	ldr	r0, [pc, #460]	; (8000ea4 <MX_GPIO_Init+0x5bc>)
 8000cd6:	f001 fcb1 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8000cda:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	4b71      	ldr	r3, [pc, #452]	; (8000ea8 <MX_GPIO_Init+0x5c0>)
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	486d      	ldr	r0, [pc, #436]	; (8000ea4 <MX_GPIO_Init+0x5bc>)
 8000cf0:	f001 fca4 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8000cf4:	231c      	movs	r3, #28
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d04:	2305      	movs	r3, #5
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4862      	ldr	r0, [pc, #392]	; (8000e98 <MX_GPIO_Init+0x5b0>)
 8000d10:	f001 fc94 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8000d14:	2321      	movs	r3, #33	; 0x21
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	485b      	ldr	r0, [pc, #364]	; (8000e98 <MX_GPIO_Init+0x5b0>)
 8000d2c:	f001 fc86 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8000d30:	2342      	movs	r3, #66	; 0x42
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d34:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <MX_GPIO_Init+0x5c0>)
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4855      	ldr	r0, [pc, #340]	; (8000e98 <MX_GPIO_Init+0x5b0>)
 8000d44:	f001 fc7a 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8000d48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	484d      	ldr	r0, [pc, #308]	; (8000e9c <MX_GPIO_Init+0x5b4>)
 8000d66:	f001 fc69 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4846      	ldr	r0, [pc, #280]	; (8000ea0 <MX_GPIO_Init+0x5b8>)
 8000d86:	f001 fc59 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8000d8a:	f241 0304 	movw	r3, #4100	; 0x1004
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4843      	ldr	r0, [pc, #268]	; (8000eac <MX_GPIO_Init+0x5c4>)
 8000da0:	f001 fc4c 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	483a      	ldr	r0, [pc, #232]	; (8000ea4 <MX_GPIO_Init+0x5bc>)
 8000dba:	f001 fc3f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc4:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_GPIO_Init+0x5c0>)
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4832      	ldr	r0, [pc, #200]	; (8000e9c <MX_GPIO_Init+0x5b4>)
 8000dd4:	f001 fc32 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dea:	2307      	movs	r3, #7
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4829      	ldr	r0, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x5b4>)
 8000df6:	f001 fc21 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8000dfa:	f242 0302 	movw	r3, #8194	; 0x2002
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_GPIO_Init+0x5c4>)
 8000e18:	f001 fc10 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8000e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	481d      	ldr	r0, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0x5c8>)
 8000e3a:	f001 fbff 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8000e3e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4815      	ldr	r0, [pc, #84]	; (8000eac <MX_GPIO_Init+0x5c4>)
 8000e58:	f001 fbf0 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_GPIO_Init+0x5c0>)
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 fbe3 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_GPIO_Init+0x5c8>)
 8000e8c:	f001 fbd6 	bl	800263c <HAL_GPIO_Init>

}
 8000e90:	bf00      	nop
 8000e92:	3738      	adds	r7, #56	; 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	48001800 	.word	0x48001800
 8000e9c:	48000c00 	.word	0x48000c00
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48001400 	.word	0x48001400
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	48001000 	.word	0x48001000

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d106      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ec8:	f001 fd62 	bl	8002990 <HAL_GPIO_TogglePin>
    flag_ADC = 1;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000190 	.word	0x20000190
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	2000008c 	.word	0x2000008c

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eee:	e7fe      	b.n	8000eee <Error_Handler+0x6>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	; 0x60
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <HAL_ADC_MspInit+0xa4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d13c      	bne.n	8000fd4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_ADC_MspInit+0xa8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8000fa2:	2313      	movs	r3, #19
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_ADC_MspInit+0xac>)
 8000fb6:	f001 fb41 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EX_ADC_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fb34 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	50040000 	.word	0x50040000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000800 	.word	0x48000800

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d113      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_Base_MspInit+0x48>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_TIM_Base_MspInit+0x48>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2019      	movs	r0, #25
 8001018:	f001 fad9 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800101c:	2019      	movs	r0, #25
 800101e:	f001 faf2 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40014400 	.word	0x40014400
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0x7c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d127      	bne.n	80010a6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x80>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_UART_MspInit+0x80>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0x80>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0x80>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0x80>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0x80>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001086:	2370      	movs	r3, #112	; 0x70
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0x84>)
 80010a2:	f001 facb 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000c00 	.word	0x48000c00

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f8f6 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001116:	f003 fa2b 	bl	8004570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000190 	.word	0x20000190

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f004 fa4e 	bl	80055f4 <__errno>
 8001158:	4602      	mov	r2, r0
 800115a:	230c      	movs	r3, #12
 800115c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200a0000 	.word	0x200a0000
 8001184:	00000400 	.word	0x00000400
 8001188:	20000090 	.word	0x20000090
 800118c:	200001e8 	.word	0x200001e8

08001190 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <SystemInit+0x64>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <SystemInit+0x64>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <SystemInit+0x68>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <SystemInit+0x68>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <SystemInit+0x68>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <SystemInit+0x68>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <SystemInit+0x68>)
 80011bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <SystemInit+0x68>)
 80011c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <SystemInit+0x68>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <SystemInit+0x68>)
 80011d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <SystemInit+0x68>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SystemInit+0x64>)
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	609a      	str	r2, [r3, #8]
#endif
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	40021000 	.word	0x40021000

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff ffc6 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001204:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001216:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
	ldr	r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopForever+0x12>)
	b	LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800121e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <LoopForever+0x16>)
	cmp	r2, r3
 8001226:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f004 f9e9 	bl	8005600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f9bf 	bl	80005b0 <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001238:	08005f38 	.word	0x08005f38
	ldr	r0, =_sdata
 800123c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001240:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001244:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001248:	200001e4 	.word	0x200001e4

0800124c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_IRQHandler>

0800124e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f001 f9ad 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f80e 	bl	8001280 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001270:	f7ff fe3e 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	79fb      	ldrb	r3, [r7, #7]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 f9b9 	bl	8002622 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f001 f983 	bl	80025ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200001dc 	.word	0x200001dc

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200001dc 	.word	0x200001dc

08001338 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3360      	adds	r3, #96	; 0x60
 80013b2:	461a      	mov	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <LL_ADC_SetOffset+0x44>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	03fff000 	.word	0x03fff000

080013e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3360      	adds	r3, #96	; 0x60
 80013f6:	461a      	mov	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3360      	adds	r3, #96	; 0x60
 8001424:	461a      	mov	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	615a      	str	r2, [r3, #20]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001496:	b480      	push	{r7}
 8001498:	b087      	sub	sp, #28
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3330      	adds	r3, #48	; 0x30
 80014a6:	461a      	mov	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	4413      	add	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	211f      	movs	r1, #31
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0e9b      	lsrs	r3, r3, #26
 80014ce:	f003 011f 	and.w	r1, r3, #31
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3314      	adds	r3, #20
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	0e5b      	lsrs	r3, r3, #25
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0d1b      	lsrs	r3, r3, #20
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2107      	movs	r1, #7
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	0d1b      	lsrs	r3, r3, #20
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0318 	and.w	r3, r3, #24
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001568:	40d9      	lsrs	r1, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	400b      	ands	r3, r1
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	431a      	orrs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	0007ffff 	.word	0x0007ffff

0800158c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6093      	str	r3, [r2, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e12d      	b.n	8001962 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fc0f 	bl	8000f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff3f 	bl	80015b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff25 	bl	800158c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff5a 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d113      	bne.n	800177a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff3e 	bl	80015d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175c:	4b83      	ldr	r3, [pc, #524]	; (800196c <HAL_ADC_Init+0x280>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	4a83      	ldr	r2, [pc, #524]	; (8001970 <HAL_ADC_Init+0x284>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800176c:	e002      	b.n	8001774 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3e 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff77 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80017b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 80c8 	bne.w	8001950 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80c4 	bne.w	8001950 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff37 	bl	8001650 <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10b      	bne.n	8001800 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e8:	4862      	ldr	r0, [pc, #392]	; (8001974 <HAL_ADC_Init+0x288>)
 80017ea:	f7ff ff31 	bl	8001650 <LL_ADC_IsEnabled>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4619      	mov	r1, r3
 80017fa:	485f      	ldr	r0, [pc, #380]	; (8001978 <HAL_ADC_Init+0x28c>)
 80017fc:	f7ff fd9c 	bl	8001338 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e5b      	ldrb	r3, [r3, #25]
 8001804:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800180a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001810:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001816:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d106      	bne.n	800183c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	3b01      	subs	r3, #1
 8001834:	045b      	lsls	r3, r3, #17
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_ADC_Init+0x290>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	430b      	orrs	r3, r1
 800186a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff14 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001876:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff21 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001882:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d140      	bne.n	800190c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d13d      	bne.n	800190c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800189a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b2:	f023 0306 	bic.w	r3, r3, #6
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	430b      	orrs	r3, r1
 80018be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ec:	430a      	orrs	r2, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10c      	bne.n	800192e <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f023 010f 	bic.w	r1, r3, #15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
 800192c:	e007      	b.n	800193e <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020f 	bic.w	r2, r2, #15
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
 800194e:	e007      	b.n	8001960 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001960:	7ffb      	ldrb	r3, [r7, #31]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000
 8001970:	053e2d63 	.word	0x053e2d63
 8001974:	50040000 	.word	0x50040000
 8001978:	50040300 	.word	0x50040300
 800197c:	fff0c007 	.word	0xfff0c007

08001980 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe86 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d14f      	bne.n	8001a38 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start+0x26>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e04b      	b.n	8001a3e <HAL_ADC_Start+0xbe>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fcd8 	bl	8002364 <ADC_Enable>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d137      	bne.n	8001a2e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019de:	d106      	bne.n	80019ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	f023 0206 	bic.w	r2, r3, #6
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	221c      	movs	r2, #28
 80019fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe25 	bl	8001676 <LL_ADC_REG_StartConversion>
 8001a2c:	e006      	b.n	8001a3c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d102      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e010      	b.n	8001a80 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e068      	b.n	8001b4e <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fc4e 	bl	8001320 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a86:	e01a      	b.n	8001abe <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d016      	beq.n	8001abe <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a90:	f7ff fc46 	bl	8001320 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d302      	bcc.n	8001aa6 <HAL_ADC_PollForConversion+0x60>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e047      	b.n	8001b4e <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0dd      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fcc7 	bl	8001470 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01c      	beq.n	8001b22 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e5b      	ldrb	r3, [r3, #25]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d118      	bne.n	8001b22 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d111      	bne.n	8001b22 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d104      	bne.n	8001b3a <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2208      	movs	r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e008      	b.n	8001b4c <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	220c      	movs	r2, #12
 8001b4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0b6      	sub	sp, #216	; 0xd8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x22>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e3d4      	b.n	800233c <HAL_ADC_ConfigChannel+0x7cc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fd7d 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 83b9 	bne.w	800231e <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d824      	bhi.n	8001bfe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	3b02      	subs	r3, #2
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d81b      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x86>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <HAL_ADC_ConfigChannel+0x54>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bdd 	.word	0x08001bdd
 8001bcc:	08001be5 	.word	0x08001be5
 8001bd0:	08001bed 	.word	0x08001bed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	605a      	str	r2, [r3, #4]
          break;
 8001bda:	e011      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2212      	movs	r2, #18
 8001be0:	605a      	str	r2, [r3, #4]
          break;
 8001be2:	e00d      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2218      	movs	r2, #24
 8001be8:	605a      	str	r2, [r3, #4]
          break;
 8001bea:	e009      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	605a      	str	r2, [r3, #4]
          break;
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2206      	movs	r2, #6
 8001bfa:	605a      	str	r2, [r3, #4]
          break;
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bfe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f7ff fc42 	bl	8001496 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd41 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001c1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fd4d 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 81c1 	bne.w	8001fba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 81bc 	bne.w	8001fba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c4a:	d10f      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7ff fc49 	bl	80014ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fbf0 	bl	800144a <LL_ADC_SetSamplingTimeCommonConfig>
 8001c6a:	e00e      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f7ff fc38 	bl	80014ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fbe0 	bl	800144a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00a      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cbc:	f7ff fb70 	bl	80013a0 <LL_ADC_SetOffset>
 8001cc0:	e17b      	b.n	8001fba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb8d 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x17e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fb82 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	e01e      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1bc>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fb77 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e004      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1d4>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	e018      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x206>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e004      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d106      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fb46 	bl	8001414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb2a 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x244>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fb1f 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	f003 021f 	and.w	r2, r3, #31
 8001db2:	e01e      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x282>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fb14 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e004      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x29a>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	e018      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x2cc>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	e004      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fae3 	bl	8001414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2102      	movs	r1, #2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fac7 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x30a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fabc 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	0e9b      	lsrs	r3, r3, #26
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	e01e      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x348>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fab1 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e004      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x360>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	e016      	b.n	8001efe <HAL_ADC_ConfigChannel+0x38e>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	e004      	b.n	8001efe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fa82 	bl	8001414 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2103      	movs	r1, #3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fa66 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x3cc>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fa5b 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	e017      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x3fc>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2103      	movs	r1, #3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa50 	bl	80013e8 <LL_ADC_GetOffsetChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f56:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x414>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	e011      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x438>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e003      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fa2d 	bl	8001414 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fb46 	bl	8001650 <LL_ADC_IsEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8140 	bne.w	800224c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fab3 	bl	8001544 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a8f      	ldr	r2, [pc, #572]	; (8002220 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 8131 	bne.w	800224c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x4a2>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	3301      	adds	r3, #1
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2b09      	cmp	r3, #9
 8002008:	bf94      	ite	ls
 800200a:	2301      	movls	r3, #1
 800200c:	2300      	movhi	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e019      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4d6>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800202e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2b09      	cmp	r3, #9
 800203e:	bf94      	ite	ls
 8002040:	2301      	movls	r3, #1
 8002042:	2300      	movhi	r3, #0
 8002044:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002046:	2b00      	cmp	r3, #0
 8002048:	d079      	beq.n	800213e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x4f6>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	3301      	adds	r3, #1
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002064:	e015      	b.n	8002092 <HAL_ADC_ConfigChannel+0x522>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002076:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e003      	b.n	800208a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x542>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	e017      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x572>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80020ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	ea42 0103 	orr.w	r1, r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x598>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	3301      	adds	r3, #1
 80020fa:	f003 021f 	and.w	r2, r3, #31
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	051b      	lsls	r3, r3, #20
 8002106:	e018      	b.n	800213a <HAL_ADC_ConfigChannel+0x5ca>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f003 021f 	and.w	r2, r3, #31
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213a:	430b      	orrs	r3, r1
 800213c:	e081      	b.n	8002242 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_ADC_ConfigChannel+0x5ea>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002158:	e015      	b.n	8002186 <HAL_ADC_ConfigChannel+0x616>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002172:	2320      	movs	r3, #32
 8002174:	e003      	b.n	800217e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3301      	adds	r3, #1
 8002180:	069b      	lsls	r3, r3, #26
 8002182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x636>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	3301      	adds	r3, #1
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	e017      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x666>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	61fb      	str	r3, [r7, #28]
  return result;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80021be:	2320      	movs	r3, #32
 80021c0:	e003      	b.n	80021ca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x692>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	3b1e      	subs	r3, #30
 80021fa:	051b      	lsls	r3, r3, #20
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002200:	e01e      	b.n	8002240 <HAL_ADC_ConfigChannel+0x6d0>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	613b      	str	r3, [r7, #16]
  return result;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e006      	b.n	800222c <HAL_ADC_ConfigChannel+0x6bc>
 800221e:	bf00      	nop
 8002220:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	051b      	lsls	r3, r3, #20
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff f951 	bl	80014ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <HAL_ADC_ConfigChannel+0x7d4>)
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d06b      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002258:	483b      	ldr	r0, [pc, #236]	; (8002348 <HAL_ADC_ConfigChannel+0x7d8>)
 800225a:	f7ff f893 	bl	8001384 <LL_ADC_GetCommonPathInternalCh>
 800225e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_ADC_ConfigChannel+0x7dc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d126      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800226c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d120      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_ADC_ConfigChannel+0x7e0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d156      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800228a:	4619      	mov	r1, r3
 800228c:	482e      	ldr	r0, [pc, #184]	; (8002348 <HAL_ADC_ConfigChannel+0x7d8>)
 800228e:	f7ff f866 	bl	800135e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_ADC_ConfigChannel+0x7e4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <HAL_ADC_ConfigChannel+0x7e8>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	099a      	lsrs	r2, r3, #6
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022aa:	e002      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b8:	e03a      	b.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_ADC_ConfigChannel+0x7ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d113      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x77c>
 80022c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_ADC_ConfigChannel+0x7e0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	4619      	mov	r1, r3
 80022e4:	4818      	ldr	r0, [pc, #96]	; (8002348 <HAL_ADC_ConfigChannel+0x7d8>)
 80022e6:	f7ff f83a 	bl	800135e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ea:	e021      	b.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_ADC_ConfigChannel+0x7f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11c      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_ADC_ConfigChannel+0x7e0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d111      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800230c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002314:	4619      	mov	r1, r3
 8002316:	480c      	ldr	r0, [pc, #48]	; (8002348 <HAL_ADC_ConfigChannel+0x7d8>)
 8002318:	f7ff f821 	bl	800135e <LL_ADC_SetCommonPathInternalCh>
 800231c:	e008      	b.n	8002330 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002338:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800233c:	4618      	mov	r0, r3
 800233e:	37d8      	adds	r7, #216	; 0xd8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	80080000 	.word	0x80080000
 8002348:	50040300 	.word	0x50040300
 800234c:	c7520000 	.word	0xc7520000
 8002350:	50040000 	.word	0x50040000
 8002354:	20000000 	.word	0x20000000
 8002358:	053e2d63 	.word	0x053e2d63
 800235c:	cb840000 	.word	0xcb840000
 8002360:	80000001 	.word	0x80000001

08002364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f96d 	bl	8001650 <LL_ADC_IsEnabled>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d146      	bne.n	800240a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <ADC_Enable+0xb0>)
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e032      	b.n	800240c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f93c 	bl	8001628 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023b0:	f7fe ffb6 	bl	8001320 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b6:	e021      	b.n	80023fc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f947 	bl	8001650 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff f92b 	bl	8001628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023d2:	f7fe ffa5 	bl	8001320 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d90d      	bls.n	80023fc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d1d6      	bne.n	80023b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	8000003f 	.word	0x8000003f

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff ff8e 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff29 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff3e 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff8e 	bl	800250c <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5d 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff31 	bl	800247c <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	e166      	b.n	800291a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8158 	beq.w	8002914 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d00b      	beq.n	8002684 <HAL_GPIO_Init+0x48>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002678:	2b11      	cmp	r3, #17
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d130      	bne.n	80026e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0201 	and.w	r2, r3, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0xea>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d123      	bne.n	800276e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80b2 	beq.w	8002914 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6613      	str	r3, [r2, #96]	; 0x60
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027c8:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_GPIO_Init+0x300>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f2:	d02b      	beq.n	800284c <HAL_GPIO_Init+0x210>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_GPIO_Init+0x304>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d025      	beq.n	8002848 <HAL_GPIO_Init+0x20c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_GPIO_Init+0x308>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01f      	beq.n	8002844 <HAL_GPIO_Init+0x208>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_GPIO_Init+0x30c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d019      	beq.n	8002840 <HAL_GPIO_Init+0x204>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_GPIO_Init+0x310>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_GPIO_Init+0x200>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_GPIO_Init+0x314>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00d      	beq.n	8002838 <HAL_GPIO_Init+0x1fc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_GPIO_Init+0x318>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d007      	beq.n	8002834 <HAL_GPIO_Init+0x1f8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_GPIO_Init+0x31c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_GPIO_Init+0x1f4>
 800282c:	2307      	movs	r3, #7
 800282e:	e00e      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002830:	2308      	movs	r3, #8
 8002832:	e00c      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002834:	2306      	movs	r3, #6
 8002836:	e00a      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002838:	2305      	movs	r3, #5
 800283a:	e008      	b.n	800284e <HAL_GPIO_Init+0x212>
 800283c:	2304      	movs	r3, #4
 800283e:	e006      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002840:	2303      	movs	r3, #3
 8002842:	e004      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002844:	2302      	movs	r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_Init+0x212>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_GPIO_Init+0x212>
 800284c:	2300      	movs	r3, #0
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4093      	lsls	r3, r2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800285e:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_GPIO_Init+0x300>)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_GPIO_Init+0x320>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002890:	4a32      	ldr	r2, [pc, #200]	; (800295c <HAL_GPIO_Init+0x320>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002896:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_GPIO_Init+0x320>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028ba:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_GPIO_Init+0x320>)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_GPIO_Init+0x320>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_GPIO_Init+0x320>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_GPIO_Init+0x320>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_GPIO_Init+0x320>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f ae91 	bne.w	800264c <HAL_GPIO_Init+0x10>
  }
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	48000400 	.word	0x48000400
 8002944:	48000800 	.word	0x48000800
 8002948:	48000c00 	.word	0x48000c00
 800294c:	48001000 	.word	0x48001000
 8002950:	48001400 	.word	0x48001400
 8002954:	48001800 	.word	0x48001800
 8002958:	48001c00 	.word	0x48001c00
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e002      	b.n	8002984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43d9      	mvns	r1, r3
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	400b      	ands	r3, r1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d102      	bne.n	80029dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	e00b      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d102      	bne.n	80029f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	e000      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d158      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e057      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e04d      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d141      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d131      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2232      	movs	r2, #50	; 0x32
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae2:	e002      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d102      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d112      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e011      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b30:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5a:	6053      	str	r3, [r2, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f000 bc16 	b.w	80033ac <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b80:	4ba0      	ldr	r3, [pc, #640]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8a:	4b9e      	ldr	r3, [pc, #632]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80e4 	beq.w	8002d6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4c>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	f040 808b 	bne.w	8002cc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	f040 8087 	bne.w	8002cc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x64>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e3ed      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_RCC_OscConfig+0x7e>
 8002be0:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be8:	e005      	b.n	8002bf6 <HAL_RCC_OscConfig+0x8a>
 8002bea:	4b86      	ldr	r3, [pc, #536]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d223      	bcs.n	8002c42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fdc6 	bl	8003790 <RCC_SetFlashLatencyFromMSIRange>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e3ce      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0e:	4b7d      	ldr	r3, [pc, #500]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7c      	ldr	r2, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4977      	ldr	r1, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	4972      	ldr	r1, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e025      	b.n	8002c8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6f      	ldr	r2, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	496a      	ldr	r1, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	4965      	ldr	r1, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fd86 	bl	8003790 <RCC_SetFlashLatencyFromMSIRange>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e38e      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8e:	f000 fcbf 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8002c92:	4601      	mov	r1, r0
 8002c94:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x29c>)
 8002ca0:	5cd3      	ldrb	r3, [r2, r3]
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x2a0>)
 8002cac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cae:	4b58      	ldr	r3, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fae4 	bl	8001280 <HAL_InitTick>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d052      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	e372      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d032      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cda:	f7fe fb21 	bl	8001320 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fb1d 	bl	8001320 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e35b      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d00:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	493a      	ldr	r1, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	4935      	ldr	r1, [pc, #212]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
 8002d32:	e01a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d40:	f7fe faee 	bl	8001320 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d48:	f7fe faea 	bl	8001320 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e328      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1dc>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d073      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x21c>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d10e      	bne.n	8002da0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d063      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d15f      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e305      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x24c>
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0x288>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x270>
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0x288>
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x298>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fa90 	bl	8001320 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e02:	e010      	b.n	8002e26 <HAL_RCC_OscConfig+0x2ba>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08005e94 	.word	0x08005e94
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe fa84 	bl	8001320 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e2c2      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e26:	4baf      	ldr	r3, [pc, #700]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2a8>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fa74 	bl	8001320 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fa70 	bl	8001320 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e2ae      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4e:	4ba5      	ldr	r3, [pc, #660]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2d0>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d060      	beq.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x310>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d116      	bne.n	8002eaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7c:	4b99      	ldr	r3, [pc, #612]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x328>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e28b      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b93      	ldr	r3, [pc, #588]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4990      	ldr	r1, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea8:	e040      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d023      	beq.n	8002efa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb2:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a8b      	ldr	r2, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fa2f 	bl	8001320 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fa2b 	bl	8001320 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e269      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed8:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee4:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	497c      	ldr	r1, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	e018      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efa:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a79      	ldr	r2, [pc, #484]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe fa0b 	bl	8001320 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fa07 	bl	8001320 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e245      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f20:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f46:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f9e6 	bl	8001320 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe f9e2 	bl	8001320 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e220      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6a:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <HAL_RCC_OscConfig+0x3ec>
 8002f78:	e01b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7a:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f9c9 	bl	8001320 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe f9c5 	bl	8001320 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e203      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa4:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ef      	bne.n	8002f92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80a6 	beq.w	800310c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fc4:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10d      	bne.n	8002fec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b44      	ldr	r3, [pc, #272]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a43      	ldr	r2, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fec:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_RCC_OscConfig+0x57c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d118      	bne.n	800302a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x57c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x57c>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003004:	f7fe f98c 	bl	8001320 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe f988 	bl	8001320 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1c6      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301e:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <HAL_RCC_OscConfig+0x57c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d108      	bne.n	8003044 <HAL_RCC_OscConfig+0x4d8>
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003042:	e024      	b.n	800308e <HAL_RCC_OscConfig+0x522>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d110      	bne.n	800306e <HAL_RCC_OscConfig+0x502>
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306c:	e00f      	b.n	800308e <HAL_RCC_OscConfig+0x522>
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe f943 	bl	8001320 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe f93f 	bl	8001320 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e17b      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ed      	beq.n	800309e <HAL_RCC_OscConfig+0x532>
 80030c2:	e01a      	b.n	80030fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe f92c 	bl	8001320 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ca:	e00f      	b.n	80030ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe f928 	bl	8001320 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d906      	bls.n	80030ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e164      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ec:	4ba8      	ldr	r3, [pc, #672]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e8      	bne.n	80030cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4ba3      	ldr	r3, [pc, #652]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4aa2      	ldr	r2, [pc, #648]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03c      	beq.n	8003192 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01c      	beq.n	800315a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003120:	4b9b      	ldr	r3, [pc, #620]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003126:	4a9a      	ldr	r2, [pc, #616]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe f8f6 	bl	8001320 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003138:	f7fe f8f2 	bl	8001320 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e130      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800314a:	4b91      	ldr	r3, [pc, #580]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800314c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ef      	beq.n	8003138 <HAL_RCC_OscConfig+0x5cc>
 8003158:	e01b      	b.n	8003192 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800315a:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800315c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003160:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f8d9 	bl	8001320 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003172:	f7fe f8d5 	bl	8001320 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e113      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003184:	4b82      	ldr	r3, [pc, #520]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ef      	bne.n	8003172 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8107 	beq.w	80033aa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	f040 80cb 	bne.w	800333c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031a6:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d12c      	bne.n	8003214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	3b01      	subs	r3, #1
 80031c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d123      	bne.n	8003214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d11b      	bne.n	8003214 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d113      	bne.n	8003214 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	3b01      	subs	r3, #1
 80031fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d109      	bne.n	8003214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d06d      	beq.n	80032f0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d068      	beq.n	80032ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800321a:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003226:	4b5a      	ldr	r3, [pc, #360]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0ba      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a55      	ldr	r2, [pc, #340]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800323c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003240:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003242:	f7fe f86d 	bl	8001320 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe f869 	bl	8001320 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0a7      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x828>)
 800326e:	4013      	ands	r3, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003278:	3a01      	subs	r2, #1
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003282:	0212      	lsls	r2, r2, #8
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328a:	0852      	lsrs	r2, r2, #1
 800328c:	3a01      	subs	r2, #1
 800328e:	0552      	lsls	r2, r2, #21
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	3a01      	subs	r2, #1
 800329a:	0652      	lsls	r2, r2, #25
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a2:	06d2      	lsls	r2, r2, #27
 80032a4:	430a      	orrs	r2, r1
 80032a6:	493a      	ldr	r1, [pc, #232]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a37      	ldr	r2, [pc, #220]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c4:	f7fe f82c 	bl	8001320 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f828 	bl	8001320 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e066      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ea:	e05e      	b.n	80033aa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e05d      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d156      	bne.n	80033aa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003314:	f7fe f804 	bl	8001320 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f800 	bl	8001320 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e03e      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x7b0>
 800333a:	e036      	b.n	80033aa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d031      	beq.n	80033a6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003360:	f023 0303 	bic.w	r3, r3, #3
 8003364:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_OscConfig+0x824>)
 800336c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003374:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fd ffd3 	bl	8001320 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	e00c      	b.n	8003398 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd ffcf 	bl	8001320 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d905      	bls.n	8003398 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e00d      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
 8003390:	40021000 	.word	0x40021000
 8003394:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x848>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ec      	bne.n	800337e <HAL_RCC_OscConfig+0x812>
 80033a4:	e001      	b.n	80033aa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e10f      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b86      	ldr	r3, [pc, #536]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4984      	ldr	r1, [pc, #528]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0f7      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8089 	beq.w	8003520 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d133      	bne.n	800347e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0e4      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003426:	f000 fa0d 	bl	8003844 <RCC_GetSysClockFreqFromPLLSource>
 800342a:	4602      	mov	r2, r0
 800342c:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_ClockConfig+0x248>)
 800342e:	429a      	cmp	r2, r3
 8003430:	d955      	bls.n	80034de <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800343e:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003446:	4a6d      	ldr	r2, [pc, #436]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e044      	b.n	80034de <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03e      	beq.n	80034de <HAL_RCC_ClockConfig+0x126>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d13a      	bne.n	80034de <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003470:	4a62      	ldr	r2, [pc, #392]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e02f      	b.n	80034de <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003486:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d115      	bne.n	80034be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0ac      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a0      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ae:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e098      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034be:	f000 f8a7 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCC_ClockConfig+0x248>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d909      	bls.n	80034de <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ca:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4944      	ldr	r1, [pc, #272]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fd ff16 	bl	8001320 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fd ff12 	bl	8001320 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e070      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4930      	ldr	r1, [pc, #192]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
 800353e:	e008      	b.n	8003552 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d105      	bne.n	8003552 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 800354c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003550:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d210      	bcs.n	8003582 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 020f 	bic.w	r2, r3, #15
 8003568:	4923      	ldr	r1, [pc, #140]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_ClockConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e036      	b.n	80035f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4918      	ldr	r1, [pc, #96]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4910      	ldr	r1, [pc, #64]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c0:	f000 f826 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80035c4:	4601      	mov	r1, r0
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_RCC_ClockConfig+0x244>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <HAL_RCC_ClockConfig+0x24c>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa21 f303 	lsr.w	r3, r1, r3
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x250>)
 80035de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x254>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fe4b 	bl	8001280 <HAL_InitTick>
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40021000 	.word	0x40021000
 8003600:	04c4b400 	.word	0x04c4b400
 8003604:	08005e94 	.word	0x08005e94
 8003608:	20000000 	.word	0x20000000
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003628:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x34>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d121      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11e      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003650:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e005      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10d      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d102      	bne.n	800368e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_RCC_GetSysClockFreq+0x10c>)
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e004      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d101      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d133      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0xaa>
 80036b2:	e005      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b6:	617b      	str	r3, [r7, #20]
      break;
 80036b8:	e005      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036bc:	617b      	str	r3, [r7, #20]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	617b      	str	r3, [r7, #20]
      break;
 80036c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	3301      	adds	r3, #1
 80036d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	fb02 f203 	mul.w	r2, r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_GetSysClockFreq+0x104>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0e5b      	lsrs	r3, r3, #25
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003706:	69bb      	ldr	r3, [r7, #24]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3724      	adds	r7, #36	; 0x24
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40021000 	.word	0x40021000
 8003718:	08005eac 	.word	0x08005eac
 800371c:	00f42400 	.word	0x00f42400

08003720 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_RCC_GetHCLKFreq+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000000 	.word	0x20000000

08003738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800373c:	f7ff fff0 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003740:	4601      	mov	r1, r0
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	08005ea4 	.word	0x08005ea4

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003768:	f7ff ffda 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 800376c:	4601      	mov	r1, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0adb      	lsrs	r3, r3, #11
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_RCC_GetPCLK2Freq+0x28>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	08005ea4 	.word	0x08005ea4

08003790 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a8:	f7ff f90c 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 80037ac:	6178      	str	r0, [r7, #20]
 80037ae:	e014      	b.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6593      	str	r3, [r2, #88]	; 0x58
 80037bc:	4b1f      	ldr	r3, [pc, #124]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c8:	f7ff f8fc 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 80037cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	4a1a      	ldr	r2, [pc, #104]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d10b      	bne.n	80037fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d913      	bls.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2ba0      	cmp	r3, #160	; 0xa0
 80037ec:	d902      	bls.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ee:	2302      	movs	r3, #2
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	e00d      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f4:	2301      	movs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	e00a      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b7f      	cmp	r3, #127	; 0x7f
 80037fe:	d902      	bls.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003800:	2302      	movs	r3, #2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e004      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b70      	cmp	r3, #112	; 0x70
 800380a:	d101      	bne.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800380c:	2301      	movs	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 020f 	bic.w	r2, r3, #15
 8003818:	4909      	ldr	r1, [pc, #36]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	40022000 	.word	0x40022000

08003844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800384e:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d118      	bne.n	800388c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d107      	bne.n	8003876 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e005      	b.n	8003882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d002      	beq.n	80038a2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800389c:	2b03      	cmp	r3, #3
 800389e:	d003      	beq.n	80038a8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80038a0:	e005      	b.n	80038ae <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038a4:	613b      	str	r3, [r7, #16]
    break;
 80038a6:	e005      	b.n	80038b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038aa:	613b      	str	r3, [r7, #16]
    break;
 80038ac:	e002      	b.n	80038b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	613b      	str	r3, [r7, #16]
    break;
 80038b2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	fb02 f203 	mul.w	r2, r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	0e5b      	lsrs	r3, r3, #25
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	3301      	adds	r3, #1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038f4:	683b      	ldr	r3, [r7, #0]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	08005eac 	.word	0x08005eac
 800390c:	00f42400 	.word	0x00f42400

08003910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003918:	2300      	movs	r3, #0
 800391a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800391c:	2300      	movs	r3, #0
 800391e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03d      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d00b      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d804      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800393c:	2b20      	cmp	r3, #32
 800393e:	d015      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003940:	e01d      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003942:	2b60      	cmp	r3, #96	; 0x60
 8003944:	d01e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d01c      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800394a:	e018      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800394c:	4b86      	ldr	r3, [pc, #536]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a85      	ldr	r2, [pc, #532]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003958:	e015      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fb5d 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800396a:	e00c      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3320      	adds	r3, #32
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc44 	bl	8004200 <RCCEx_PLLSAI2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	74fb      	strb	r3, [r7, #19]
      break;
 8003982:	e000      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398c:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800398e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003992:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399a:	4973      	ldr	r1, [pc, #460]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039a2:	e001      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d042      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d00f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xce>
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d805      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d011      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d017      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xee>
 80039ce:	e01f      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80039d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d4:	d01f      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d01c      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039dc:	e018      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039de:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4a61      	ldr	r2, [pc, #388]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ea:	e015      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fb14 	bl	8004020 <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039fc:	e00c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3320      	adds	r3, #32
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fbfb 	bl	8004200 <RCCEx_PLLSAI2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	74fb      	strb	r3, [r7, #19]
      break;
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a1e:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	494e      	ldr	r1, [pc, #312]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a34:	e001      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 809f 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a4c:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8a:	f7fd fc49 	bl	8001320 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a90:	e009      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fd fc45 	bl	8001320 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d902      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	74fb      	strb	r3, [r7, #19]
        break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aa6:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ef      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d15b      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01f      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d019      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b02:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d016      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fc04 	bl	8001320 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fc00 	bl	8001320 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d902      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	74fb      	strb	r3, [r7, #19]
            break;
 8003b32:	e006      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ec      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b60:	e008      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	74bb      	strb	r3, [r7, #18]
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b74:	7c7b      	ldrb	r3, [r7, #17]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4ba0      	ldr	r3, [pc, #640]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	4a9f      	ldr	r2, [pc, #636]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b92:	4b9a      	ldr	r3, [pc, #616]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f023 0203 	bic.w	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	4996      	ldr	r1, [pc, #600]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb4:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 020c 	bic.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	498e      	ldr	r1, [pc, #568]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	4985      	ldr	r1, [pc, #532]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf8:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	497d      	ldr	r1, [pc, #500]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c1a:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c28:	4974      	ldr	r1, [pc, #464]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	496c      	ldr	r1, [pc, #432]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6c:	4963      	ldr	r1, [pc, #396]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8e:	495b      	ldr	r1, [pc, #364]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca2:	4b56      	ldr	r3, [pc, #344]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	4952      	ldr	r1, [pc, #328]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	494a      	ldr	r1, [pc, #296]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce6:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	4941      	ldr	r1, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d08:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	4939      	ldr	r1, [pc, #228]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d028      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d38:	4930      	ldr	r1, [pc, #192]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d54:	60d3      	str	r3, [r2, #12]
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f959 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d04d      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d90:	d108      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003da2:	e012      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc2:	490e      	ldr	r1, [pc, #56]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dde:	60d3      	str	r3, [r2, #12]
 8003de0:	e020      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dea:	d109      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a02      	ldr	r2, [pc, #8]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e014      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f905 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d028      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e30:	4b7a      	ldr	r3, [pc, #488]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	4977      	ldr	r1, [pc, #476]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a71      	ldr	r2, [pc, #452]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]
 8003e5c:	e011      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f8d6 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003e7e:	7cfb      	ldrb	r3, [r7, #19]
 8003e80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01e      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9e:	495f      	ldr	r1, [pc, #380]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f8b1 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed8:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ede:	f023 0204 	bic.w	r2, r3, #4
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	494c      	ldr	r1, [pc, #304]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003efc:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f02:	f023 0218 	bic.w	r2, r3, #24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	4943      	ldr	r1, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d035      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3d      	ldr	r2, [pc, #244]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2c:	f7fd f9f8 	bl	8001320 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f34:	f7fd f9f4 	bl	8001320 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d902      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	74fb      	strb	r3, [r7, #19]
        break;
 8003f46:	e005      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ef      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d113      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6a:	492c      	ldr	r1, [pc, #176]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3320      	adds	r3, #32
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f941 	bl	8004200 <RCCEx_PLLSAI2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01e      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	491c      	ldr	r1, [pc, #112]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f91c 	bl	8004200 <RCCEx_PLLSAI2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d017      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	490a      	ldr	r1, [pc, #40]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004004:	d105      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800400c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004010:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004012:	7cbb      	ldrb	r3, [r7, #18]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402e:	4b70      	ldr	r3, [pc, #448]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800403a:	4b6d      	ldr	r3, [pc, #436]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0203 	and.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d103      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
       ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	d13f      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e03c      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d00c      	beq.n	800407a <RCCEx_PLLSAI1_Config+0x5a>
 8004060:	2b03      	cmp	r3, #3
 8004062:	d013      	beq.n	800408c <RCCEx_PLLSAI1_Config+0x6c>
 8004064:	2b01      	cmp	r3, #1
 8004066:	d120      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004068:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004078:	e01a      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800407a:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408a:	e013      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800408c:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004098:	4b55      	ldr	r3, [pc, #340]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040a8:	e006      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      break;
 80040ae:	e004      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80040b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f023 0203 	bic.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4948      	ldr	r1, [pc, #288]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 8086 	bne.w	80041e6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040da:	4b45      	ldr	r3, [pc, #276]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a44      	ldr	r2, [pc, #272]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fd f91b 	bl	8001320 <HAL_GetTick>
 80040ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ec:	e009      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ee:	f7fd f917 	bl	8001320 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d902      	bls.n	8004102 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	73fb      	strb	r3, [r7, #15]
        break;
 8004100:	e005      	b.n	800410e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ef      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d168      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d113      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800411a:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	0211      	lsls	r1, r2, #8
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68d2      	ldr	r2, [r2, #12]
 800412c:	06d2      	lsls	r2, r2, #27
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6852      	ldr	r2, [r2, #4]
 8004134:	3a01      	subs	r2, #1
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	430a      	orrs	r2, r1
 800413a:	492d      	ldr	r1, [pc, #180]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	610b      	str	r3, [r1, #16]
 8004140:	e02d      	b.n	800419e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d115      	bne.n	8004174 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004148:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6892      	ldr	r2, [r2, #8]
 8004154:	0211      	lsls	r1, r2, #8
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6912      	ldr	r2, [r2, #16]
 800415a:	0852      	lsrs	r2, r2, #1
 800415c:	3a01      	subs	r2, #1
 800415e:	0552      	lsls	r2, r2, #21
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6852      	ldr	r2, [r2, #4]
 8004166:	3a01      	subs	r2, #1
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	430a      	orrs	r2, r1
 800416c:	4920      	ldr	r1, [pc, #128]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	610b      	str	r3, [r1, #16]
 8004172:	e014      	b.n	800419e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004174:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800417a:	4013      	ands	r3, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6892      	ldr	r2, [r2, #8]
 8004180:	0211      	lsls	r1, r2, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6952      	ldr	r2, [r2, #20]
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0652      	lsls	r2, r2, #25
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6852      	ldr	r2, [r2, #4]
 8004192:	3a01      	subs	r2, #1
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	430a      	orrs	r2, r1
 8004198:	4915      	ldr	r1, [pc, #84]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd f8b9 	bl	8001320 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b0:	e009      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041b2:	f7fd f8b5 	bl	8001320 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d902      	bls.n	80041c6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	73fb      	strb	r3, [r7, #15]
          break;
 80041c4:	e005      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0ef      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4903      	ldr	r1, [pc, #12]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	07ff800f 	.word	0x07ff800f
 80041f8:	ff9f800f 	.word	0xff9f800f
 80041fc:	f9ff800f 	.word	0xf9ff800f

08004200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800420e:	4b70      	ldr	r3, [pc, #448]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800421a:	4b6d      	ldr	r3, [pc, #436]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d103      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
       ||
 800422e:	2b00      	cmp	r3, #0
 8004230:	d13f      	bne.n	80042b2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e03c      	b.n	80042b2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d00c      	beq.n	800425a <RCCEx_PLLSAI2_Config+0x5a>
 8004240:	2b03      	cmp	r3, #3
 8004242:	d013      	beq.n	800426c <RCCEx_PLLSAI2_Config+0x6c>
 8004244:	2b01      	cmp	r3, #1
 8004246:	d120      	bne.n	800428a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004248:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11d      	bne.n	8004290 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e01a      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800425a:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426a:	e013      	b.n	8004294 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426c:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004278:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004288:	e006      	b.n	8004298 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      break;
 800428e:	e004      	b.n	800429a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004298:	bf00      	nop
    }

    if(status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80042a0:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f023 0203 	bic.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4948      	ldr	r1, [pc, #288]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8086 	bne.w	80043c6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042ba:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a44      	ldr	r2, [pc, #272]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fd f82b 	bl	8001320 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042cc:	e009      	b.n	80042e2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042ce:	f7fd f827 	bl	8001320 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d902      	bls.n	80042e2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	73fb      	strb	r3, [r7, #15]
        break;
 80042e0:	e005      	b.n	80042ee <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ef      	bne.n	80042ce <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d168      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042fa:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6892      	ldr	r2, [r2, #8]
 8004306:	0211      	lsls	r1, r2, #8
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68d2      	ldr	r2, [r2, #12]
 800430c:	06d2      	lsls	r2, r2, #27
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6852      	ldr	r2, [r2, #4]
 8004314:	3a01      	subs	r2, #1
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	430a      	orrs	r2, r1
 800431a:	492d      	ldr	r1, [pc, #180]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	614b      	str	r3, [r1, #20]
 8004320:	e02d      	b.n	800437e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d115      	bne.n	8004354 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	0211      	lsls	r1, r2, #8
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6912      	ldr	r2, [r2, #16]
 800433a:	0852      	lsrs	r2, r2, #1
 800433c:	3a01      	subs	r2, #1
 800433e:	0552      	lsls	r2, r2, #21
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6852      	ldr	r2, [r2, #4]
 8004346:	3a01      	subs	r2, #1
 8004348:	0112      	lsls	r2, r2, #4
 800434a:	430a      	orrs	r2, r1
 800434c:	4920      	ldr	r1, [pc, #128]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	614b      	str	r3, [r1, #20]
 8004352:	e014      	b.n	800437e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <RCCEx_PLLSAI2_Config+0x1dc>)
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	0211      	lsls	r1, r2, #8
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6952      	ldr	r2, [r2, #20]
 8004366:	0852      	lsrs	r2, r2, #1
 8004368:	3a01      	subs	r2, #1
 800436a:	0652      	lsls	r2, r2, #25
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6852      	ldr	r2, [r2, #4]
 8004372:	3a01      	subs	r2, #1
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	430a      	orrs	r2, r1
 8004378:	4915      	ldr	r1, [pc, #84]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800437a:	4313      	orrs	r3, r2
 800437c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fc ffc9 	bl	8001320 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004390:	e009      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004392:	f7fc ffc5 	bl	8001320 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d902      	bls.n	80043a6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	73fb      	strb	r3, [r7, #15]
          break;
 80043a4:	e005      	b.n	80043b2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ef      	beq.n	8004392 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	07ff800f 	.word	0x07ff800f
 80043d8:	ff9f800f 	.word	0xff9f800f
 80043dc:	f9ff800f 	.word	0xf9ff800f

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e049      	b.n	8004486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fdee 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 f9ee 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d001      	beq.n	80044a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e04f      	b.n	8004548 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_TIM_Base_Start_IT+0xc4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01d      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d018      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIM_Base_Start_IT+0xc8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_Base_Start_IT+0xcc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_TIM_Base_Start_IT+0xd4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0x76>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <HAL_TIM_Base_Start_IT+0xd8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d115      	bne.n	8004532 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <HAL_TIM_Base_Start_IT+0xdc>)
 800450e:	4013      	ands	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d015      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0xb4>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d011      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	e008      	b.n	8004544 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e000      	b.n	8004546 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40013400 	.word	0x40013400
 8004568:	40014000 	.word	0x40014000
 800456c:	00010007 	.word	0x00010007

08004570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b02      	cmp	r3, #2
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0202 	mvn.w	r2, #2
 800459c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f905 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8f7 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f908 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0204 	mvn.w	r2, #4
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8db 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8cd 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8de 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d122      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0208 	mvn.w	r2, #8
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2204      	movs	r2, #4
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8b1 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8a3 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8b4 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b10      	cmp	r3, #16
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0210 	mvn.w	r2, #16
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2208      	movs	r2, #8
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f887 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f879 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f88a 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10e      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0201 	mvn.w	r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc fbe0 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f914 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472e:	d10e      	bne.n	800474e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d107      	bne.n	800474e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f907 	bl	800495c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d10e      	bne.n	800477a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d107      	bne.n	800477a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f838 	bl	80047ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b20      	cmp	r3, #32
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0220 	mvn.w	r2, #32
 800479e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f8c7 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <TIM_Base_SetConfig+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <TIM_Base_SetConfig+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a11      	ldr	r2, [pc, #68]	; (8004928 <TIM_Base_SetConfig+0x128>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x12c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e042      	b.n	8004a08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fc fb4d 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2224      	movs	r2, #36	; 0x24
 800499e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8c4 	bl	8004b40 <UART_SetConfig>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb8a 	bl	80050e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fc11 	bl	8005228 <UART_CheckIdleState>
 8004a06:	4603      	mov	r3, r0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	f040 8084 	bne.w	8004b34 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_UART_Transmit+0x28>
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e07c      	b.n	8004b36 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Transmit+0x3a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e075      	b.n	8004b36 <HAL_UART_Transmit+0x126>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a62:	f7fc fc5d 	bl	8001320 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d108      	bne.n	8004a94 <HAL_UART_Transmit+0x84>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e003      	b.n	8004a9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004aa4:	e02d      	b.n	8004b02 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fc01 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e03a      	b.n	8004b36 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e008      	b.n	8004af0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1cb      	bne.n	8004aa6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2140      	movs	r1, #64	; 0x40
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fbcd 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e006      	b.n	8004b36 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004b44:	b088      	sub	sp, #32
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4bb1      	ldr	r3, [pc, #708]	; (8004e3c <UART_SetConfig+0x2fc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4aa6      	ldr	r2, [pc, #664]	; (8004e40 <UART_SetConfig+0x300>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f023 010f 	bic.w	r1, r3, #15
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a97      	ldr	r2, [pc, #604]	; (8004e44 <UART_SetConfig+0x304>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d121      	bne.n	8004c30 <UART_SetConfig+0xf0>
 8004bec:	4b96      	ldr	r3, [pc, #600]	; (8004e48 <UART_SetConfig+0x308>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d816      	bhi.n	8004c28 <UART_SetConfig+0xe8>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0xc0>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c1d 	.word	0x08004c1d
 8004c08:	08004c17 	.word	0x08004c17
 8004c0c:	08004c23 	.word	0x08004c23
 8004c10:	2301      	movs	r3, #1
 8004c12:	76fb      	strb	r3, [r7, #27]
 8004c14:	e0e8      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c16:	2302      	movs	r3, #2
 8004c18:	76fb      	strb	r3, [r7, #27]
 8004c1a:	e0e5      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	76fb      	strb	r3, [r7, #27]
 8004c20:	e0e2      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c22:	2308      	movs	r3, #8
 8004c24:	76fb      	strb	r3, [r7, #27]
 8004c26:	e0df      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	76fb      	strb	r3, [r7, #27]
 8004c2c:	bf00      	nop
 8004c2e:	e0db      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a85      	ldr	r2, [pc, #532]	; (8004e4c <UART_SetConfig+0x30c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d134      	bne.n	8004ca4 <UART_SetConfig+0x164>
 8004c3a:	4b83      	ldr	r3, [pc, #524]	; (8004e48 <UART_SetConfig+0x308>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d829      	bhi.n	8004c9c <UART_SetConfig+0x15c>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x110>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004c9d 	.word	0x08004c9d
 8004c58:	08004c9d 	.word	0x08004c9d
 8004c5c:	08004c9d 	.word	0x08004c9d
 8004c60:	08004c91 	.word	0x08004c91
 8004c64:	08004c9d 	.word	0x08004c9d
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004c9d 	.word	0x08004c9d
 8004c70:	08004c8b 	.word	0x08004c8b
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004c9d 	.word	0x08004c9d
 8004c80:	08004c97 	.word	0x08004c97
 8004c84:	2300      	movs	r3, #0
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	e0ae      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	76fb      	strb	r3, [r7, #27]
 8004c8e:	e0ab      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c90:	2304      	movs	r3, #4
 8004c92:	76fb      	strb	r3, [r7, #27]
 8004c94:	e0a8      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c96:	2308      	movs	r3, #8
 8004c98:	76fb      	strb	r3, [r7, #27]
 8004c9a:	e0a5      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	76fb      	strb	r3, [r7, #27]
 8004ca0:	bf00      	nop
 8004ca2:	e0a1      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a69      	ldr	r2, [pc, #420]	; (8004e50 <UART_SetConfig+0x310>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d120      	bne.n	8004cf0 <UART_SetConfig+0x1b0>
 8004cae:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <UART_SetConfig+0x308>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d00f      	beq.n	8004cdc <UART_SetConfig+0x19c>
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d802      	bhi.n	8004cc6 <UART_SetConfig+0x186>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <UART_SetConfig+0x190>
 8004cc4:	e010      	b.n	8004ce8 <UART_SetConfig+0x1a8>
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d005      	beq.n	8004cd6 <UART_SetConfig+0x196>
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d009      	beq.n	8004ce2 <UART_SetConfig+0x1a2>
 8004cce:	e00b      	b.n	8004ce8 <UART_SetConfig+0x1a8>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	e088      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	76fb      	strb	r3, [r7, #27]
 8004cda:	e085      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	76fb      	strb	r3, [r7, #27]
 8004ce0:	e082      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	76fb      	strb	r3, [r7, #27]
 8004ce6:	e07f      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	76fb      	strb	r3, [r7, #27]
 8004cec:	bf00      	nop
 8004cee:	e07b      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a57      	ldr	r2, [pc, #348]	; (8004e54 <UART_SetConfig+0x314>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d120      	bne.n	8004d3c <UART_SetConfig+0x1fc>
 8004cfa:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <UART_SetConfig+0x308>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d00f      	beq.n	8004d28 <UART_SetConfig+0x1e8>
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d802      	bhi.n	8004d12 <UART_SetConfig+0x1d2>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <UART_SetConfig+0x1dc>
 8004d10:	e010      	b.n	8004d34 <UART_SetConfig+0x1f4>
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d005      	beq.n	8004d22 <UART_SetConfig+0x1e2>
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d009      	beq.n	8004d2e <UART_SetConfig+0x1ee>
 8004d1a:	e00b      	b.n	8004d34 <UART_SetConfig+0x1f4>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	76fb      	strb	r3, [r7, #27]
 8004d20:	e062      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d22:	2302      	movs	r3, #2
 8004d24:	76fb      	strb	r3, [r7, #27]
 8004d26:	e05f      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	76fb      	strb	r3, [r7, #27]
 8004d2c:	e05c      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	76fb      	strb	r3, [r7, #27]
 8004d32:	e059      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d34:	2310      	movs	r3, #16
 8004d36:	76fb      	strb	r3, [r7, #27]
 8004d38:	bf00      	nop
 8004d3a:	e055      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a45      	ldr	r2, [pc, #276]	; (8004e58 <UART_SetConfig+0x318>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d124      	bne.n	8004d90 <UART_SetConfig+0x250>
 8004d46:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <UART_SetConfig+0x308>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d54:	d012      	beq.n	8004d7c <UART_SetConfig+0x23c>
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5a:	d802      	bhi.n	8004d62 <UART_SetConfig+0x222>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <UART_SetConfig+0x230>
 8004d60:	e012      	b.n	8004d88 <UART_SetConfig+0x248>
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d66:	d006      	beq.n	8004d76 <UART_SetConfig+0x236>
 8004d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6c:	d009      	beq.n	8004d82 <UART_SetConfig+0x242>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x248>
 8004d70:	2300      	movs	r3, #0
 8004d72:	76fb      	strb	r3, [r7, #27]
 8004d74:	e038      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d76:	2302      	movs	r3, #2
 8004d78:	76fb      	strb	r3, [r7, #27]
 8004d7a:	e035      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	76fb      	strb	r3, [r7, #27]
 8004d80:	e032      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d82:	2308      	movs	r3, #8
 8004d84:	76fb      	strb	r3, [r7, #27]
 8004d86:	e02f      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	bf00      	nop
 8004d8e:	e02b      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <UART_SetConfig+0x300>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d124      	bne.n	8004de4 <UART_SetConfig+0x2a4>
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <UART_SetConfig+0x308>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da8:	d012      	beq.n	8004dd0 <UART_SetConfig+0x290>
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d802      	bhi.n	8004db6 <UART_SetConfig+0x276>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <UART_SetConfig+0x284>
 8004db4:	e012      	b.n	8004ddc <UART_SetConfig+0x29c>
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d006      	beq.n	8004dca <UART_SetConfig+0x28a>
 8004dbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dc0:	d009      	beq.n	8004dd6 <UART_SetConfig+0x296>
 8004dc2:	e00b      	b.n	8004ddc <UART_SetConfig+0x29c>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e00e      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	76fb      	strb	r3, [r7, #27]
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	76fb      	strb	r3, [r7, #27]
 8004dd4:	e008      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	76fb      	strb	r3, [r7, #27]
 8004dda:	e005      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	76fb      	strb	r3, [r7, #27]
 8004de0:	bf00      	nop
 8004de2:	e001      	b.n	8004de8 <UART_SetConfig+0x2a8>
 8004de4:	2310      	movs	r3, #16
 8004de6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <UART_SetConfig+0x300>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f040 80a1 	bne.w	8004f36 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df4:	7efb      	ldrb	r3, [r7, #27]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d836      	bhi.n	8004e68 <UART_SetConfig+0x328>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x2c0>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e69 	.word	0x08004e69
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e69 	.word	0x08004e69
 8004e10:	08004e33 	.word	0x08004e33
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	08004e69 	.word	0x08004e69
 8004e20:	08004e61 	.word	0x08004e61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fc88 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6178      	str	r0, [r7, #20]
        break;
 8004e2a:	e022      	b.n	8004e72 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <UART_SetConfig+0x31c>)
 8004e2e:	617b      	str	r3, [r7, #20]
        break;
 8004e30:	e01f      	b.n	8004e72 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe fbed 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8004e36:	6178      	str	r0, [r7, #20]
        break;
 8004e38:	e01b      	b.n	8004e72 <UART_SetConfig+0x332>
 8004e3a:	bf00      	nop
 8004e3c:	cfff69f3 	.word	0xcfff69f3
 8004e40:	40008000 	.word	0x40008000
 8004e44:	40013800 	.word	0x40013800
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40004400 	.word	0x40004400
 8004e50:	40004800 	.word	0x40004800
 8004e54:	40004c00 	.word	0x40004c00
 8004e58:	40005000 	.word	0x40005000
 8004e5c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e64:	617b      	str	r3, [r7, #20]
        break;
 8004e66:	e004      	b.n	8004e72 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	76bb      	strb	r3, [r7, #26]
        break;
 8004e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 811d 	beq.w	80050b4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	4a97      	ldr	r2, [pc, #604]	; (80050dc <UART_SetConfig+0x59c>)
 8004e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e84:	461a      	mov	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d305      	bcc.n	8004eaa <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d902      	bls.n	8004eb0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	76bb      	strb	r3, [r7, #26]
 8004eae:	e101      	b.n	80050b4 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	4a87      	ldr	r2, [pc, #540]	; (80050dc <UART_SetConfig+0x59c>)
 8004ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f04f 0400 	mov.w	r4, #0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	f7fb f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	f04f 0400 	mov.w	r4, #0
 8004ee0:	0214      	lsls	r4, r2, #8
 8004ee2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004ee6:	020b      	lsls	r3, r1, #8
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6852      	ldr	r2, [r2, #4]
 8004eec:	0852      	lsrs	r2, r2, #1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	eb13 0b01 	adds.w	fp, r3, r1
 8004ef8:	eb44 0c02 	adc.w	ip, r4, r2
 8004efc:	4658      	mov	r0, fp
 8004efe:	4661      	mov	r1, ip
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	f7fb f9d0 	bl	80002b0 <__aeabi_uldivmod>
 8004f10:	4603      	mov	r3, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d308      	bcc.n	8004f30 <UART_SetConfig+0x3f0>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f24:	d204      	bcs.n	8004f30 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	e0c1      	b.n	80050b4 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	76bb      	strb	r3, [r7, #26]
 8004f34:	e0be      	b.n	80050b4 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	d164      	bne.n	800500a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004f40:	7efb      	ldrb	r3, [r7, #27]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d827      	bhi.n	8004f96 <UART_SetConfig+0x456>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0x40c>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08004f97 	.word	0x08004f97
 8004f5c:	08004f87 	.word	0x08004f87
 8004f60:	08004f97 	.word	0x08004f97
 8004f64:	08004f97 	.word	0x08004f97
 8004f68:	08004f97 	.word	0x08004f97
 8004f6c:	08004f8f 	.word	0x08004f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7fe fbe2 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8004f74:	6178      	str	r0, [r7, #20]
        break;
 8004f76:	e013      	b.n	8004fa0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f78:	f7fe fbf4 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8004f7c:	6178      	str	r0, [r7, #20]
        break;
 8004f7e:	e00f      	b.n	8004fa0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f80:	4b57      	ldr	r3, [pc, #348]	; (80050e0 <UART_SetConfig+0x5a0>)
 8004f82:	617b      	str	r3, [r7, #20]
        break;
 8004f84:	e00c      	b.n	8004fa0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f86:	f7fe fb43 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8004f8a:	6178      	str	r0, [r7, #20]
        break;
 8004f8c:	e008      	b.n	8004fa0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f92:	617b      	str	r3, [r7, #20]
        break;
 8004f94:	e004      	b.n	8004fa0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	76bb      	strb	r3, [r7, #26]
        break;
 8004f9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8086 	beq.w	80050b4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	4a4b      	ldr	r2, [pc, #300]	; (80050dc <UART_SetConfig+0x59c>)
 8004fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	005a      	lsls	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d916      	bls.n	8005004 <UART_SetConfig+0x4c4>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d212      	bcs.n	8005004 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f023 030f 	bic.w	r3, r3, #15
 8004fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	89fa      	ldrh	r2, [r7, #14]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	e057      	b.n	80050b4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	76bb      	strb	r3, [r7, #26]
 8005008:	e054      	b.n	80050b4 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800500a:	7efb      	ldrb	r3, [r7, #27]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d828      	bhi.n	8005062 <UART_SetConfig+0x522>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x4d8>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504d 	.word	0x0800504d
 8005024:	08005063 	.word	0x08005063
 8005028:	08005053 	.word	0x08005053
 800502c:	08005063 	.word	0x08005063
 8005030:	08005063 	.word	0x08005063
 8005034:	08005063 	.word	0x08005063
 8005038:	0800505b 	.word	0x0800505b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fe fb7c 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8005040:	6178      	str	r0, [r7, #20]
        break;
 8005042:	e013      	b.n	800506c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fe fb8e 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8005048:	6178      	str	r0, [r7, #20]
        break;
 800504a:	e00f      	b.n	800506c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <UART_SetConfig+0x5a0>)
 800504e:	617b      	str	r3, [r7, #20]
        break;
 8005050:	e00c      	b.n	800506c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005052:	f7fe fadd 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8005056:	6178      	str	r0, [r7, #20]
        break;
 8005058:	e008      	b.n	800506c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	617b      	str	r3, [r7, #20]
        break;
 8005060:	e004      	b.n	800506c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	76bb      	strb	r3, [r7, #26]
        break;
 800506a:	bf00      	nop
    }

    if (pclk != 0U)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	4a19      	ldr	r2, [pc, #100]	; (80050dc <UART_SetConfig+0x59c>)
 8005078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507c:	461a      	mov	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fbb3 f2f2 	udiv	r2, r3, r2
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	b29b      	uxth	r3, r3
 8005096:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d908      	bls.n	80050b0 <UART_SetConfig+0x570>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d204      	bcs.n	80050b0 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	60da      	str	r2, [r3, #12]
 80050ae:	e001      	b.n	80050b4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80050d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80050dc:	08005edc 	.word	0x08005edc
 80050e0:	00f42400 	.word	0x00f42400

080050e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01a      	beq.n	80051fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e2:	d10a      	bne.n	80051fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005238:	f7fc f872 	bl	8001320 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d10e      	bne.n	800526a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f82c 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e022      	b.n	80052b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d10e      	bne.n	8005296 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f816 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00c      	b.n	80052b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	e062      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d05e      	beq.n	8005390 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fc f825 	bl	8001320 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11d      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e045      	b.n	80053b0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02e      	beq.n	8005390 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005340:	d126      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800534a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800535a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e00f      	b.n	80053b0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d08d      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_UARTEx_DisableFifoMode+0x16>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e027      	b.n	800541e <HAL_UARTEx_DisableFifoMode+0x66>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2224      	movs	r2, #36	; 0x24
 80053da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800543e:	2302      	movs	r3, #2
 8005440:	e02d      	b.n	800549e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f850 	bl	8005524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e02d      	b.n	800551a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2224      	movs	r2, #36	; 0x24
 80054ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f812 	bl	8005524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	; 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800552c:	4a2f      	ldr	r2, [pc, #188]	; (80055ec <UARTEx_SetNbDataToProcess+0xc8>)
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005536:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800553a:	4a2d      	ldr	r2, [pc, #180]	; (80055f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005544:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554c:	2b00      	cmp	r3, #0
 800554e:	d108      	bne.n	8005562 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005560:	e03d      	b.n	80055de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005562:	2308      	movs	r3, #8
 8005564:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005566:	2308      	movs	r3, #8
 8005568:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	0e5b      	lsrs	r3, r3, #25
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	0f5b      	lsrs	r3, r3, #29
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800558a:	7fbb      	ldrb	r3, [r7, #30]
 800558c:	7f3a      	ldrb	r2, [r7, #28]
 800558e:	f107 0120 	add.w	r1, r7, #32
 8005592:	440a      	add	r2, r1
 8005594:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	7f3a      	ldrb	r2, [r7, #28]
 800559e:	f107 0120 	add.w	r1, r7, #32
 80055a2:	440a      	add	r2, r1
 80055a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80055a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80055b4:	7ffb      	ldrb	r3, [r7, #31]
 80055b6:	7f7a      	ldrb	r2, [r7, #29]
 80055b8:	f107 0120 	add.w	r1, r7, #32
 80055bc:	440a      	add	r2, r1
 80055be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	7f7a      	ldrb	r2, [r7, #29]
 80055c8:	f107 0120 	add.w	r1, r7, #32
 80055cc:	440a      	add	r2, r1
 80055ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80055d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055de:	bf00      	nop
 80055e0:	3724      	adds	r7, #36	; 0x24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	08005e84 	.word	0x08005e84
 80055f0:	08005e8c 	.word	0x08005e8c

080055f4 <__errno>:
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <__errno+0x8>)
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	2000000c 	.word	0x2000000c

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4e0d      	ldr	r6, [pc, #52]	; (8005638 <__libc_init_array+0x38>)
 8005604:	4c0d      	ldr	r4, [pc, #52]	; (800563c <__libc_init_array+0x3c>)
 8005606:	1ba4      	subs	r4, r4, r6
 8005608:	10a4      	asrs	r4, r4, #2
 800560a:	2500      	movs	r5, #0
 800560c:	42a5      	cmp	r5, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	4e0b      	ldr	r6, [pc, #44]	; (8005640 <__libc_init_array+0x40>)
 8005612:	4c0c      	ldr	r4, [pc, #48]	; (8005644 <__libc_init_array+0x44>)
 8005614:	f000 fc26 	bl	8005e64 <_init>
 8005618:	1ba4      	subs	r4, r4, r6
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	2500      	movs	r5, #0
 800561e:	42a5      	cmp	r5, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005628:	4798      	blx	r3
 800562a:	3501      	adds	r5, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005632:	4798      	blx	r3
 8005634:	3501      	adds	r5, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	08005f30 	.word	0x08005f30
 800563c:	08005f30 	.word	0x08005f30
 8005640:	08005f30 	.word	0x08005f30
 8005644:	08005f34 	.word	0x08005f34

08005648 <memset>:
 8005648:	4402      	add	r2, r0
 800564a:	4603      	mov	r3, r0
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	f803 1b01 	strb.w	r1, [r3], #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <siprintf>:
 8005658:	b40e      	push	{r1, r2, r3}
 800565a:	b500      	push	{lr}
 800565c:	b09c      	sub	sp, #112	; 0x70
 800565e:	ab1d      	add	r3, sp, #116	; 0x74
 8005660:	9002      	str	r0, [sp, #8]
 8005662:	9006      	str	r0, [sp, #24]
 8005664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005668:	4809      	ldr	r0, [pc, #36]	; (8005690 <siprintf+0x38>)
 800566a:	9107      	str	r1, [sp, #28]
 800566c:	9104      	str	r1, [sp, #16]
 800566e:	4909      	ldr	r1, [pc, #36]	; (8005694 <siprintf+0x3c>)
 8005670:	f853 2b04 	ldr.w	r2, [r3], #4
 8005674:	9105      	str	r1, [sp, #20]
 8005676:	6800      	ldr	r0, [r0, #0]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	a902      	add	r1, sp, #8
 800567c:	f000 f866 	bl	800574c <_svfiprintf_r>
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	b01c      	add	sp, #112	; 0x70
 8005688:	f85d eb04 	ldr.w	lr, [sp], #4
 800568c:	b003      	add	sp, #12
 800568e:	4770      	bx	lr
 8005690:	2000000c 	.word	0x2000000c
 8005694:	ffff0208 	.word	0xffff0208

08005698 <__ssputs_r>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	688e      	ldr	r6, [r1, #8]
 800569e:	429e      	cmp	r6, r3
 80056a0:	4682      	mov	sl, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4690      	mov	r8, r2
 80056a6:	4699      	mov	r9, r3
 80056a8:	d837      	bhi.n	800571a <__ssputs_r+0x82>
 80056aa:	898a      	ldrh	r2, [r1, #12]
 80056ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056b0:	d031      	beq.n	8005716 <__ssputs_r+0x7e>
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	6909      	ldr	r1, [r1, #16]
 80056b6:	1a6f      	subs	r7, r5, r1
 80056b8:	6965      	ldr	r5, [r4, #20]
 80056ba:	2302      	movs	r3, #2
 80056bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80056c4:	f109 0301 	add.w	r3, r9, #1
 80056c8:	443b      	add	r3, r7
 80056ca:	429d      	cmp	r5, r3
 80056cc:	bf38      	it	cc
 80056ce:	461d      	movcc	r5, r3
 80056d0:	0553      	lsls	r3, r2, #21
 80056d2:	d530      	bpl.n	8005736 <__ssputs_r+0x9e>
 80056d4:	4629      	mov	r1, r5
 80056d6:	f000 fb2b 	bl	8005d30 <_malloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	b950      	cbnz	r0, 80056f4 <__ssputs_r+0x5c>
 80056de:	230c      	movs	r3, #12
 80056e0:	f8ca 3000 	str.w	r3, [sl]
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	463a      	mov	r2, r7
 80056f6:	6921      	ldr	r1, [r4, #16]
 80056f8:	f000 faa8 	bl	8005c4c <memcpy>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	6126      	str	r6, [r4, #16]
 800570a:	6165      	str	r5, [r4, #20]
 800570c:	443e      	add	r6, r7
 800570e:	1bed      	subs	r5, r5, r7
 8005710:	6026      	str	r6, [r4, #0]
 8005712:	60a5      	str	r5, [r4, #8]
 8005714:	464e      	mov	r6, r9
 8005716:	454e      	cmp	r6, r9
 8005718:	d900      	bls.n	800571c <__ssputs_r+0x84>
 800571a:	464e      	mov	r6, r9
 800571c:	4632      	mov	r2, r6
 800571e:	4641      	mov	r1, r8
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	f000 fa9e 	bl	8005c62 <memmove>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	1b9b      	subs	r3, r3, r6
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	441e      	add	r6, r3
 8005730:	6026      	str	r6, [r4, #0]
 8005732:	2000      	movs	r0, #0
 8005734:	e7dc      	b.n	80056f0 <__ssputs_r+0x58>
 8005736:	462a      	mov	r2, r5
 8005738:	f000 fb54 	bl	8005de4 <_realloc_r>
 800573c:	4606      	mov	r6, r0
 800573e:	2800      	cmp	r0, #0
 8005740:	d1e2      	bne.n	8005708 <__ssputs_r+0x70>
 8005742:	6921      	ldr	r1, [r4, #16]
 8005744:	4650      	mov	r0, sl
 8005746:	f000 faa5 	bl	8005c94 <_free_r>
 800574a:	e7c8      	b.n	80056de <__ssputs_r+0x46>

0800574c <_svfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	461d      	mov	r5, r3
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061f      	lsls	r7, r3, #24
 8005756:	b09d      	sub	sp, #116	; 0x74
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4616      	mov	r6, r2
 800575e:	d50f      	bpl.n	8005780 <_svfiprintf_r+0x34>
 8005760:	690b      	ldr	r3, [r1, #16]
 8005762:	b96b      	cbnz	r3, 8005780 <_svfiprintf_r+0x34>
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	f000 fae3 	bl	8005d30 <_malloc_r>
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	6120      	str	r0, [r4, #16]
 800576e:	b928      	cbnz	r0, 800577c <_svfiprintf_r+0x30>
 8005770:	230c      	movs	r3, #12
 8005772:	f8c8 3000 	str.w	r3, [r8]
 8005776:	f04f 30ff 	mov.w	r0, #4294967295
 800577a:	e0c8      	b.n	800590e <_svfiprintf_r+0x1c2>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	6163      	str	r3, [r4, #20]
 8005780:	2300      	movs	r3, #0
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
 8005784:	2320      	movs	r3, #32
 8005786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800578a:	2330      	movs	r3, #48	; 0x30
 800578c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005790:	9503      	str	r5, [sp, #12]
 8005792:	f04f 0b01 	mov.w	fp, #1
 8005796:	4637      	mov	r7, r6
 8005798:	463d      	mov	r5, r7
 800579a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800579e:	b10b      	cbz	r3, 80057a4 <_svfiprintf_r+0x58>
 80057a0:	2b25      	cmp	r3, #37	; 0x25
 80057a2:	d13e      	bne.n	8005822 <_svfiprintf_r+0xd6>
 80057a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80057a8:	d00b      	beq.n	80057c2 <_svfiprintf_r+0x76>
 80057aa:	4653      	mov	r3, sl
 80057ac:	4632      	mov	r2, r6
 80057ae:	4621      	mov	r1, r4
 80057b0:	4640      	mov	r0, r8
 80057b2:	f7ff ff71 	bl	8005698 <__ssputs_r>
 80057b6:	3001      	adds	r0, #1
 80057b8:	f000 80a4 	beq.w	8005904 <_svfiprintf_r+0x1b8>
 80057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057be:	4453      	add	r3, sl
 80057c0:	9309      	str	r3, [sp, #36]	; 0x24
 80057c2:	783b      	ldrb	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 809d 	beq.w	8005904 <_svfiprintf_r+0x1b8>
 80057ca:	2300      	movs	r3, #0
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057dc:	931a      	str	r3, [sp, #104]	; 0x68
 80057de:	462f      	mov	r7, r5
 80057e0:	2205      	movs	r2, #5
 80057e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80057e6:	4850      	ldr	r0, [pc, #320]	; (8005928 <_svfiprintf_r+0x1dc>)
 80057e8:	f7fa fd12 	bl	8000210 <memchr>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	b9d0      	cbnz	r0, 8005826 <_svfiprintf_r+0xda>
 80057f0:	06d9      	lsls	r1, r3, #27
 80057f2:	bf44      	itt	mi
 80057f4:	2220      	movmi	r2, #32
 80057f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057fa:	071a      	lsls	r2, r3, #28
 80057fc:	bf44      	itt	mi
 80057fe:	222b      	movmi	r2, #43	; 0x2b
 8005800:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005804:	782a      	ldrb	r2, [r5, #0]
 8005806:	2a2a      	cmp	r2, #42	; 0x2a
 8005808:	d015      	beq.n	8005836 <_svfiprintf_r+0xea>
 800580a:	9a07      	ldr	r2, [sp, #28]
 800580c:	462f      	mov	r7, r5
 800580e:	2000      	movs	r0, #0
 8005810:	250a      	movs	r5, #10
 8005812:	4639      	mov	r1, r7
 8005814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005818:	3b30      	subs	r3, #48	; 0x30
 800581a:	2b09      	cmp	r3, #9
 800581c:	d94d      	bls.n	80058ba <_svfiprintf_r+0x16e>
 800581e:	b1b8      	cbz	r0, 8005850 <_svfiprintf_r+0x104>
 8005820:	e00f      	b.n	8005842 <_svfiprintf_r+0xf6>
 8005822:	462f      	mov	r7, r5
 8005824:	e7b8      	b.n	8005798 <_svfiprintf_r+0x4c>
 8005826:	4a40      	ldr	r2, [pc, #256]	; (8005928 <_svfiprintf_r+0x1dc>)
 8005828:	1a80      	subs	r0, r0, r2
 800582a:	fa0b f000 	lsl.w	r0, fp, r0
 800582e:	4318      	orrs	r0, r3
 8005830:	9004      	str	r0, [sp, #16]
 8005832:	463d      	mov	r5, r7
 8005834:	e7d3      	b.n	80057de <_svfiprintf_r+0x92>
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	1d11      	adds	r1, r2, #4
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	9103      	str	r1, [sp, #12]
 800583e:	2a00      	cmp	r2, #0
 8005840:	db01      	blt.n	8005846 <_svfiprintf_r+0xfa>
 8005842:	9207      	str	r2, [sp, #28]
 8005844:	e004      	b.n	8005850 <_svfiprintf_r+0x104>
 8005846:	4252      	negs	r2, r2
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	9207      	str	r2, [sp, #28]
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	783b      	ldrb	r3, [r7, #0]
 8005852:	2b2e      	cmp	r3, #46	; 0x2e
 8005854:	d10c      	bne.n	8005870 <_svfiprintf_r+0x124>
 8005856:	787b      	ldrb	r3, [r7, #1]
 8005858:	2b2a      	cmp	r3, #42	; 0x2a
 800585a:	d133      	bne.n	80058c4 <_svfiprintf_r+0x178>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	9203      	str	r2, [sp, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	bfb8      	it	lt
 8005868:	f04f 33ff 	movlt.w	r3, #4294967295
 800586c:	3702      	adds	r7, #2
 800586e:	9305      	str	r3, [sp, #20]
 8005870:	4d2e      	ldr	r5, [pc, #184]	; (800592c <_svfiprintf_r+0x1e0>)
 8005872:	7839      	ldrb	r1, [r7, #0]
 8005874:	2203      	movs	r2, #3
 8005876:	4628      	mov	r0, r5
 8005878:	f7fa fcca 	bl	8000210 <memchr>
 800587c:	b138      	cbz	r0, 800588e <_svfiprintf_r+0x142>
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	1b40      	subs	r0, r0, r5
 8005882:	fa03 f000 	lsl.w	r0, r3, r0
 8005886:	9b04      	ldr	r3, [sp, #16]
 8005888:	4303      	orrs	r3, r0
 800588a:	3701      	adds	r7, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	7839      	ldrb	r1, [r7, #0]
 8005890:	4827      	ldr	r0, [pc, #156]	; (8005930 <_svfiprintf_r+0x1e4>)
 8005892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005896:	2206      	movs	r2, #6
 8005898:	1c7e      	adds	r6, r7, #1
 800589a:	f7fa fcb9 	bl	8000210 <memchr>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d038      	beq.n	8005914 <_svfiprintf_r+0x1c8>
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <_svfiprintf_r+0x1e8>)
 80058a4:	bb13      	cbnz	r3, 80058ec <_svfiprintf_r+0x1a0>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3307      	adds	r3, #7
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	3308      	adds	r3, #8
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b4:	444b      	add	r3, r9
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	e76d      	b.n	8005796 <_svfiprintf_r+0x4a>
 80058ba:	fb05 3202 	mla	r2, r5, r2, r3
 80058be:	2001      	movs	r0, #1
 80058c0:	460f      	mov	r7, r1
 80058c2:	e7a6      	b.n	8005812 <_svfiprintf_r+0xc6>
 80058c4:	2300      	movs	r3, #0
 80058c6:	3701      	adds	r7, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	4619      	mov	r1, r3
 80058cc:	250a      	movs	r5, #10
 80058ce:	4638      	mov	r0, r7
 80058d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d4:	3a30      	subs	r2, #48	; 0x30
 80058d6:	2a09      	cmp	r2, #9
 80058d8:	d903      	bls.n	80058e2 <_svfiprintf_r+0x196>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0c8      	beq.n	8005870 <_svfiprintf_r+0x124>
 80058de:	9105      	str	r1, [sp, #20]
 80058e0:	e7c6      	b.n	8005870 <_svfiprintf_r+0x124>
 80058e2:	fb05 2101 	mla	r1, r5, r1, r2
 80058e6:	2301      	movs	r3, #1
 80058e8:	4607      	mov	r7, r0
 80058ea:	e7f0      	b.n	80058ce <_svfiprintf_r+0x182>
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4622      	mov	r2, r4
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_svfiprintf_r+0x1ec>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4640      	mov	r0, r8
 80058f8:	f3af 8000 	nop.w
 80058fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005900:	4681      	mov	r9, r0
 8005902:	d1d6      	bne.n	80058b2 <_svfiprintf_r+0x166>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	065b      	lsls	r3, r3, #25
 8005908:	f53f af35 	bmi.w	8005776 <_svfiprintf_r+0x2a>
 800590c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590e:	b01d      	add	sp, #116	; 0x74
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	ab03      	add	r3, sp, #12
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	4622      	mov	r2, r4
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <_svfiprintf_r+0x1ec>)
 800591c:	a904      	add	r1, sp, #16
 800591e:	4640      	mov	r0, r8
 8005920:	f000 f882 	bl	8005a28 <_printf_i>
 8005924:	e7ea      	b.n	80058fc <_svfiprintf_r+0x1b0>
 8005926:	bf00      	nop
 8005928:	08005ef4 	.word	0x08005ef4
 800592c:	08005efa 	.word	0x08005efa
 8005930:	08005efe 	.word	0x08005efe
 8005934:	00000000 	.word	0x00000000
 8005938:	08005699 	.word	0x08005699

0800593c <_printf_common>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	4691      	mov	r9, r2
 8005942:	461f      	mov	r7, r3
 8005944:	688a      	ldr	r2, [r1, #8]
 8005946:	690b      	ldr	r3, [r1, #16]
 8005948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800594c:	4293      	cmp	r3, r2
 800594e:	bfb8      	it	lt
 8005950:	4613      	movlt	r3, r2
 8005952:	f8c9 3000 	str.w	r3, [r9]
 8005956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800595a:	4606      	mov	r6, r0
 800595c:	460c      	mov	r4, r1
 800595e:	b112      	cbz	r2, 8005966 <_printf_common+0x2a>
 8005960:	3301      	adds	r3, #1
 8005962:	f8c9 3000 	str.w	r3, [r9]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	0699      	lsls	r1, r3, #26
 800596a:	bf42      	ittt	mi
 800596c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005970:	3302      	addmi	r3, #2
 8005972:	f8c9 3000 	strmi.w	r3, [r9]
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	f015 0506 	ands.w	r5, r5, #6
 800597c:	d107      	bne.n	800598e <_printf_common+0x52>
 800597e:	f104 0a19 	add.w	sl, r4, #25
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	f8d9 2000 	ldr.w	r2, [r9]
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	42ab      	cmp	r3, r5
 800598c:	dc28      	bgt.n	80059e0 <_printf_common+0xa4>
 800598e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	3300      	adds	r3, #0
 8005996:	bf18      	it	ne
 8005998:	2301      	movne	r3, #1
 800599a:	0692      	lsls	r2, r2, #26
 800599c:	d42d      	bmi.n	80059fa <_printf_common+0xbe>
 800599e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a2:	4639      	mov	r1, r7
 80059a4:	4630      	mov	r0, r6
 80059a6:	47c0      	blx	r8
 80059a8:	3001      	adds	r0, #1
 80059aa:	d020      	beq.n	80059ee <_printf_common+0xb2>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	68e5      	ldr	r5, [r4, #12]
 80059b0:	f8d9 2000 	ldr.w	r2, [r9]
 80059b4:	f003 0306 	and.w	r3, r3, #6
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	bf08      	it	eq
 80059bc:	1aad      	subeq	r5, r5, r2
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	341a      	adds	r4, #26
 80059d8:	454d      	cmp	r5, r9
 80059da:	d11a      	bne.n	8005a12 <_printf_common+0xd6>
 80059dc:	2000      	movs	r0, #0
 80059de:	e008      	b.n	80059f2 <_printf_common+0xb6>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4652      	mov	r2, sl
 80059e4:	4639      	mov	r1, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d103      	bne.n	80059f6 <_printf_common+0xba>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7c3      	b.n	8005982 <_printf_common+0x46>
 80059fa:	18e1      	adds	r1, r4, r3
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	2030      	movs	r0, #48	; 0x30
 8005a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a04:	4422      	add	r2, r4
 8005a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a0e:	3302      	adds	r3, #2
 8005a10:	e7c5      	b.n	800599e <_printf_common+0x62>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4622      	mov	r2, r4
 8005a16:	4639      	mov	r1, r7
 8005a18:	4630      	mov	r0, r6
 8005a1a:	47c0      	blx	r8
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d0e6      	beq.n	80059ee <_printf_common+0xb2>
 8005a20:	f109 0901 	add.w	r9, r9, #1
 8005a24:	e7d8      	b.n	80059d8 <_printf_common+0x9c>
	...

08005a28 <_printf_i>:
 8005a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a30:	460c      	mov	r4, r1
 8005a32:	7e09      	ldrb	r1, [r1, #24]
 8005a34:	b085      	sub	sp, #20
 8005a36:	296e      	cmp	r1, #110	; 0x6e
 8005a38:	4617      	mov	r7, r2
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	4698      	mov	r8, r3
 8005a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a40:	f000 80b3 	beq.w	8005baa <_printf_i+0x182>
 8005a44:	d822      	bhi.n	8005a8c <_printf_i+0x64>
 8005a46:	2963      	cmp	r1, #99	; 0x63
 8005a48:	d036      	beq.n	8005ab8 <_printf_i+0x90>
 8005a4a:	d80a      	bhi.n	8005a62 <_printf_i+0x3a>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	f000 80b9 	beq.w	8005bc4 <_printf_i+0x19c>
 8005a52:	2958      	cmp	r1, #88	; 0x58
 8005a54:	f000 8083 	beq.w	8005b5e <_printf_i+0x136>
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a60:	e032      	b.n	8005ac8 <_printf_i+0xa0>
 8005a62:	2964      	cmp	r1, #100	; 0x64
 8005a64:	d001      	beq.n	8005a6a <_printf_i+0x42>
 8005a66:	2969      	cmp	r1, #105	; 0x69
 8005a68:	d1f6      	bne.n	8005a58 <_printf_i+0x30>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	6813      	ldr	r3, [r2, #0]
 8005a6e:	0605      	lsls	r5, r0, #24
 8005a70:	f103 0104 	add.w	r1, r3, #4
 8005a74:	d52a      	bpl.n	8005acc <_printf_i+0xa4>
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da03      	bge.n	8005a86 <_printf_i+0x5e>
 8005a7e:	222d      	movs	r2, #45	; 0x2d
 8005a80:	425b      	negs	r3, r3
 8005a82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a86:	486f      	ldr	r0, [pc, #444]	; (8005c44 <_printf_i+0x21c>)
 8005a88:	220a      	movs	r2, #10
 8005a8a:	e039      	b.n	8005b00 <_printf_i+0xd8>
 8005a8c:	2973      	cmp	r1, #115	; 0x73
 8005a8e:	f000 809d 	beq.w	8005bcc <_printf_i+0x1a4>
 8005a92:	d808      	bhi.n	8005aa6 <_printf_i+0x7e>
 8005a94:	296f      	cmp	r1, #111	; 0x6f
 8005a96:	d020      	beq.n	8005ada <_printf_i+0xb2>
 8005a98:	2970      	cmp	r1, #112	; 0x70
 8005a9a:	d1dd      	bne.n	8005a58 <_printf_i+0x30>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	e003      	b.n	8005aae <_printf_i+0x86>
 8005aa6:	2975      	cmp	r1, #117	; 0x75
 8005aa8:	d017      	beq.n	8005ada <_printf_i+0xb2>
 8005aaa:	2978      	cmp	r1, #120	; 0x78
 8005aac:	d1d4      	bne.n	8005a58 <_printf_i+0x30>
 8005aae:	2378      	movs	r3, #120	; 0x78
 8005ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab4:	4864      	ldr	r0, [pc, #400]	; (8005c48 <_printf_i+0x220>)
 8005ab6:	e055      	b.n	8005b64 <_printf_i+0x13c>
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6011      	str	r1, [r2, #0]
 8005ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e08c      	b.n	8005be6 <_printf_i+0x1be>
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6011      	str	r1, [r2, #0]
 8005ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ad4:	bf18      	it	ne
 8005ad6:	b21b      	sxthne	r3, r3
 8005ad8:	e7cf      	b.n	8005a7a <_printf_i+0x52>
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	6825      	ldr	r5, [r4, #0]
 8005ade:	1d18      	adds	r0, r3, #4
 8005ae0:	6010      	str	r0, [r2, #0]
 8005ae2:	0628      	lsls	r0, r5, #24
 8005ae4:	d501      	bpl.n	8005aea <_printf_i+0xc2>
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <_printf_i+0xc8>
 8005aea:	0668      	lsls	r0, r5, #25
 8005aec:	d5fb      	bpl.n	8005ae6 <_printf_i+0xbe>
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	4854      	ldr	r0, [pc, #336]	; (8005c44 <_printf_i+0x21c>)
 8005af2:	296f      	cmp	r1, #111	; 0x6f
 8005af4:	bf14      	ite	ne
 8005af6:	220a      	movne	r2, #10
 8005af8:	2208      	moveq	r2, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b00:	6865      	ldr	r5, [r4, #4]
 8005b02:	60a5      	str	r5, [r4, #8]
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	f2c0 8095 	blt.w	8005c34 <_printf_i+0x20c>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	f021 0104 	bic.w	r1, r1, #4
 8005b10:	6021      	str	r1, [r4, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13d      	bne.n	8005b92 <_printf_i+0x16a>
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	f040 808e 	bne.w	8005c38 <_printf_i+0x210>
 8005b1c:	4665      	mov	r5, ip
 8005b1e:	2a08      	cmp	r2, #8
 8005b20:	d10b      	bne.n	8005b3a <_printf_i+0x112>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	07db      	lsls	r3, r3, #31
 8005b26:	d508      	bpl.n	8005b3a <_printf_i+0x112>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bfde      	ittt	le
 8005b30:	2330      	movle	r3, #48	; 0x30
 8005b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b3a:	ebac 0305 	sub.w	r3, ip, r5
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	f8cd 8000 	str.w	r8, [sp]
 8005b44:	463b      	mov	r3, r7
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff fef6 	bl	800593c <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14d      	bne.n	8005bf0 <_printf_i+0x1c8>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b005      	add	sp, #20
 8005b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	4839      	ldr	r0, [pc, #228]	; (8005c44 <_printf_i+0x21c>)
 8005b60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	1d1d      	adds	r5, r3, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6015      	str	r5, [r2, #0]
 8005b6e:	060a      	lsls	r2, r1, #24
 8005b70:	d50b      	bpl.n	8005b8a <_printf_i+0x162>
 8005b72:	07ca      	lsls	r2, r1, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f041 0120 	orrmi.w	r1, r1, #32
 8005b7a:	6021      	strmi	r1, [r4, #0]
 8005b7c:	b91b      	cbnz	r3, 8005b86 <_printf_i+0x15e>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	f022 0220 	bic.w	r2, r2, #32
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	2210      	movs	r2, #16
 8005b88:	e7b7      	b.n	8005afa <_printf_i+0xd2>
 8005b8a:	064d      	lsls	r5, r1, #25
 8005b8c:	bf48      	it	mi
 8005b8e:	b29b      	uxthmi	r3, r3
 8005b90:	e7ef      	b.n	8005b72 <_printf_i+0x14a>
 8005b92:	4665      	mov	r5, ip
 8005b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b98:	fb02 3311 	mls	r3, r2, r1, r3
 8005b9c:	5cc3      	ldrb	r3, [r0, r3]
 8005b9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f5      	bne.n	8005b94 <_printf_i+0x16c>
 8005ba8:	e7b9      	b.n	8005b1e <_printf_i+0xf6>
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	6825      	ldr	r5, [r4, #0]
 8005bae:	6961      	ldr	r1, [r4, #20]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6010      	str	r0, [r2, #0]
 8005bb4:	0628      	lsls	r0, r5, #24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	d501      	bpl.n	8005bbe <_printf_i+0x196>
 8005bba:	6019      	str	r1, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <_printf_i+0x19c>
 8005bbe:	066a      	lsls	r2, r5, #25
 8005bc0:	d5fb      	bpl.n	8005bba <_printf_i+0x192>
 8005bc2:	8019      	strh	r1, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	4665      	mov	r5, ip
 8005bca:	e7b9      	b.n	8005b40 <_printf_i+0x118>
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	681d      	ldr	r5, [r3, #0]
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7fa fb19 	bl	8000210 <memchr>
 8005bde:	b108      	cbz	r0, 8005be4 <_printf_i+0x1bc>
 8005be0:	1b40      	subs	r0, r0, r5
 8005be2:	6060      	str	r0, [r4, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	2300      	movs	r3, #0
 8005bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bee:	e7a7      	b.n	8005b40 <_printf_i+0x118>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0aa      	beq.n	8005b54 <_printf_i+0x12c>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	079b      	lsls	r3, r3, #30
 8005c02:	d413      	bmi.n	8005c2c <_printf_i+0x204>
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	4298      	cmp	r0, r3
 8005c0a:	bfb8      	it	lt
 8005c0c:	4618      	movlt	r0, r3
 8005c0e:	e7a3      	b.n	8005b58 <_printf_i+0x130>
 8005c10:	2301      	movs	r3, #1
 8005c12:	464a      	mov	r2, r9
 8005c14:	4639      	mov	r1, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d09a      	beq.n	8005b54 <_printf_i+0x12c>
 8005c1e:	3501      	adds	r5, #1
 8005c20:	68e3      	ldr	r3, [r4, #12]
 8005c22:	9a03      	ldr	r2, [sp, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	42ab      	cmp	r3, r5
 8005c28:	dcf2      	bgt.n	8005c10 <_printf_i+0x1e8>
 8005c2a:	e7eb      	b.n	8005c04 <_printf_i+0x1dc>
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	f104 0919 	add.w	r9, r4, #25
 8005c32:	e7f5      	b.n	8005c20 <_printf_i+0x1f8>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ac      	bne.n	8005b92 <_printf_i+0x16a>
 8005c38:	7803      	ldrb	r3, [r0, #0]
 8005c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c42:	e76c      	b.n	8005b1e <_printf_i+0xf6>
 8005c44:	08005f05 	.word	0x08005f05
 8005c48:	08005f16 	.word	0x08005f16

08005c4c <memcpy>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	1e43      	subs	r3, r0, #1
 8005c50:	440a      	add	r2, r1
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d100      	bne.n	8005c58 <memcpy+0xc>
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c60:	e7f7      	b.n	8005c52 <memcpy+0x6>

08005c62 <memmove>:
 8005c62:	4288      	cmp	r0, r1
 8005c64:	b510      	push	{r4, lr}
 8005c66:	eb01 0302 	add.w	r3, r1, r2
 8005c6a:	d807      	bhi.n	8005c7c <memmove+0x1a>
 8005c6c:	1e42      	subs	r2, r0, #1
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	d00a      	beq.n	8005c88 <memmove+0x26>
 8005c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c7a:	e7f8      	b.n	8005c6e <memmove+0xc>
 8005c7c:	4283      	cmp	r3, r0
 8005c7e:	d9f5      	bls.n	8005c6c <memmove+0xa>
 8005c80:	1881      	adds	r1, r0, r2
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	42d3      	cmn	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memmove+0x28>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c92:	e7f7      	b.n	8005c84 <memmove+0x22>

08005c94 <_free_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4605      	mov	r5, r0
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	d045      	beq.n	8005d28 <_free_r+0x94>
 8005c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca0:	1f0c      	subs	r4, r1, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bfb8      	it	lt
 8005ca6:	18e4      	addlt	r4, r4, r3
 8005ca8:	f000 f8d2 	bl	8005e50 <__malloc_lock>
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <_free_r+0x98>)
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	b933      	cbnz	r3, 8005cc2 <_free_r+0x2e>
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6014      	str	r4, [r2, #0]
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cbe:	f000 b8c8 	b.w	8005e52 <__malloc_unlock>
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	d90c      	bls.n	8005ce0 <_free_r+0x4c>
 8005cc6:	6821      	ldr	r1, [r4, #0]
 8005cc8:	1862      	adds	r2, r4, r1
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bf04      	itt	eq
 8005cce:	681a      	ldreq	r2, [r3, #0]
 8005cd0:	685b      	ldreq	r3, [r3, #4]
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	bf04      	itt	eq
 8005cd6:	1852      	addeq	r2, r2, r1
 8005cd8:	6022      	streq	r2, [r4, #0]
 8005cda:	6004      	str	r4, [r0, #0]
 8005cdc:	e7ec      	b.n	8005cb8 <_free_r+0x24>
 8005cde:	4613      	mov	r3, r2
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	b10a      	cbz	r2, 8005ce8 <_free_r+0x54>
 8005ce4:	42a2      	cmp	r2, r4
 8005ce6:	d9fa      	bls.n	8005cde <_free_r+0x4a>
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	1858      	adds	r0, r3, r1
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d10b      	bne.n	8005d08 <_free_r+0x74>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	4401      	add	r1, r0
 8005cf4:	1858      	adds	r0, r3, r1
 8005cf6:	4282      	cmp	r2, r0
 8005cf8:	6019      	str	r1, [r3, #0]
 8005cfa:	d1dd      	bne.n	8005cb8 <_free_r+0x24>
 8005cfc:	6810      	ldr	r0, [r2, #0]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	4401      	add	r1, r0
 8005d04:	6019      	str	r1, [r3, #0]
 8005d06:	e7d7      	b.n	8005cb8 <_free_r+0x24>
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x7c>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	e7d3      	b.n	8005cb8 <_free_r+0x24>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	1821      	adds	r1, r4, r0
 8005d14:	428a      	cmp	r2, r1
 8005d16:	bf04      	itt	eq
 8005d18:	6811      	ldreq	r1, [r2, #0]
 8005d1a:	6852      	ldreq	r2, [r2, #4]
 8005d1c:	6062      	str	r2, [r4, #4]
 8005d1e:	bf04      	itt	eq
 8005d20:	1809      	addeq	r1, r1, r0
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	605c      	str	r4, [r3, #4]
 8005d26:	e7c7      	b.n	8005cb8 <_free_r+0x24>
 8005d28:	bd38      	pop	{r3, r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000094 	.word	0x20000094

08005d30 <_malloc_r>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	1ccd      	adds	r5, r1, #3
 8005d34:	f025 0503 	bic.w	r5, r5, #3
 8005d38:	3508      	adds	r5, #8
 8005d3a:	2d0c      	cmp	r5, #12
 8005d3c:	bf38      	it	cc
 8005d3e:	250c      	movcc	r5, #12
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	db01      	blt.n	8005d4a <_malloc_r+0x1a>
 8005d46:	42a9      	cmp	r1, r5
 8005d48:	d903      	bls.n	8005d52 <_malloc_r+0x22>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	2000      	movs	r0, #0
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	f000 f87d 	bl	8005e50 <__malloc_lock>
 8005d56:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <_malloc_r+0xac>)
 8005d58:	6814      	ldr	r4, [r2, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	b991      	cbnz	r1, 8005d84 <_malloc_r+0x54>
 8005d5e:	4c20      	ldr	r4, [pc, #128]	; (8005de0 <_malloc_r+0xb0>)
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	b91b      	cbnz	r3, 8005d6c <_malloc_r+0x3c>
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f863 	bl	8005e30 <_sbrk_r>
 8005d6a:	6020      	str	r0, [r4, #0]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 f85e 	bl	8005e30 <_sbrk_r>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d124      	bne.n	8005dc2 <_malloc_r+0x92>
 8005d78:	230c      	movs	r3, #12
 8005d7a:	6033      	str	r3, [r6, #0]
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f868 	bl	8005e52 <__malloc_unlock>
 8005d82:	e7e4      	b.n	8005d4e <_malloc_r+0x1e>
 8005d84:	680b      	ldr	r3, [r1, #0]
 8005d86:	1b5b      	subs	r3, r3, r5
 8005d88:	d418      	bmi.n	8005dbc <_malloc_r+0x8c>
 8005d8a:	2b0b      	cmp	r3, #11
 8005d8c:	d90f      	bls.n	8005dae <_malloc_r+0x7e>
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	50cd      	str	r5, [r1, r3]
 8005d92:	18cc      	adds	r4, r1, r3
 8005d94:	4630      	mov	r0, r6
 8005d96:	f000 f85c 	bl	8005e52 <__malloc_unlock>
 8005d9a:	f104 000b 	add.w	r0, r4, #11
 8005d9e:	1d23      	adds	r3, r4, #4
 8005da0:	f020 0007 	bic.w	r0, r0, #7
 8005da4:	1ac3      	subs	r3, r0, r3
 8005da6:	d0d3      	beq.n	8005d50 <_malloc_r+0x20>
 8005da8:	425a      	negs	r2, r3
 8005daa:	50e2      	str	r2, [r4, r3]
 8005dac:	e7d0      	b.n	8005d50 <_malloc_r+0x20>
 8005dae:	428c      	cmp	r4, r1
 8005db0:	684b      	ldr	r3, [r1, #4]
 8005db2:	bf16      	itet	ne
 8005db4:	6063      	strne	r3, [r4, #4]
 8005db6:	6013      	streq	r3, [r2, #0]
 8005db8:	460c      	movne	r4, r1
 8005dba:	e7eb      	b.n	8005d94 <_malloc_r+0x64>
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	6849      	ldr	r1, [r1, #4]
 8005dc0:	e7cc      	b.n	8005d5c <_malloc_r+0x2c>
 8005dc2:	1cc4      	adds	r4, r0, #3
 8005dc4:	f024 0403 	bic.w	r4, r4, #3
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d005      	beq.n	8005dd8 <_malloc_r+0xa8>
 8005dcc:	1a21      	subs	r1, r4, r0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 f82e 	bl	8005e30 <_sbrk_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d0cf      	beq.n	8005d78 <_malloc_r+0x48>
 8005dd8:	6025      	str	r5, [r4, #0]
 8005dda:	e7db      	b.n	8005d94 <_malloc_r+0x64>
 8005ddc:	20000094 	.word	0x20000094
 8005de0:	20000098 	.word	0x20000098

08005de4 <_realloc_r>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	4607      	mov	r7, r0
 8005de8:	4614      	mov	r4, r2
 8005dea:	460e      	mov	r6, r1
 8005dec:	b921      	cbnz	r1, 8005df8 <_realloc_r+0x14>
 8005dee:	4611      	mov	r1, r2
 8005df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005df4:	f7ff bf9c 	b.w	8005d30 <_malloc_r>
 8005df8:	b922      	cbnz	r2, 8005e04 <_realloc_r+0x20>
 8005dfa:	f7ff ff4b 	bl	8005c94 <_free_r>
 8005dfe:	4625      	mov	r5, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e04:	f000 f826 	bl	8005e54 <_malloc_usable_size_r>
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d20f      	bcs.n	8005e2c <_realloc_r+0x48>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff8e 	bl	8005d30 <_malloc_r>
 8005e14:	4605      	mov	r5, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0f2      	beq.n	8005e00 <_realloc_r+0x1c>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	f7ff ff15 	bl	8005c4c <memcpy>
 8005e22:	4631      	mov	r1, r6
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ff35 	bl	8005c94 <_free_r>
 8005e2a:	e7e9      	b.n	8005e00 <_realloc_r+0x1c>
 8005e2c:	4635      	mov	r5, r6
 8005e2e:	e7e7      	b.n	8005e00 <_realloc_r+0x1c>

08005e30 <_sbrk_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4c06      	ldr	r4, [pc, #24]	; (8005e4c <_sbrk_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4605      	mov	r5, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	f7fb f972 	bl	8001124 <_sbrk>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_sbrk_r+0x1a>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_sbrk_r+0x1a>
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	200001e0 	.word	0x200001e0

08005e50 <__malloc_lock>:
 8005e50:	4770      	bx	lr

08005e52 <__malloc_unlock>:
 8005e52:	4770      	bx	lr

08005e54 <_malloc_usable_size_r>:
 8005e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e58:	1f18      	subs	r0, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfbc      	itt	lt
 8005e5e:	580b      	ldrlt	r3, [r1, r0]
 8005e60:	18c0      	addlt	r0, r0, r3
 8005e62:	4770      	bx	lr

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
