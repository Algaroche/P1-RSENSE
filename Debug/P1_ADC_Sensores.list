
P1_ADC_Sensores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c8  080075c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080075d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08007640  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08007640  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014443  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022d3  00000000  00000000  000344e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  000367b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032980  00000000  00000000  00038ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ecba  00000000  00000000  0006b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013a7d2  00000000  00000000  0007a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b48bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  001b4938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080074dc 	.word	0x080074dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080074dc 	.word	0x080074dc

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 ff8c 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f909 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 faad 	bl	8000b3c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e2:	f000 f985 	bl	80008f0 <MX_ADC1_Init>
  MX_TIM16_Init();
 80005e6:	f000 f9e7 	bl	80009b8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 fa5b 	bl	8000aa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//HAL_TIM_Base_Start_IT(&htim16);
	estado = reposo;
 80005ee:	2300      	movs	r3, #0
 80005f0:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Transmit(&huart2, "hola\n\r", 7,100000);
 80005f2:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <main+0x1e0>)
 80005f4:	2207      	movs	r2, #7
 80005f6:	496f      	ldr	r1, [pc, #444]	; (80007b4 <main+0x1e4>)
 80005f8:	486f      	ldr	r0, [pc, #444]	; (80007b8 <main+0x1e8>)
 80005fa:	f005 f8ad 	bl	8005758 <HAL_UART_Transmit>
	//  HAL_UART_RegisterCallback(&huart2,  HAL_UART_RX_COMPLETE_CB_ID , Uart_reception);
	HAL_UART_Receive_IT(&huart2, &buffer, buffer_size);
 80005fe:	2208      	movs	r2, #8
 8000600:	496e      	ldr	r1, [pc, #440]	; (80007bc <main+0x1ec>)
 8000602:	486d      	ldr	r0, [pc, #436]	; (80007b8 <main+0x1e8>)
 8000604:	f005 f940 	bl	8005888 <HAL_UART_Receive_IT>

	memcpy(buffer, "000000", buffer_size);
 8000608:	4a6c      	ldr	r2, [pc, #432]	; (80007bc <main+0x1ec>)
 800060a:	4b6d      	ldr	r3, [pc, #436]	; (80007c0 <main+0x1f0>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	int periodo = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (estado)
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	2b03      	cmp	r3, #3
 800061a:	f200 80c2 	bhi.w	80007a2 <main+0x1d2>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <main+0x54>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	0800070f 	.word	0x0800070f
 800062c:	08000759 	.word	0x08000759
 8000630:	080007a3 	.word	0x080007a3
		{
			case reposo:
				if (flag_UART == 1)
 8000634:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <main+0x1f4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d141      	bne.n	80006c0 <main+0xf0>
				{
					flag_UART = 0;
 800063c:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <main+0x1f4>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
					memcpy(&parte1, &buffer, 3);
 8000642:	4b61      	ldr	r3, [pc, #388]	; (80007c8 <main+0x1f8>)
 8000644:	4a5d      	ldr	r2, [pc, #372]	; (80007bc <main+0x1ec>)
 8000646:	8811      	ldrh	r1, [r2, #0]
 8000648:	7892      	ldrb	r2, [r2, #2]
 800064a:	8019      	strh	r1, [r3, #0]
 800064c:	709a      	strb	r2, [r3, #2]

					if ((strcmp(parte1,"adc") == 0) || (strcmp(buffer,"ADC") == 0))		//PARA ENTRAR AL ESTADO ADC HAY QUE MANDAR 6 LETRAS, ADCNOW POR EJEMPLO, PARA LLENAR EL BUFFER
 800064e:	495f      	ldr	r1, [pc, #380]	; (80007cc <main+0x1fc>)
 8000650:	485d      	ldr	r0, [pc, #372]	; (80007c8 <main+0x1f8>)
 8000652:	f7ff fdd5 	bl	8000200 <strcmp>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <main+0x9a>
 800065c:	495c      	ldr	r1, [pc, #368]	; (80007d0 <main+0x200>)
 800065e:	4857      	ldr	r0, [pc, #348]	; (80007bc <main+0x1ec>)
 8000660:	f7ff fdce 	bl	8000200 <strcmp>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d111      	bne.n	800068e <main+0xbe>
					{
						if ((buffer[3]==40) && (buffer[5]==41)) //VALORES CORRESPONDIENTES A ( Y ) EN ASCII
 800066a:	4b54      	ldr	r3, [pc, #336]	; (80007bc <main+0x1ec>)
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	2b28      	cmp	r3, #40	; 0x28
 8000670:	d10a      	bne.n	8000688 <main+0xb8>
 8000672:	4b52      	ldr	r3, [pc, #328]	; (80007bc <main+0x1ec>)
 8000674:	795b      	ldrb	r3, [r3, #5]
 8000676:	2b29      	cmp	r3, #41	; 0x29
 8000678:	d106      	bne.n	8000688 <main+0xb8>
						{
							periodo = buffer[4] - '0';
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <main+0x1ec>)
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	3b30      	subs	r3, #48	; 0x30
 8000680:	613b      	str	r3, [r7, #16]
							estado = ADC_x;
 8000682:	2302      	movs	r3, #2
 8000684:	75fb      	strb	r3, [r7, #23]
						if ((buffer[3]==40) && (buffer[5]==41)) //VALORES CORRESPONDIENTES A ( Y ) EN ASCII
 8000686:	e016      	b.n	80006b6 <main+0xe6>
						}
						else
							estado = ADC;
 8000688:	2301      	movs	r3, #1
 800068a:	75fb      	strb	r3, [r7, #23]
						if ((buffer[3]==40) && (buffer[5]==41)) //VALORES CORRESPONDIENTES A ( Y ) EN ASCII
 800068c:	e013      	b.n	80006b6 <main+0xe6>
					}
					else if ((strcmp(parte1,"pwm") == 0) || (strcmp(buffer,"PWM") == 0))
 800068e:	4951      	ldr	r1, [pc, #324]	; (80007d4 <main+0x204>)
 8000690:	484d      	ldr	r0, [pc, #308]	; (80007c8 <main+0x1f8>)
 8000692:	f7ff fdb5 	bl	8000200 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <main+0xda>
 800069c:	494e      	ldr	r1, [pc, #312]	; (80007d8 <main+0x208>)
 800069e:	4847      	ldr	r0, [pc, #284]	; (80007bc <main+0x1ec>)
 80006a0:	f7ff fdae 	bl	8000200 <strcmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <main+0xe6>
					{
						estado = PWM;
 80006aa:	2303      	movs	r3, #3
 80006ac:	75fb      	strb	r3, [r7, #23]
						periodo = buffer[4] - '0';
 80006ae:	4b43      	ldr	r3, [pc, #268]	; (80007bc <main+0x1ec>)
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	3b30      	subs	r3, #48	; 0x30
 80006b4:	613b      	str	r3, [r7, #16]
					}
					memcpy(buffer, "000000", buffer_size);
 80006b6:	4a41      	ldr	r2, [pc, #260]	; (80007bc <main+0x1ec>)
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <main+0x1f0>)
 80006ba:	cb03      	ldmia	r3!, {r0, r1}
 80006bc:	6010      	str	r0, [r2, #0]
 80006be:	6051      	str	r1, [r2, #4]
				}
				if (flag_ADC)
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <main+0x20c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d06b      	beq.n	80007a0 <main+0x1d0>
				{
					flag_ADC = 0;
 80006c8:	4b44      	ldr	r3, [pc, #272]	; (80007dc <main+0x20c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

					HAL_ADC_Start(&hadc1);
 80006ce:	4844      	ldr	r0, [pc, #272]	; (80007e0 <main+0x210>)
 80006d0:	f001 faa8 	bl	8001c24 <HAL_ADC_Start>
					//ESPERA A QUE SE COMPLETE LA CONVERSION
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	4841      	ldr	r0, [pc, #260]	; (80007e0 <main+0x210>)
 80006da:	f001 fb06 	bl	8001cea <HAL_ADC_PollForConversion>
					raw = HAL_ADC_GetValue(&hadc1);
 80006de:	4840      	ldr	r0, [pc, #256]	; (80007e0 <main+0x210>)
 80006e0:	f001 fb8b 	bl	8001dfa <HAL_ADC_GetValue>
 80006e4:	4603      	mov	r3, r0
 80006e6:	81fb      	strh	r3, [r7, #14]

					// Convert to string and print
					sprintf(msg, "%hu\r\n", raw);
 80006e8:	89fa      	ldrh	r2, [r7, #14]
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	493d      	ldr	r1, [pc, #244]	; (80007e4 <main+0x214>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 faee 	bl	8006cd0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd8c 	bl	8000214 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	1d39      	adds	r1, r7, #4
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	482c      	ldr	r0, [pc, #176]	; (80007b8 <main+0x1e8>)
 8000708:	f005 f826 	bl	8005758 <HAL_UART_Transmit>
				}
				break;
 800070c:	e048      	b.n	80007a0 <main+0x1d0>
			case ADC:

				HAL_TIM_Base_Stop_IT(&htim16);
 800070e:	4836      	ldr	r0, [pc, #216]	; (80007e8 <main+0x218>)
 8000710:	f004 f8de 	bl	80048d0 <HAL_TIM_Base_Stop_IT>
				HAL_ADC_Start(&hadc1);
 8000714:	4832      	ldr	r0, [pc, #200]	; (80007e0 <main+0x210>)
 8000716:	f001 fa85 	bl	8001c24 <HAL_ADC_Start>
				//ESPERA A QUE SE COMPLETE LA CONVERSION
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800071a:	f04f 31ff 	mov.w	r1, #4294967295
 800071e:	4830      	ldr	r0, [pc, #192]	; (80007e0 <main+0x210>)
 8000720:	f001 fae3 	bl	8001cea <HAL_ADC_PollForConversion>
				raw = HAL_ADC_GetValue(&hadc1);
 8000724:	482e      	ldr	r0, [pc, #184]	; (80007e0 <main+0x210>)
 8000726:	f001 fb68 	bl	8001dfa <HAL_ADC_GetValue>
 800072a:	4603      	mov	r3, r0
 800072c:	81fb      	strh	r3, [r7, #14]

				// Convert to string and print
				sprintf(msg, "%hu\r\n", raw);
 800072e:	89fa      	ldrh	r2, [r7, #14]
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	492c      	ldr	r1, [pc, #176]	; (80007e4 <main+0x214>)
 8000734:	4618      	mov	r0, r3
 8000736:	f006 facb 	bl	8006cd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd69 	bl	8000214 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	1d39      	adds	r1, r7, #4
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <main+0x1e8>)
 800074e:	f005 f803 	bl	8005758 <HAL_UART_Transmit>
				estado = reposo;
 8000752:	2300      	movs	r3, #0
 8000754:	75fb      	strb	r3, [r7, #23]
				break;
 8000756:	e024      	b.n	80007a2 <main+0x1d2>

			case ADC_x:

				htim16.Instance = TIM16;
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x218>)
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <main+0x21c>)
 800075c:	601a      	str	r2, [r3, #0]
				htim16.Init.Prescaler = 611 * periodo;;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	f240 2263 	movw	r2, #611	; 0x263
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0x218>)
 800076c:	605a      	str	r2, [r3, #4]
				htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0x218>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
				htim16.Init.Period = 65535;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0x218>)
 8000776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077a:	60da      	str	r2, [r3, #12]
				htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <main+0x218>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
				htim16.Init.RepetitionCounter = 0;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <main+0x218>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
				htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <main+0x218>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
				HAL_TIM_Base_Init(&htim16);
 800078e:	4816      	ldr	r0, [pc, #88]	; (80007e8 <main+0x218>)
 8000790:	f003 ffd6 	bl	8004740 <HAL_TIM_Base_Init>
				HAL_TIM_Base_Start_IT(&htim16);
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <main+0x218>)
 8000796:	f004 f82b 	bl	80047f0 <HAL_TIM_Base_Start_IT>
				estado = reposo;
 800079a:	2300      	movs	r3, #0
 800079c:	75fb      	strb	r3, [r7, #23]
				break;
 800079e:	e000      	b.n	80007a2 <main+0x1d2>
				break;
 80007a0:	bf00      	nop
			case PWM:

				break;

		}
		HAL_UART_Receive_IT(&huart2, &buffer, buffer_size);
 80007a2:	2208      	movs	r2, #8
 80007a4:	4905      	ldr	r1, [pc, #20]	; (80007bc <main+0x1ec>)
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <main+0x1e8>)
 80007a8:	f005 f86e 	bl	8005888 <HAL_UART_Receive_IT>
		switch (estado)
 80007ac:	e733      	b.n	8000616 <main+0x46>
 80007ae:	bf00      	nop
 80007b0:	000186a0 	.word	0x000186a0
 80007b4:	080074f4 	.word	0x080074f4
 80007b8:	20000110 	.word	0x20000110
 80007bc:	20000108 	.word	0x20000108
 80007c0:	080074fc 	.word	0x080074fc
 80007c4:	2000008d 	.word	0x2000008d
 80007c8:	200001e8 	.word	0x200001e8
 80007cc:	08007504 	.word	0x08007504
 80007d0:	08007508 	.word	0x08007508
 80007d4:	0800750c 	.word	0x0800750c
 80007d8:	08007510 	.word	0x08007510
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	08007514 	.word	0x08007514
 80007e8:	2000019c 	.word	0x2000019c
 80007ec:	40014400 	.word	0x40014400

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0be      	sub	sp, #248	; 0xf8
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80007fa:	2244      	movs	r2, #68	; 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fa5e 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	229c      	movs	r2, #156	; 0x9c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f006 fa50 	bl	8006cc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000820:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000824:	f002 fa9e 	bl	8002d64 <HAL_PWREx_ControlVoltageScaling>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800082e:	f000 fc9b 	bl	8001168 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000832:	2312      	movs	r3, #18
 8000834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fb32 	bl	8002ecc <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800086e:	f000 fc7b 	bl	8001168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 ff3e 	bl	8003718 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008a2:	f000 fc61 	bl	8001168 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80008a6:	f244 0302 	movw	r3, #16386	; 0x4002
 80008aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80008bc:	2305      	movs	r3, #5
 80008be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 80008c4:	2319      	movs	r3, #25
 80008c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008d4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f9c9 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008e4:	f000 fc40 	bl	8001168 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	37f8      	adds	r7, #248	; 0xf8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <MX_ADC1_Init+0xc0>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_ADC1_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_ADC1_Init+0xbc>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000926:	2204      	movs	r2, #4
 8000928:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_ADC1_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000938:	2201      	movs	r2, #1
 800093a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_ADC1_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_ADC1_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_ADC1_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000968:	f001 f812 	bl	8001990 <HAL_ADC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000972:	f000 fbf9 	bl	8001168 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_ADC1_Init+0xc4>)
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097a:	2306      	movs	r3, #6
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000982:	237f      	movs	r3, #127	; 0x7f
 8000984:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000986:	2304      	movs	r3, #4
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_ADC1_Init+0xbc>)
 8000994:	f001 fa3e 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800099e:	f000 fbe3 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	50040000 	.word	0x50040000
 80009b4:	2a000400 	.word	0x2a000400

080009b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b092      	sub	sp, #72	; 0x48
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d2:	463b      	mov	r3, r7
 80009d4:	222c      	movs	r2, #44	; 0x2c
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 f971 	bl	8006cc0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_TIM16_Init+0xe4>)
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <MX_TIM16_Init+0xe8>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 611;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_TIM16_Init+0xe4>)
 80009e6:	f240 2263 	movw	r2, #611	; 0x263
 80009ea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <MX_TIM16_Init+0xe4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_TIM16_Init+0xe4>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_TIM16_Init+0xe4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a0c:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a0e:	f003 fe97 	bl	8004740 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000a18:	f000 fba6 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a1c:	481f      	ldr	r0, [pc, #124]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a1e:	f003 ff86 	bl	800492e <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000a28:	f000 fb9e 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	; 0x60
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32767;
 8000a30:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a54:	f004 f8ec 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8000a5e:	f000 fb83 	bl	8001168 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM16_Init+0xe4>)
 8000a86:	f004 fd7b 	bl	8005580 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000a90:	f000 fb6a 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3748      	adds	r7, #72	; 0x48
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000019c 	.word	0x2000019c
 8000aa0:	40014400 	.word	0x40014400

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <MX_USART2_UART_Init+0x94>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000aee:	f004 fde3 	bl	80056b8 <HAL_UART_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 fb36 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000b00:	f005 ffcf 	bl	8006aa2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 fb2d 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000b12:	f006 f804 	bl	8006b1e <HAL_UARTEx_SetRxFifoThreshold>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 fb24 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USART2_UART_Init+0x90>)
 8000b22:	f005 ff85 	bl	8006a30 <HAL_UARTEx_DisableFifoMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 fb1c 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000110 	.word	0x20000110
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	4bb5      	ldr	r3, [pc, #724]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4ab4      	ldr	r2, [pc, #720]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4bb2      	ldr	r3, [pc, #712]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4baf      	ldr	r3, [pc, #700]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4aae      	ldr	r2, [pc, #696]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4bac      	ldr	r3, [pc, #688]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4ba9      	ldr	r3, [pc, #676]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4aa8      	ldr	r2, [pc, #672]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4ba6      	ldr	r3, [pc, #664]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4ba3      	ldr	r3, [pc, #652]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4aa2      	ldr	r2, [pc, #648]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4ba0      	ldr	r3, [pc, #640]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b9d      	ldr	r3, [pc, #628]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a9c      	ldr	r2, [pc, #624]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b9a      	ldr	r3, [pc, #616]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	4b97      	ldr	r3, [pc, #604]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a96      	ldr	r2, [pc, #600]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b94      	ldr	r3, [pc, #592]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	4b91      	ldr	r3, [pc, #580]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a90      	ldr	r2, [pc, #576]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000bfa:	f002 f957 	bl	8002eac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4b8a      	ldr	r3, [pc, #552]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a89      	ldr	r2, [pc, #548]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b87      	ldr	r3, [pc, #540]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f242 0102 	movw	r1, #8194	; 0x2002
 8000c1c:	4883      	ldr	r0, [pc, #524]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000c1e:	f002 f84f 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f648 0181 	movw	r1, #34945	; 0x8881
 8000c28:	4881      	ldr	r0, [pc, #516]	; (8000e30 <MX_GPIO_Init+0x2f4>)
 8000c2a:	f002 f849 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f002 f842 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	487c      	ldr	r0, [pc, #496]	; (8000e34 <MX_GPIO_Init+0x2f8>)
 8000c42:	f002 f83d 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000c46:	2200      	movs	r2, #0
 8000c48:	f247 5128 	movw	r1, #29992	; 0x7528
 8000c4c:	487a      	ldr	r0, [pc, #488]	; (8000e38 <MX_GPIO_Init+0x2fc>)
 8000c4e:	f002 f837 	bl	8002cc0 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2121      	movs	r1, #33	; 0x21
 8000c56:	4879      	ldr	r0, [pc, #484]	; (8000e3c <MX_GPIO_Init+0x300>)
 8000c58:	f002 f832 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000c62:	4877      	ldr	r0, [pc, #476]	; (8000e40 <MX_GPIO_Init+0x304>)
 8000c64:	f002 f82c 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8000c68:	f240 4301 	movw	r3, #1025	; 0x401
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	486b      	ldr	r0, [pc, #428]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000c7e:	f001 fe8d 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8000c82:	f244 3301 	movw	r3, #17153	; 0x4301
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	486a      	ldr	r0, [pc, #424]	; (8000e40 <MX_GPIO_Init+0x304>)
 8000c98:	f001 fe80 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4865      	ldr	r0, [pc, #404]	; (8000e44 <MX_GPIO_Init+0x308>)
 8000cb0:	f001 fe74 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8000cb4:	2338      	movs	r3, #56	; 0x38
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	485c      	ldr	r0, [pc, #368]	; (8000e40 <MX_GPIO_Init+0x304>)
 8000cd0:	f001 fe64 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8000cd4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4850      	ldr	r0, [pc, #320]	; (8000e34 <MX_GPIO_Init+0x2f8>)
 8000cf2:	f001 fe53 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8000cf6:	f64c 1308 	movw	r3, #51464	; 0xc908
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfc:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <MX_GPIO_Init+0x30c>)
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000d0c:	f001 fe46 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8000d10:	2302      	movs	r3, #2
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4841      	ldr	r0, [pc, #260]	; (8000e30 <MX_GPIO_Init+0x2f4>)
 8000d2c:	f001 fe36 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8000d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d42:	2301      	movs	r3, #1
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 fe24 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8000d54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d66:	230a      	movs	r3, #10
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f001 fe12 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8000d78:	23f4      	movs	r3, #244	; 0xf4
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d88:	230d      	movs	r3, #13
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000d94:	f001 fe02 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8000d98:	f242 0302 	movw	r3, #8194	; 0x2002
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000db2:	f001 fdf3 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8000db6:	f648 0381 	movw	r3, #34945	; 0x8881
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <MX_GPIO_Init+0x2f4>)
 8000dd0:	f001 fde4 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8000dd4:	f240 6313 	movw	r3, #1555	; 0x613
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f001 fdd6 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8000df0:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e02:	2306      	movs	r3, #6
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_GPIO_Init+0x304>)
 8000e0e:	f001 fdc5 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8000e12:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	e011      	b.n	8000e4c <MX_GPIO_Init+0x310>
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48001000 	.word	0x48001000
 8000e30:	48000c00 	.word	0x48000c00
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48001400 	.word	0x48001400
 8000e3c:	48001800 	.word	0x48001800
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48001c00 	.word	0x48001c00
 8000e48:	10110000 	.word	0x10110000
 8000e4c:	48a7      	ldr	r0, [pc, #668]	; (80010ec <MX_GPIO_Init+0x5b0>)
 8000e4e:	f001 fda5 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e62:	230c      	movs	r3, #12
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	48a0      	ldr	r0, [pc, #640]	; (80010f0 <MX_GPIO_Init+0x5b4>)
 8000e6e:	f001 fd95 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 fd85 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000e92:	2340      	movs	r3, #64	; 0x40
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4892      	ldr	r0, [pc, #584]	; (80010f4 <MX_GPIO_Init+0x5b8>)
 8000eaa:	f001 fd77 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb2:	2312      	movs	r3, #18
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	488b      	ldr	r0, [pc, #556]	; (80010f8 <MX_GPIO_Init+0x5bc>)
 8000eca:	f001 fd67 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000ece:	f247 5328 	movw	r3, #29992	; 0x7528
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4884      	ldr	r0, [pc, #528]	; (80010f8 <MX_GPIO_Init+0x5bc>)
 8000ee8:	f001 fd58 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000eec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000efe:	2304      	movs	r3, #4
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4878      	ldr	r0, [pc, #480]	; (80010ec <MX_GPIO_Init+0x5b0>)
 8000f0a:	f001 fd47 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4873      	ldr	r0, [pc, #460]	; (80010f8 <MX_GPIO_Init+0x5bc>)
 8000f2a:	f001 fd37 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8000f2e:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	4b71      	ldr	r3, [pc, #452]	; (80010fc <MX_GPIO_Init+0x5c0>)
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	486d      	ldr	r0, [pc, #436]	; (80010f8 <MX_GPIO_Init+0x5bc>)
 8000f44:	f001 fd2a 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8000f48:	231c      	movs	r3, #28
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4862      	ldr	r0, [pc, #392]	; (80010ec <MX_GPIO_Init+0x5b0>)
 8000f64:	f001 fd1a 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8000f68:	2321      	movs	r3, #33	; 0x21
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	485b      	ldr	r0, [pc, #364]	; (80010ec <MX_GPIO_Init+0x5b0>)
 8000f80:	f001 fd0c 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8000f84:	2342      	movs	r3, #66	; 0x42
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f88:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <MX_GPIO_Init+0x5c0>)
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4855      	ldr	r0, [pc, #340]	; (80010ec <MX_GPIO_Init+0x5b0>)
 8000f98:	f001 fd00 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8000f9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	484d      	ldr	r0, [pc, #308]	; (80010f0 <MX_GPIO_Init+0x5b4>)
 8000fba:	f001 fcef 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4846      	ldr	r0, [pc, #280]	; (80010f4 <MX_GPIO_Init+0x5b8>)
 8000fda:	f001 fcdf 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8000fde:	f241 0304 	movw	r3, #4100	; 0x1004
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4843      	ldr	r0, [pc, #268]	; (8001100 <MX_GPIO_Init+0x5c4>)
 8000ff4:	f001 fcd2 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	483a      	ldr	r0, [pc, #232]	; (80010f8 <MX_GPIO_Init+0x5bc>)
 800100e:	f001 fcc5 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <MX_GPIO_Init+0x5c0>)
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4832      	ldr	r0, [pc, #200]	; (80010f0 <MX_GPIO_Init+0x5b4>)
 8001028:	f001 fcb8 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800102c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103e:	2307      	movs	r3, #7
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <MX_GPIO_Init+0x5b4>)
 800104a:	f001 fca7 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 800104e:	f242 0302 	movw	r3, #8194	; 0x2002
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4825      	ldr	r0, [pc, #148]	; (8001100 <MX_GPIO_Init+0x5c4>)
 800106c:	f001 fc96 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107a:	2302      	movs	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001082:	2306      	movs	r3, #6
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	481d      	ldr	r0, [pc, #116]	; (8001104 <MX_GPIO_Init+0x5c8>)
 800108e:	f001 fc85 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001092:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4815      	ldr	r0, [pc, #84]	; (8001100 <MX_GPIO_Init+0x5c4>)
 80010ac:	f001 fc76 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80010b0:	2304      	movs	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_GPIO_Init+0x5c0>)
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f001 fc69 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_GPIO_Init+0x5c8>)
 80010e0:	f001 fc5c 	bl	800299c <HAL_GPIO_Init>

}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	; 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	48001800 	.word	0x48001800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48001400 	.word	0x48001400
 80010fc:	10110000 	.word	0x10110000
 8001100:	48000400 	.word	0x48000400
 8001104:	48001000 	.word	0x48001000

08001108 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16 )
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d106      	bne.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
 8001118:	2102      	movs	r1, #2
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800111c:	f001 fde8 	bl	8002cf0 <HAL_GPIO_TogglePin>
		flag_ADC = 1;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
	}
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000019c 	.word	0x2000019c
 8001134:	48001000 	.word	0x48001000
 8001138:	2000008c 	.word	0x2000008c

0800113c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, "Recibido\n\r", 11, 100000);
	HAL_UART_Receive_IT(&huart2, &buffer, buffer_size);
 8001144:	2208      	movs	r2, #8
 8001146:	4905      	ldr	r1, [pc, #20]	; (800115c <HAL_UART_RxCpltCallback+0x20>)
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_UART_RxCpltCallback+0x24>)
 800114a:	f004 fb9d 	bl	8005888 <HAL_UART_Receive_IT>
	flag_UART = 1;
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_UART_RxCpltCallback+0x28>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000108 	.word	0x20000108
 8001160:	20000110 	.word	0x20000110
 8001164:	2000008d 	.word	0x2000008d

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800116e:	e7fe      	b.n	800116e <Error_Handler+0x6>

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	; 0x60
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <HAL_ADC_MspInit+0xa4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d13c      	bne.n	8001254 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 80011e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_ADC_MspInit+0xa8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8001222:	2312      	movs	r3, #18
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001226:	230b      	movs	r3, #11
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_ADC_MspInit+0xac>)
 8001236:	f001 fbb1 	bl	800299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800123a:	2320      	movs	r3, #32
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123e:	230b      	movs	r3, #11
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f001 fba4 	bl	800299c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	50040000 	.word	0x50040000
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	6613      	str	r3, [r2, #96]	; 0x60
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2019      	movs	r0, #25
 8001298:	f001 faeb 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800129c:	2019      	movs	r0, #25
 800129e:	f001 fb04 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40014400 	.word	0x40014400
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12f      	bne.n	8001336 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001306:	2370      	movs	r3, #112	; 0x70
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001316:	2307      	movs	r3, #7
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_UART_MspInit+0x94>)
 8001322:	f001 fb3b 	bl	800299c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2026      	movs	r0, #38	; 0x26
 800132c:	f001 faa1 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f001 faba 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004400 	.word	0x40004400
 8001344:	40021000 	.word	0x40021000
 8001348:	48000c00 	.word	0x48000c00

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f900 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013a6:	f003 fb23 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000019c 	.word	0x2000019c

080013b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART2_IRQHandler+0x10>)
 80013ba:	f004 fb3d 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000110 	.word	0x20000110

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f005 fc38 	bl	8006c6c <__errno>
 80013fc:	4602      	mov	r2, r0
 80013fe:	230c      	movs	r3, #12
 8001400:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200a0000 	.word	0x200a0000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000090 	.word	0x20000090
 8001430:	200001f8 	.word	0x200001f8

08001434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <SystemInit+0x64>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <SystemInit+0x64>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <SystemInit+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <SystemInit+0x68>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <SystemInit+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <SystemInit+0x68>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <SystemInit+0x68>)
 8001460:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001464:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001468:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <SystemInit+0x68>)
 800146c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001470:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <SystemInit+0x68>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <SystemInit+0x68>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <SystemInit+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SystemInit+0x64>)
 8001486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148a:	609a      	str	r2, [r3, #8]
#endif
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	40021000 	.word	0x40021000

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff ffc6 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014aa:	e003      	b.n	80014b4 <LoopCopyDataInit>

080014ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014b2:	3104      	adds	r1, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014bc:	d3f6      	bcc.n	80014ac <CopyDataInit>
	ldr	r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014c0:	e002      	b.n	80014c8 <LoopFillZerobss>

080014c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014c4:	f842 3b04 	str.w	r3, [r2], #4

080014c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LoopForever+0x16>)
	cmp	r2, r3
 80014ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014cc:	d3f9      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 fbd3 	bl	8006c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff f87d 	bl	80005d0 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80014dc:	080075d0 	.word	0x080075d0
	ldr	r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014e4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80014e8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80014ec:	200001f4 	.word	0x200001f4

080014f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_IRQHandler>

080014f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f001 f9ad 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f80e 	bl	8001524 <HAL_InitTick>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e001      	b.n	8001518 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001514:	f7ff fe2c 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001518:	79fb      	ldrb	r3, [r7, #7]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_InitTick+0x6c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d023      	beq.n	8001580 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_InitTick+0x70>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_InitTick+0x6c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f9b9 	bl	80028c6 <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d809      	bhi.n	8001574 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f001 f983 	bl	8002872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_InitTick+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e007      	b.n	8001584 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e004      	b.n	8001584 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e001      	b.n	8001584 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	200001ec 	.word	0x200001ec

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200001ec 	.word	0x200001ec

080015dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3360      	adds	r3, #96	; 0x60
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <LL_ADC_SetOffset+0x44>)
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	4313      	orrs	r3, r2
 8001674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800167c:	bf00      	nop
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	03fff000 	.word	0x03fff000

0800168c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3360      	adds	r3, #96	; 0x60
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	615a      	str	r2, [r3, #20]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800173a:	b480      	push	{r7}
 800173c:	b087      	sub	sp, #28
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3330      	adds	r3, #48	; 0x30
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	211f      	movs	r1, #31
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	401a      	ands	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	f003 011f 	and.w	r1, r3, #31
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3314      	adds	r3, #20
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	0e5b      	lsrs	r3, r3, #25
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0d1b      	lsrs	r3, r3, #20
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2107      	movs	r1, #7
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0d1b      	lsrs	r3, r3, #20
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0007ffff 	.word	0x0007ffff

08001830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6093      	str	r3, [r2, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800188c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <LL_ADC_IsEnabled+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_IsEnabled+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192e:	f043 0204 	orr.w	r2, r3, #4
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b04      	cmp	r3, #4
 8001954:	d101      	bne.n	800195a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b08      	cmp	r3, #8
 800197a:	d101      	bne.n	8001980 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e12d      	b.n	8001c06 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fbfd 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff3f 	bl	8001854 <LL_ADC_IsDeepPowerDownEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff25 	bl	8001830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff5a 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d113      	bne.n	8001a1e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff3e 	bl	800187c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a00:	4b83      	ldr	r3, [pc, #524]	; (8001c10 <HAL_ADC_Init+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <HAL_ADC_Init+0x284>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff3e 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff77 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001a54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 80c8 	bne.w	8001bf4 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80c4 	bne.w	8001bf4 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff37 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a8c:	4862      	ldr	r0, [pc, #392]	; (8001c18 <HAL_ADC_Init+0x288>)
 8001a8e:	f7ff ff31 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	485f      	ldr	r0, [pc, #380]	; (8001c1c <HAL_ADC_Init+0x28c>)
 8001aa0:	f7ff fd9c 	bl	80015dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e5b      	ldrb	r3, [r3, #25]
 8001aa8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ab4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	045b      	lsls	r3, r3, #17
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_ADC_Init+0x290>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff14 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001b1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff21 	bl	8001968 <LL_ADC_INJ_IsConversionOngoing>
 8001b26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d140      	bne.n	8001bb0 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d13d      	bne.n	8001bb0 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b3e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b56:	f023 0306 	bic.w	r3, r3, #6
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d118      	bne.n	8001ba0 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b90:	430a      	orrs	r2, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	e007      	b.n	8001bb0 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f023 010f 	bic.w	r1, r3, #15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 020f 	bic.w	r2, r2, #15
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58
 8001bf2:	e007      	b.n	8001c04 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	053e2d63 	.word	0x053e2d63
 8001c18:	50040000 	.word	0x50040000
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	fff0c007 	.word	0xfff0c007

08001c24 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe86 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d14f      	bne.n	8001cdc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Start+0x26>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e04b      	b.n	8001ce2 <HAL_ADC_Start+0xbe>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fcd8 	bl	8002608 <ADC_Enable>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d137      	bne.n	8001cd2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	f023 0206 	bic.w	r2, r3, #6
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	221c      	movs	r2, #28
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe25 	bl	800191a <LL_ADC_REG_StartConversion>
 8001cd0:	e006      	b.n	8001ce0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e010      	b.n	8001d24 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e068      	b.n	8001df2 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001d20:	2304      	movs	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d24:	f7ff fc4e 	bl	80015c4 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d2a:	e01a      	b.n	8001d62 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d016      	beq.n	8001d62 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d34:	f7ff fc46 	bl	80015c4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <HAL_ADC_PollForConversion+0x60>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f043 0204 	orr.w	r2, r3, #4
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e047      	b.n	8001df2 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0dd      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fcc7 	bl	8001714 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e5b      	ldrb	r3, [r3, #25]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d118      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d111      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d104      	bne.n	8001dde <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e008      	b.n	8001df0 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	220c      	movs	r2, #12
 8001dee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0b6      	sub	sp, #216	; 0xd8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e3d4      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x7cc>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fd7d 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 83b9 	bne.w	80025c2 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d824      	bhi.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	3b02      	subs	r3, #2
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d81b      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x86>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_ADC_ConfigChannel+0x54>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e81 	.word	0x08001e81
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e91 	.word	0x08001e91
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	605a      	str	r2, [r3, #4]
          break;
 8001e7e:	e011      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2212      	movs	r2, #18
 8001e84:	605a      	str	r2, [r3, #4]
          break;
 8001e86:	e00d      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2218      	movs	r2, #24
 8001e8c:	605a      	str	r2, [r3, #4]
          break;
 8001e8e:	e009      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e96:	605a      	str	r2, [r3, #4]
          break;
 8001e98:	e004      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	605a      	str	r2, [r3, #4]
          break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ea2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f7ff fc42 	bl	800173a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fd41 	bl	8001942 <LL_ADC_REG_IsConversionOngoing>
 8001ec0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fd4d 	bl	8001968 <LL_ADC_INJ_IsConversionOngoing>
 8001ece:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 81c1 	bne.w	800225e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 81bc 	bne.w	800225e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eee:	d10f      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7ff fc49 	bl	8001792 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fbf0 	bl	80016ee <LL_ADC_SetSamplingTimeCommonConfig>
 8001f0e:	e00e      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f7ff fc38 	bl	8001792 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbe0 	bl	80016ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d00a      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f60:	f7ff fb70 	bl	8001644 <LL_ADC_SetOffset>
 8001f64:	e17b      	b.n	800225e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fb8d 	bl	800168c <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x17e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fb82 	bl	800168c <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	e01e      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1bc>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb77 	bl	800168c <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e004      	b.n	8001fce <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	e018      	b.n	800201a <HAL_ADC_ConfigChannel+0x206>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e004      	b.n	800201a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201a:	429a      	cmp	r2, r3
 800201c:	d106      	bne.n	800202c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fb46 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb2a 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x244>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fb1f 	bl	800168c <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	f003 021f 	and.w	r2, r3, #31
 8002056:	e01e      	b.n	8002096 <HAL_ADC_ConfigChannel+0x282>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fb14 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800207e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e004      	b.n	8002094 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800208a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x29a>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	e018      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x2cc>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e004      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80020d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fae3 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fac7 	bl	800168c <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x30a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fabc 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	e01e      	b.n	800215c <HAL_ADC_ConfigChannel+0x348>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2102      	movs	r1, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fab1 	bl	800168c <LL_ADC_GetOffsetChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800213c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002140:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e004      	b.n	800215a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x360>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	e016      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x38e>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800218c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	2102      	movs	r1, #2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fa82 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fa66 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x3cc>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fa5b 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	e017      	b.n	8002210 <HAL_ADC_ConfigChannel+0x3fc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2103      	movs	r1, #3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fa50 	bl	800168c <LL_ADC_GetOffsetChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x414>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	e011      	b.n	800224c <HAL_ADC_ConfigChannel+0x438>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002238:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800223a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e003      	b.n	800224c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800224c:	429a      	cmp	r2, r3
 800224e:	d106      	bne.n	800225e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	2103      	movs	r1, #3
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fa2d 	bl	80016b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fb46 	bl	80018f4 <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 8140 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	461a      	mov	r2, r3
 800227e:	f7ff fab3 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4a8f      	ldr	r2, [pc, #572]	; (80024c4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	f040 8131 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x4a2>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	bf94      	ite	ls
 80022ae:	2301      	movls	r3, #1
 80022b0:	2300      	movhi	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e019      	b.n	80022ea <HAL_ADC_ConfigChannel+0x4d6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e003      	b.n	80022da <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80022d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d079      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_ADC_ConfigChannel+0x4f6>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	3301      	adds	r3, #1
 8002302:	069b      	lsls	r3, r3, #26
 8002304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002308:	e015      	b.n	8002336 <HAL_ADC_ConfigChannel+0x522>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	069b      	lsls	r3, r3, #26
 8002332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x542>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0e9b      	lsrs	r3, r3, #26
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	e017      	b.n	8002386 <HAL_ADC_ConfigChannel+0x572>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e003      	b.n	800237a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2101      	movs	r1, #1
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	ea42 0103 	orr.w	r1, r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x598>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	3301      	adds	r3, #1
 800239e:	f003 021f 	and.w	r2, r3, #31
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	051b      	lsls	r3, r3, #20
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x5ca>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 021f 	and.w	r2, r3, #31
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023de:	430b      	orrs	r3, r1
 80023e0:	e081      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x5ea>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0e9b      	lsrs	r3, r3, #26
 80023f4:	3301      	adds	r3, #1
 80023f6:	069b      	lsls	r3, r3, #26
 80023f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023fc:	e015      	b.n	800242a <HAL_ADC_ConfigChannel+0x616>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e003      	b.n	8002422 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	3301      	adds	r3, #1
 8002424:	069b      	lsls	r3, r3, #26
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_ConfigChannel+0x636>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	3301      	adds	r3, #1
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	e017      	b.n	800247a <HAL_ADC_ConfigChannel+0x666>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	61fb      	str	r3, [r7, #28]
  return result;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002462:	2320      	movs	r3, #32
 8002464:	e003      	b.n	800246e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	3301      	adds	r3, #1
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	ea42 0103 	orr.w	r1, r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x692>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	051b      	lsls	r3, r3, #20
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024a4:	e01e      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x6d0>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	613b      	str	r3, [r7, #16]
  return result;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e006      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x6bc>
 80024c2:	bf00      	nop
 80024c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	3b1e      	subs	r3, #30
 80024de:	051b      	lsls	r3, r3, #20
 80024e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	430b      	orrs	r3, r1
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	6892      	ldr	r2, [r2, #8]
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7ff f951 	bl	8001792 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_ADC_ConfigChannel+0x7d4>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d06b      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024fc:	483b      	ldr	r0, [pc, #236]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 80024fe:	f7ff f893 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002502:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d126      	bne.n	800255e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d120      	bne.n	800255e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d156      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800252e:	4619      	mov	r1, r3
 8002530:	482e      	ldr	r0, [pc, #184]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002532:	f7ff f866 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_ADC_ConfigChannel+0x7e8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	099a      	lsrs	r2, r3, #6
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800254e:	e002      	b.n	8002556 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3b01      	subs	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800255c:	e03a      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a27      	ldr	r2, [pc, #156]	; (8002600 <HAL_ADC_ConfigChannel+0x7ec>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d113      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x77c>
 8002568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_ADC_ConfigChannel+0x7e0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d12a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002586:	4619      	mov	r1, r3
 8002588:	4818      	ldr	r0, [pc, #96]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 800258a:	f7ff f83a 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800258e:	e021      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_ADC_ConfigChannel+0x7f0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d11c      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800259a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_ADC_ConfigChannel+0x7e0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b8:	4619      	mov	r1, r3
 80025ba:	480c      	ldr	r0, [pc, #48]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 80025bc:	f7ff f821 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
 80025c0:	e008      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	37d8      	adds	r7, #216	; 0xd8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	80080000 	.word	0x80080000
 80025ec:	50040300 	.word	0x50040300
 80025f0:	c7520000 	.word	0xc7520000
 80025f4:	50040000 	.word	0x50040000
 80025f8:	20000000 	.word	0x20000000
 80025fc:	053e2d63 	.word	0x053e2d63
 8002600:	cb840000 	.word	0xcb840000
 8002604:	80000001 	.word	0x80000001

08002608 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f96d 	bl	80018f4 <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d146      	bne.n	80026ae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <ADC_Enable+0xb0>)
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e032      	b.n	80026b0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f93c 	bl	80018cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002654:	f7fe ffb6 	bl	80015c4 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265a:	e021      	b.n	80026a0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f947 	bl	80018f4 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f92b 	bl	80018cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002676:	f7fe ffa5 	bl	80015c4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d90d      	bls.n	80026a0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d1d6      	bne.n	800265c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	8000003f 	.word	0x8000003f

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff29 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff3e 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff31 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa2 	bl	8002818 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d005      	beq.n	8002902 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e047      	b.n	8002992 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 020e 	bic.w	r2, r2, #14
 8002910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f003 021c 	and.w	r2, r3, #28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800294e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002970:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
    }
  }
  return status;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	e166      	b.n	8002c7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	4013      	ands	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8158 	beq.w	8002c74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d00b      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d007      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d8:	2b11      	cmp	r3, #17
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d130      	bne.n	8002a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	f003 0201 	and.w	r2, r3, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0xea>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d123      	bne.n	8002ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3208      	adds	r2, #8
 8002a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	6939      	ldr	r1, [r7, #16]
 8002aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80b2 	beq.w	8002c74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_GPIO_Init+0x2fc>)
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_GPIO_Init+0x2fc>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_GPIO_Init+0x2fc>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b28:	4a5c      	ldr	r2, [pc, #368]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b52:	d02b      	beq.n	8002bac <HAL_GPIO_Init+0x210>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d025      	beq.n	8002ba8 <HAL_GPIO_Init+0x20c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_GPIO_Init+0x308>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d01f      	beq.n	8002ba4 <HAL_GPIO_Init+0x208>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_GPIO_Init+0x30c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d019      	beq.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x310>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_GPIO_Init+0x200>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x314>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00d      	beq.n	8002b98 <HAL_GPIO_Init+0x1fc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x318>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_Init+0x1f8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x31c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_GPIO_Init+0x1f4>
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	e00e      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002b90:	2308      	movs	r3, #8
 8002b92:	e00c      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002b94:	2306      	movs	r3, #6
 8002b96:	e00a      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002b98:	2305      	movs	r3, #5
 8002b9a:	e008      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	e006      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x212>
 8002bac:	2300      	movs	r3, #0
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bbe:	4937      	ldr	r1, [pc, #220]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bf0:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c1a:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6e:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f ae91 	bne.w	80029ac <HAL_GPIO_Init+0x10>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	48000800 	.word	0x48000800
 8002ca8:	48000c00 	.word	0x48000c00
 8002cac:	48001000 	.word	0x48001000
 8002cb0:	48001400 	.word	0x48001400
 8002cb4:	48001800 	.word	0x48001800
 8002cb8:	48001c00 	.word	0x48001c00
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43d9      	mvns	r1, r3
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	400b      	ands	r3, r1
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d102      	bne.n	8002d3c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3a:	e00b      	b.n	8002d54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4a:	d102      	bne.n	8002d52 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d50:	e000      	b.n	8002d54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d52:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40007000 	.word	0x40007000

08002d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d141      	bne.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d72:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d131      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d98:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2232      	movs	r2, #50	; 0x32
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	0c9b      	lsrs	r3, r3, #18
 8002db2:	3301      	adds	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db6:	e002      	b.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dca:	d102      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f2      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd2:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d158      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e057      	b.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de4:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002df4:	e04d      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfc:	d141      	bne.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d131      	bne.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2232      	movs	r2, #50	; 0x32
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9b      	lsrs	r3, r3, #18
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e42:	e002      	b.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d102      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f2      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d112      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e011      	b.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e80:	e007      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e90:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6053      	str	r3, [r2, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f000 bc16 	b.w	800370c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee0:	4ba0      	ldr	r3, [pc, #640]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eea:	4b9e      	ldr	r3, [pc, #632]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80e4 	beq.w	80030ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4c>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	f040 808b 	bne.w	8003026 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f040 8087 	bne.w	8003026 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x64>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e3ed      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCC_OscConfig+0x7e>
 8002f40:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f48:	e005      	b.n	8002f56 <HAL_RCC_OscConfig+0x8a>
 8002f4a:	4b86      	ldr	r3, [pc, #536]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d223      	bcs.n	8002fa2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fdc6 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e3ce      	b.n	800370c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4977      	ldr	r1, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8c:	4b75      	ldr	r3, [pc, #468]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	4972      	ldr	r1, [pc, #456]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
 8002fa0:	e025      	b.n	8002fee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	496a      	ldr	r1, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	4965      	ldr	r1, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fd86 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e38e      	b.n	800370c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fee:	f000 fcbf 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a5a      	ldr	r2, [pc, #360]	; (8003168 <HAL_RCC_OscConfig+0x29c>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	fa21 f303 	lsr.w	r3, r1, r3
 800300a:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x2a0>)
 800300c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800300e:	4b58      	ldr	r3, [pc, #352]	; (8003170 <HAL_RCC_OscConfig+0x2a4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fa86 	bl	8001524 <HAL_InitTick>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d052      	beq.n	80030c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	e372      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d032      	beq.n	8003094 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800303a:	f7fe fac3 	bl	80015c4 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003042:	f7fe fabf 	bl	80015c4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e35b      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	493a      	ldr	r1, [pc, #232]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307e:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e01a      	b.n	80030ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fa90 	bl	80015c4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a8:	f7fe fa8c 	bl	80015c4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e328      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1dc>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d073      	beq.n	80031be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x21c>
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d10e      	bne.n	8003100 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d063      	beq.n	80031bc <HAL_RCC_OscConfig+0x2f0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d15f      	bne.n	80031bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e305      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x24c>
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0x288>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x270>
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0x288>
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_RCC_OscConfig+0x298>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fa32 	bl	80015c4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003162:	e010      	b.n	8003186 <HAL_RCC_OscConfig+0x2ba>
 8003164:	40021000 	.word	0x40021000
 8003168:	0800752c 	.word	0x0800752c
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fa26 	bl	80015c4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e2c2      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003186:	4baf      	ldr	r3, [pc, #700]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x2a8>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe fa16 	bl	80015c4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fa12 	bl	80015c4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e2ae      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ae:	4ba5      	ldr	r3, [pc, #660]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x2d0>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d060      	beq.n	800328c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x310>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d119      	bne.n	800320a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	4b99      	ldr	r3, [pc, #612]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x328>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e28b      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b93      	ldr	r3, [pc, #588]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	4990      	ldr	r1, [pc, #576]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003208:	e040      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d023      	beq.n	800325a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003212:	4b8c      	ldr	r3, [pc, #560]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a8b      	ldr	r2, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe f9d1 	bl	80015c4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe f9cd 	bl	80015c4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e269      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003238:	4b82      	ldr	r3, [pc, #520]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	497c      	ldr	r1, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	e018      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325a:	4b7a      	ldr	r3, [pc, #488]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a79      	ldr	r2, [pc, #484]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe f9ad 	bl	80015c4 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe f9a9 	bl	80015c4 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e245      	b.n	800370c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003280:	4b70      	ldr	r3, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d03c      	beq.n	8003312 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01c      	beq.n	80032da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a0:	4b68      	ldr	r3, [pc, #416]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe f988 	bl	80015c4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fe f984 	bl	80015c4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e220      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ca:	4b5e      	ldr	r3, [pc, #376]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCC_OscConfig+0x3ec>
 80032d8:	e01b      	b.n	8003312 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b5a      	ldr	r3, [pc, #360]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe f96b 	bl	80015c4 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe f967 	bl	80015c4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e203      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ef      	bne.n	80032f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a6 	beq.w	800346c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003324:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_RCC_OscConfig+0x57c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x57c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x57c>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fe f92e 	bl	80015c4 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe f92a 	bl	80015c4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1c6      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_RCC_OscConfig+0x57c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4d8>
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a2:	e024      	b.n	80033ee <HAL_RCC_OscConfig+0x522>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d110      	bne.n	80033ce <HAL_RCC_OscConfig+0x502>
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a20      	ldr	r2, [pc, #128]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033cc:	e00f      	b.n	80033ee <HAL_RCC_OscConfig+0x522>
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe f8e5 	bl	80015c4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe f8e1 	bl	80015c4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e17b      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x578>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ed      	beq.n	80033fe <HAL_RCC_OscConfig+0x532>
 8003422:	e01a      	b.n	800345a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe f8ce 	bl	80015c4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800342a:	e00f      	b.n	800344c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe f8ca 	bl	80015c4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d906      	bls.n	800344c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e164      	b.n	800370c <HAL_RCC_OscConfig+0x840>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	4ba8      	ldr	r3, [pc, #672]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e8      	bne.n	800342c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4ba3      	ldr	r3, [pc, #652]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4aa2      	ldr	r2, [pc, #648]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003480:	4b9b      	ldr	r3, [pc, #620]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003486:	4a9a      	ldr	r2, [pc, #616]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fe f898 	bl	80015c4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003498:	f7fe f894 	bl	80015c4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e130      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034aa:	4b91      	ldr	r3, [pc, #580]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80034ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCC_OscConfig+0x5cc>
 80034b8:	e01b      	b.n	80034f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034ba:	4b8d      	ldr	r3, [pc, #564]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80034bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c0:	4a8b      	ldr	r2, [pc, #556]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fe f87b 	bl	80015c4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fe f877 	bl	80015c4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e113      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e4:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80034e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ef      	bne.n	80034d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8107 	beq.w	800370a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	2b02      	cmp	r3, #2
 8003502:	f040 80cb 	bne.w	800369c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003506:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d12c      	bne.n	8003574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	3b01      	subs	r3, #1
 8003526:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d123      	bne.n	8003574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d11b      	bne.n	8003574 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d113      	bne.n	8003574 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d109      	bne.n	8003574 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d06d      	beq.n	8003650 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d068      	beq.n	800364c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003586:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0ba      	b.n	800370c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003596:	4b56      	ldr	r3, [pc, #344]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a55      	ldr	r2, [pc, #340]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800359c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a2:	f7fe f80f 	bl	80015c4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe f80b 	bl	80015c4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0a7      	b.n	800370c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c8:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b49      	ldr	r3, [pc, #292]	; (80036f4 <HAL_RCC_OscConfig+0x828>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035d8:	3a01      	subs	r2, #1
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035e2:	0212      	lsls	r2, r2, #8
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0552      	lsls	r2, r2, #21
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035f6:	0852      	lsrs	r2, r2, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0652      	lsls	r2, r2, #25
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003602:	06d2      	lsls	r2, r2, #27
 8003604:	430a      	orrs	r2, r1
 8003606:	493a      	ldr	r1, [pc, #232]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003608:	4313      	orrs	r3, r2
 800360a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003624:	f7fd ffce 	bl	80015c4 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fd ffca 	bl	80015c4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e066      	b.n	800370c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800364a:	e05e      	b.n	800370a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e05d      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d156      	bne.n	800370a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003674:	f7fd ffa6 	bl	80015c4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7fd ffa2 	bl	80015c4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e03e      	b.n	800370c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x7b0>
 800369a:	e036      	b.n	800370a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d031      	beq.n	8003706 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036c0:	f023 0303 	bic.w	r3, r3, #3
 80036c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x824>)
 80036cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd ff75 	bl	80015c4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	e00c      	b.n	80036f8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fd ff71 	bl	80015c4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d905      	bls.n	80036f8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e00d      	b.n	800370c <HAL_RCC_OscConfig+0x840>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x848>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ec      	bne.n	80036de <HAL_RCC_OscConfig+0x812>
 8003704:	e001      	b.n	800370a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e10f      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b89      	ldr	r3, [pc, #548]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d910      	bls.n	8003760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b86      	ldr	r3, [pc, #536]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	4984      	ldr	r1, [pc, #528]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b82      	ldr	r3, [pc, #520]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0f7      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8089 	beq.w	8003880 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d133      	bne.n	80037de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003776:	4b79      	ldr	r3, [pc, #484]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0e4      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003786:	f000 fa0d 	bl	8003ba4 <RCC_GetSysClockFreqFromPLLSource>
 800378a:	4602      	mov	r2, r0
 800378c:	4b74      	ldr	r3, [pc, #464]	; (8003960 <HAL_RCC_ClockConfig+0x248>)
 800378e:	429a      	cmp	r2, r3
 8003790:	d955      	bls.n	800383e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003792:	4b72      	ldr	r3, [pc, #456]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800379e:	4b6f      	ldr	r3, [pc, #444]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a6:	4a6d      	ldr	r2, [pc, #436]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80037a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e044      	b.n	800383e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d03e      	beq.n	800383e <HAL_RCC_ClockConfig+0x126>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d13a      	bne.n	800383e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037c8:	4b64      	ldr	r3, [pc, #400]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d0:	4a62      	ldr	r2, [pc, #392]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80037d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e02f      	b.n	800383e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b5d      	ldr	r3, [pc, #372]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0ac      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0a0      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380e:	4b53      	ldr	r3, [pc, #332]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e098      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800381e:	f000 f8a7 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCC_ClockConfig+0x248>)
 8003826:	429a      	cmp	r2, r3
 8003828:	d909      	bls.n	800383e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800382a:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4944      	ldr	r1, [pc, #272]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003850:	f7fd feb8 	bl	80015c4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fd feb4 	bl	80015c4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e070      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4930      	ldr	r1, [pc, #192]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
 800389e:	e008      	b.n	80038b2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4a2c      	ldr	r2, [pc, #176]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80038ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d210      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c0:	4b25      	ldr	r3, [pc, #148]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 020f 	bic.w	r2, r3, #15
 80038c8:	4923      	ldr	r1, [pc, #140]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d0:	4b21      	ldr	r3, [pc, #132]	; (8003958 <HAL_RCC_ClockConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e036      	b.n	8003950 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4918      	ldr	r1, [pc, #96]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4910      	ldr	r1, [pc, #64]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003920:	f000 f826 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003924:	4601      	mov	r1, r0
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_RCC_ClockConfig+0x244>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_RCC_ClockConfig+0x24c>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa21 f303 	lsr.w	r3, r1, r3
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x250>)
 800393e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x254>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fded 	bl	8001524 <HAL_InitTick>
 800394a:	4603      	mov	r3, r0
 800394c:	73fb      	strb	r3, [r7, #15]

  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40022000 	.word	0x40022000
 800395c:	40021000 	.word	0x40021000
 8003960:	04c4b400 	.word	0x04c4b400
 8003964:	0800752c 	.word	0x0800752c
 8003968:	20000000 	.word	0x20000000
 800396c:	20000004 	.word	0x20000004

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003988:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d121      	bne.n	80039e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d11e      	bne.n	80039e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039a4:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e005      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10d      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d102      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	e004      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80039f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d133      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0xaa>
 8003a12:	e005      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a16:	617b      	str	r3, [r7, #20]
      break;
 8003a18:	e005      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a1a:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a1c:	617b      	str	r3, [r7, #20]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	617b      	str	r3, [r7, #20]
      break;
 8003a24:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	3301      	adds	r3, #1
 8003a32:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	fb02 f203 	mul.w	r2, r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0e5b      	lsrs	r3, r3, #25
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a66:	69bb      	ldr	r3, [r7, #24]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3724      	adds	r7, #36	; 0x24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08007544 	.word	0x08007544
 8003a7c:	00f42400 	.word	0x00f42400

08003a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800753c 	.word	0x0800753c

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ac8:	f7ff ffda 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003acc:	4601      	mov	r1, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0adb      	lsrs	r3, r3, #11
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	0800753c 	.word	0x0800753c

08003af0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b08:	f7ff f90c 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003b0c:	6178      	str	r0, [r7, #20]
 8003b0e:	e014      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b28:	f7ff f8fc 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003b2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d10b      	bne.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d913      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b4c:	d902      	bls.n	8003b54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b4e:	2302      	movs	r3, #2
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e00d      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e00a      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5e:	d902      	bls.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e004      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d101      	bne.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 020f 	bic.w	r2, r3, #15
 8003b78:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d118      	bne.n	8003bec <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc6:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e005      	b.n	8003be2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d003      	beq.n	8003c08 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003c00:	e005      	b.n	8003c0e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003c04:	613b      	str	r3, [r7, #16]
    break;
 8003c06:	e005      	b.n	8003c14 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003c0a:	613b      	str	r3, [r7, #16]
    break;
 8003c0c:	e002      	b.n	8003c14 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	613b      	str	r3, [r7, #16]
    break;
 8003c12:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	fb02 f203 	mul.w	r2, r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	0e5b      	lsrs	r3, r3, #25
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	3301      	adds	r3, #1
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c54:	683b      	ldr	r3, [r7, #0]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08007544 	.word	0x08007544
 8003c6c:	00f42400 	.word	0x00f42400

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d00b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d804      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ca0:	e01d      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ca2:	2b60      	cmp	r3, #96	; 0x60
 8003ca4:	d01e      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d01c      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003caa:	e018      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cac:	4b86      	ldr	r3, [pc, #536]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a85      	ldr	r2, [pc, #532]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb5d 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cca:	e00c      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3320      	adds	r3, #32
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fc44 	bl	8004560 <RCCEx_PLLSAI2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cec:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfa:	4973      	ldr	r1, [pc, #460]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d02:	e001      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d042      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d00f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d805      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d011      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2c:	d017      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003d2e:	e01f      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d34:	d01f      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d01c      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d3c:	e018      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4a:	e015      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb14 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d5c:	e00c      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3320      	adds	r3, #32
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fbfb 	bl	8004560 <RCCEx_PLLSAI2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	74fb      	strb	r3, [r7, #19]
      break;
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d7e:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	494e      	ldr	r1, [pc, #312]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d94:	e001      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 809f 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da8:	2300      	movs	r3, #0
 8003daa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3a      	ldr	r2, [pc, #232]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dea:	f7fd fbeb 	bl	80015c4 <HAL_GetTick>
 8003dee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df0:	e009      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd fbe7 	bl	80015c4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d902      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	74fb      	strb	r3, [r7, #19]
        break;
 8003e04:	e005      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e06:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ef      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d15b      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01f      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d019      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e42:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e62:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d016      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fba6 	bl	80015c4 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fba2 	bl	80015c4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d902      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	74fb      	strb	r3, [r7, #19]
            break;
 8003e92:	e006      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0ec      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed4:	7c7b      	ldrb	r3, [r7, #17]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4ba0      	ldr	r3, [pc, #640]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a9f      	ldr	r2, [pc, #636]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef2:	4b9a      	ldr	r3, [pc, #616]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f023 0203 	bic.w	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	4996      	ldr	r1, [pc, #600]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f14:	4b91      	ldr	r3, [pc, #580]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 020c 	bic.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	498e      	ldr	r1, [pc, #568]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f36:	4b89      	ldr	r3, [pc, #548]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	4985      	ldr	r1, [pc, #532]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f58:	4b80      	ldr	r3, [pc, #512]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f66:	497d      	ldr	r1, [pc, #500]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f7a:	4b78      	ldr	r3, [pc, #480]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	4974      	ldr	r1, [pc, #464]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f9c:	4b6f      	ldr	r3, [pc, #444]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003faa:	496c      	ldr	r1, [pc, #432]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b67      	ldr	r3, [pc, #412]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fcc:	4963      	ldr	r1, [pc, #396]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fee:	495b      	ldr	r1, [pc, #364]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004002:	4b56      	ldr	r3, [pc, #344]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	4952      	ldr	r1, [pc, #328]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004024:	4b4d      	ldr	r3, [pc, #308]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	494a      	ldr	r1, [pc, #296]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004046:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	4941      	ldr	r1, [pc, #260]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004068:	4b3c      	ldr	r3, [pc, #240]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	4939      	ldr	r1, [pc, #228]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d028      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	4930      	ldr	r1, [pc, #192]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a8:	d106      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040aa:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b4:	60d3      	str	r3, [r2, #12]
 80040b6:	e011      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f959 	bl	8004380 <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d04d      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d108      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004102:	e012      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004110:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004122:	490e      	ldr	r1, [pc, #56]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004132:	d106      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413e:	60d3      	str	r3, [r2, #12]
 8004140:	e020      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414a:	d109      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004156:	60d3      	str	r3, [r2, #12]
 8004158:	e014      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004168:	d10c      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	2101      	movs	r1, #1
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f905 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d028      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004190:	4b7a      	ldr	r3, [pc, #488]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419e:	4977      	ldr	r1, [pc, #476]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ae:	d106      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b72      	ldr	r3, [pc, #456]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a71      	ldr	r2, [pc, #452]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
 80041bc:	e011      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f8d6 	bl	8004380 <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fe:	495f      	ldr	r1, [pc, #380]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2102      	movs	r1, #2
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f8b1 	bl	8004380 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800423a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800423e:	f023 0204 	bic.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	494c      	ldr	r1, [pc, #304]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800425c:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800425e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004262:	f023 0218 	bic.w	r2, r3, #24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	4943      	ldr	r1, [pc, #268]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d035      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3d      	ldr	r2, [pc, #244]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fd f99a 	bl	80015c4 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004292:	e009      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004294:	f7fd f996 	bl	80015c4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	74fb      	strb	r3, [r7, #19]
        break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042a8:	4b34      	ldr	r3, [pc, #208]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ef      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80042bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ca:	492c      	ldr	r1, [pc, #176]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3320      	adds	r3, #32
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f941 	bl	8004560 <RCCEx_PLLSAI2_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	491c      	ldr	r1, [pc, #112]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d10c      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3320      	adds	r3, #32
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f91c 	bl	8004560 <RCCEx_PLLSAI2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	490a      	ldr	r1, [pc, #40]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004364:	d105      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800436c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004370:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004372:	7cbb      	ldrb	r3, [r7, #18]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	4b70      	ldr	r3, [pc, #448]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800439a:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d103      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
       ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d13f      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e03c      	b.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d00c      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x5a>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d013      	beq.n	80043ec <RCCEx_PLLSAI1_Config+0x6c>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d120      	bne.n	800440a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e01a      	b.n	8004410 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043da:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ea:	e013      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ec:	4b58      	ldr	r3, [pc, #352]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f8:	4b55      	ldr	r3, [pc, #340]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004408:	e006      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      break;
 800440e:	e004      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004418:	bf00      	nop
    }

    if(status == HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f023 0203 	bic.w	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4948      	ldr	r1, [pc, #288]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 8086 	bne.w	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a44      	ldr	r2, [pc, #272]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004440:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fd f8bd 	bl	80015c4 <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800444c:	e009      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444e:	f7fd f8b9 	bl	80015c4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	73fb      	strb	r3, [r7, #15]
        break;
 8004460:	e005      	b.n	800446e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ef      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d168      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d113      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6892      	ldr	r2, [r2, #8]
 8004486:	0211      	lsls	r1, r2, #8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	06d2      	lsls	r2, r2, #27
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	3a01      	subs	r2, #1
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	430a      	orrs	r2, r1
 800449a:	492d      	ldr	r1, [pc, #180]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	610b      	str	r3, [r1, #16]
 80044a0:	e02d      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d115      	bne.n	80044d4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a8:	4b29      	ldr	r3, [pc, #164]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
 80044b4:	0211      	lsls	r1, r2, #8
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6912      	ldr	r2, [r2, #16]
 80044ba:	0852      	lsrs	r2, r2, #1
 80044bc:	3a01      	subs	r2, #1
 80044be:	0552      	lsls	r2, r2, #21
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	430a      	orrs	r2, r1
 80044cc:	4920      	ldr	r1, [pc, #128]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
 80044d2:	e014      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <RCCEx_PLLSAI1_Config+0x1dc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6952      	ldr	r2, [r2, #20]
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0652      	lsls	r2, r2, #25
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6852      	ldr	r2, [r2, #4]
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4915      	ldr	r1, [pc, #84]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd f85b 	bl	80015c4 <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004510:	e009      	b.n	8004526 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004512:	f7fd f857 	bl	80015c4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d902      	bls.n	8004526 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	73fb      	strb	r3, [r7, #15]
          break;
 8004524:	e005      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ef      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	07ff800f 	.word	0x07ff800f
 8004558:	ff9f800f 	.word	0xff9f800f
 800455c:	f9ff800f 	.word	0xf9ff800f

08004560 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800457a:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0203 	and.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d103      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
       ||
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13f      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e03c      	b.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d00c      	beq.n	80045ba <RCCEx_PLLSAI2_Config+0x5a>
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d013      	beq.n	80045cc <RCCEx_PLLSAI2_Config+0x6c>
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d120      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e01a      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e013      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10f      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045e8:	e006      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      break;
 80045ee:	e004      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f023 0203 	bic.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4948      	ldr	r1, [pc, #288]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 8086 	bne.w	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a44      	ldr	r2, [pc, #272]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fc ffcd 	bl	80015c4 <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800462c:	e009      	b.n	8004642 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800462e:	f7fc ffc9 	bl	80015c4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d902      	bls.n	8004642 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	73fb      	strb	r3, [r7, #15]
        break;
 8004640:	e005      	b.n	800464e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ef      	bne.n	800462e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d168      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	4b35      	ldr	r3, [pc, #212]	; (8004734 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	0211      	lsls	r1, r2, #8
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68d2      	ldr	r2, [r2, #12]
 800466c:	06d2      	lsls	r2, r2, #27
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6852      	ldr	r2, [r2, #4]
 8004674:	3a01      	subs	r2, #1
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	430a      	orrs	r2, r1
 800467a:	492d      	ldr	r1, [pc, #180]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	614b      	str	r3, [r1, #20]
 8004680:	e02d      	b.n	80046de <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d115      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6892      	ldr	r2, [r2, #8]
 8004694:	0211      	lsls	r1, r2, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6912      	ldr	r2, [r2, #16]
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0552      	lsls	r2, r2, #21
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6852      	ldr	r2, [r2, #4]
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	430a      	orrs	r2, r1
 80046ac:	4920      	ldr	r1, [pc, #128]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	614b      	str	r3, [r1, #20]
 80046b2:	e014      	b.n	80046de <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <RCCEx_PLLSAI2_Config+0x1dc>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6892      	ldr	r2, [r2, #8]
 80046c0:	0211      	lsls	r1, r2, #8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6952      	ldr	r2, [r2, #20]
 80046c6:	0852      	lsrs	r2, r2, #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	0652      	lsls	r2, r2, #25
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6852      	ldr	r2, [r2, #4]
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0112      	lsls	r2, r2, #4
 80046d6:	430a      	orrs	r2, r1
 80046d8:	4915      	ldr	r1, [pc, #84]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fc ff6b 	bl	80015c4 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046f0:	e009      	b.n	8004706 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046f2:	f7fc ff67 	bl	80015c4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	73fb      	strb	r3, [r7, #15]
          break;
 8004704:	e005      	b.n	8004712 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ef      	beq.n	80046f2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	07ff800f 	.word	0x07ff800f
 8004738:	ff9f800f 	.word	0xff9f800f
 800473c:	f9ff800f 	.word	0xf9ff800f

08004740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fd7e 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fb8e 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d018      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xcc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d115      	bne.n	8004892 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_TIM_Base_Start_IT+0xdc>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d015      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d011      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	e008      	b.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	00010007 	.word	0x00010007

080048d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10f      	bne.n	8004918 <HAL_TIM_Base_Stop_IT+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	f240 4344 	movw	r3, #1092	; 0x444
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_TIM_Base_Stop_IT+0x48>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e049      	b.n	80049d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f841 	bl	80049dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 fa97 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa16 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa08 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fa19 	bl	8004e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9ec 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9de 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9ef 	bl	8004e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9c2 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9b4 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f9c5 	bl	8004e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f998 	bl	8004e64 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f98a 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f99b 	bl	8004e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc faca 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fd78 	bl	8005690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fd6b 	bl	80056a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f949 	bl	8004e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0220 	mvn.w	r2, #32
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fd2b 	bl	800567c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e0fd      	b.n	8004e46 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b14      	cmp	r3, #20
 8004c56:	f200 80f0 	bhi.w	8004e3a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004e3b 	.word	0x08004e3b
 8004c68:	08004e3b 	.word	0x08004e3b
 8004c6c:	08004e3b 	.word	0x08004e3b
 8004c70:	08004cf5 	.word	0x08004cf5
 8004c74:	08004e3b 	.word	0x08004e3b
 8004c78:	08004e3b 	.word	0x08004e3b
 8004c7c:	08004e3b 	.word	0x08004e3b
 8004c80:	08004d37 	.word	0x08004d37
 8004c84:	08004e3b 	.word	0x08004e3b
 8004c88:	08004e3b 	.word	0x08004e3b
 8004c8c:	08004e3b 	.word	0x08004e3b
 8004c90:	08004d77 	.word	0x08004d77
 8004c94:	08004e3b 	.word	0x08004e3b
 8004c98:	08004e3b 	.word	0x08004e3b
 8004c9c:	08004e3b 	.word	0x08004e3b
 8004ca0:	08004db9 	.word	0x08004db9
 8004ca4:	08004e3b 	.word	0x08004e3b
 8004ca8:	08004e3b 	.word	0x08004e3b
 8004cac:	08004e3b 	.word	0x08004e3b
 8004cb0:	08004df9 	.word	0x08004df9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f98a 	bl	8004fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6999      	ldr	r1, [r3, #24]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
      break;
 8004cf2:	e0a3      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f9fa 	bl	80050f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6999      	ldr	r1, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	619a      	str	r2, [r3, #24]
      break;
 8004d34:	e082      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fa63 	bl	8005208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0208 	orr.w	r2, r2, #8
 8004d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0204 	bic.w	r2, r2, #4
 8004d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69d9      	ldr	r1, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	61da      	str	r2, [r3, #28]
      break;
 8004d74:	e062      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 facb 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	61da      	str	r2, [r3, #28]
      break;
 8004db6:	e041      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb14 	bl	80053ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0204 	bic.w	r2, r2, #4
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004df6:	e021      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb58 	bl	80054b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a40      	ldr	r2, [pc, #256]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <TIM_Base_SetConfig+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <TIM_Base_SetConfig+0x11c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <TIM_Base_SetConfig+0x120>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3a      	ldr	r2, [pc, #232]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01f      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d01b      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <TIM_Base_SetConfig+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d017      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	; (8004fbc <TIM_Base_SetConfig+0x11c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <TIM_Base_SetConfig+0x120>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <TIM_Base_SetConfig+0x128>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <TIM_Base_SetConfig+0x12c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <TIM_Base_SetConfig+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <TIM_Base_SetConfig+0x114>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <TIM_Base_SetConfig+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <TIM_Base_SetConfig+0x128>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <TIM_Base_SetConfig+0x12c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <TIM_Base_SetConfig+0x130>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d103      	bne.n	8004fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40013400 	.word	0x40013400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800

08004fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0201 	bic.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0302 	bic.w	r3, r3, #2
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <TIM_OC1_SetConfig+0x10c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00f      	beq.n	8005054 <TIM_OC1_SetConfig+0x80>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a2b      	ldr	r2, [pc, #172]	; (80050e4 <TIM_OC1_SetConfig+0x110>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC1_SetConfig+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <TIM_OC1_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC1_SetConfig+0x80>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a29      	ldr	r2, [pc, #164]	; (80050ec <TIM_OC1_SetConfig+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC1_SetConfig+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_OC1_SetConfig+0x11c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10c      	bne.n	800506e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0308 	bic.w	r3, r3, #8
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <TIM_OC1_SetConfig+0x10c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_OC1_SetConfig+0xc2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <TIM_OC1_SetConfig+0x110>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_OC1_SetConfig+0xc2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <TIM_OC1_SetConfig+0x114>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC1_SetConfig+0xc2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a18      	ldr	r2, [pc, #96]	; (80050ec <TIM_OC1_SetConfig+0x118>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC1_SetConfig+0xc2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a17      	ldr	r2, [pc, #92]	; (80050f0 <TIM_OC1_SetConfig+0x11c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0320 	bic.w	r3, r3, #32
 8005142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <TIM_OC2_SetConfig+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0x6c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <TIM_OC2_SetConfig+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10d      	bne.n	800517c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <TIM_OC2_SetConfig+0x100>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_OC2_SetConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <TIM_OC2_SetConfig+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_OC2_SetConfig+0xb0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <TIM_OC2_SetConfig+0x108>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_OC2_SetConfig+0xb0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <TIM_OC2_SetConfig+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC2_SetConfig+0xb0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a19      	ldr	r2, [pc, #100]	; (8005204 <TIM_OC2_SetConfig+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d113      	bne.n	80051cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40013400 	.word	0x40013400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800

08005208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_OC3_SetConfig+0xfc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0x6a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_OC3_SetConfig+0x100>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <TIM_OC3_SetConfig+0xfc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_OC3_SetConfig+0xae>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <TIM_OC3_SetConfig+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_OC3_SetConfig+0xae>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1a      	ldr	r2, [pc, #104]	; (800530c <TIM_OC3_SetConfig+0x104>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_OC3_SetConfig+0xae>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <TIM_OC3_SetConfig+0x108>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0xae>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a18      	ldr	r2, [pc, #96]	; (8005314 <TIM_OC3_SetConfig+0x10c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d113      	bne.n	80052de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_OC4_SetConfig+0xc0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_OC4_SetConfig+0x84>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC4_SetConfig+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_OC4_SetConfig+0x84>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC4_SetConfig+0xc8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_OC4_SetConfig+0x84>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <TIM_OC4_SetConfig+0xcc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC4_SetConfig+0x84>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC4_SetConfig+0xd0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40013400 	.word	0x40013400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800

080053ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <TIM_OC5_SetConfig+0xb4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00f      	beq.n	8005466 <TIM_OC5_SetConfig+0x7a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <TIM_OC5_SetConfig+0xb8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_OC5_SetConfig+0x7a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_OC5_SetConfig+0xbc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_OC5_SetConfig+0x7a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a14      	ldr	r2, [pc, #80]	; (80054ac <TIM_OC5_SetConfig+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC5_SetConfig+0x7a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <TIM_OC5_SetConfig+0xc4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d109      	bne.n	800547a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	051b      	lsls	r3, r3, #20
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_OC6_SetConfig+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_OC6_SetConfig+0x7c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <TIM_OC6_SetConfig+0xbc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_OC6_SetConfig+0x7c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a16      	ldr	r2, [pc, #88]	; (8005574 <TIM_OC6_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_OC6_SetConfig+0x7c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <TIM_OC6_SetConfig+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC6_SetConfig+0x7c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a14      	ldr	r2, [pc, #80]	; (800557c <TIM_OC6_SetConfig+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005598:	2302      	movs	r3, #2
 800559a:	e065      	b.n	8005668 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a16      	ldr	r2, [pc, #88]	; (8005674 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d115      	bne.n	8005656 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	051b      	lsls	r3, r3, #20
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40013400 	.word	0x40013400

0800567c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e042      	b.n	8005750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fb fde9 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2224      	movs	r2, #36	; 0x24
 80056e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fb30 	bl	8005d60 <UART_SetConfig>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e022      	b.n	8005750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fdf6 	bl	8006304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fe7d 	bl	8006448 <UART_CheckIdleState>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576e:	2b20      	cmp	r3, #32
 8005770:	f040 8084 	bne.w	800587c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Transmit+0x28>
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e07c      	b.n	800587e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_UART_Transmit+0x3a>
 800578e:	2302      	movs	r3, #2
 8005790:	e075      	b.n	800587e <HAL_UART_Transmit+0x126>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2221      	movs	r2, #33	; 0x21
 80057a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80057aa:	f7fb ff0b 	bl	80015c4 <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d108      	bne.n	80057dc <HAL_UART_Transmit+0x84>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e003      	b.n	80057e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80057ec:	e02d      	b.n	800584a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fe6d 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e03a      	b.n	800587e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	881a      	ldrh	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800581a:	b292      	uxth	r2, r2
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	3302      	adds	r3, #2
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e008      	b.n	8005838 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	b292      	uxth	r2, r2
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1cb      	bne.n	80057ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2140      	movs	r1, #64	; 0x40
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fe39 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e006      	b.n	800587e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	e000      	b.n	800587e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800587c:	2302      	movs	r3, #2
  }
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589c:	2b20      	cmp	r3, #32
 800589e:	f040 80bc 	bne.w	8005a1a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_UART_Receive_IT+0x26>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0b4      	b.n	8005a1c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Receive_IT+0x38>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0ad      	b.n	8005a1c <HAL_UART_Receive_IT+0x194>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d10e      	bne.n	800590c <HAL_UART_Receive_IT+0x84>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <HAL_UART_Receive_IT+0x7a>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005900:	e02d      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800590a:	e028      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_UART_Receive_IT+0xa8>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_UART_Receive_IT+0x9e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005924:	e01b      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	227f      	movs	r2, #127	; 0x7f
 800592a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800592e:	e016      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005938:	d10d      	bne.n	8005956 <HAL_UART_Receive_IT+0xce>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <HAL_UART_Receive_IT+0xc4>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	227f      	movs	r2, #127	; 0x7f
 8005946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800594a:	e008      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	223f      	movs	r2, #63	; 0x3f
 8005950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005954:	e003      	b.n	800595e <HAL_UART_Receive_IT+0xd6>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2222      	movs	r2, #34	; 0x22
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005986:	d12a      	bne.n	80059de <HAL_UART_Receive_IT+0x156>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	429a      	cmp	r2, r3
 8005992:	d324      	bcc.n	80059de <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	d107      	bne.n	80059ae <HAL_UART_Receive_IT+0x126>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <HAL_UART_Receive_IT+0x1a0>)
 80059aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80059ac:	e002      	b.n	80059b4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_UART_Receive_IT+0x1a4>)
 80059b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ca:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	e01b      	b.n	8005a16 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	d107      	bne.n	80059f8 <HAL_UART_Receive_IT+0x170>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <HAL_UART_Receive_IT+0x1a8>)
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80059f6:	e002      	b.n	80059fe <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <HAL_UART_Receive_IT+0x1ac>)
 80059fc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005a14:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
  }
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	080068e9 	.word	0x080068e9
 8005a2c:	080067dd 	.word	0x080067dd
 8005a30:	0800672d 	.word	0x0800672d
 8005a34:	0800667f 	.word	0x0800667f

08005a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d118      	bne.n	8005a9a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d013      	beq.n	8005a9a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8145 	beq.w	8005d1a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
      }
      return;
 8005a98:	e13f      	b.n	8005d1a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80e8 	beq.w	8005c72 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4ba1      	ldr	r3, [pc, #644]	; (8005d2c <HAL_UART_IRQHandler+0x2f4>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4ba0      	ldr	r3, [pc, #640]	; (8005d30 <HAL_UART_IRQHandler+0x2f8>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80dd 	beq.w	8005c72 <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d010      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xac>
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d010      	beq.n	8005b10 <HAL_UART_IRQHandler+0xd8>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2202      	movs	r2, #2
 8005afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d010      	beq.n	8005b3c <HAL_UART_IRQHandler+0x104>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f043 0202 	orr.w	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d015      	beq.n	8005b72 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_UART_IRQHandler+0x2f4>)
 8005b54:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2208      	movs	r2, #8
 8005b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f043 0208 	orr.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x168>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80b9 	beq.w	8005d1e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d004      	beq.n	8005bfa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d031      	beq.n	8005c5e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fcec 	bl	80065d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d123      	bne.n	8005c56 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d013      	beq.n	8005c4e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2a:	4a42      	ldr	r2, [pc, #264]	; (8005d34 <HAL_UART_IRQHandler+0x2fc>)
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fc fe53 	bl	80028de <HAL_DMA_Abort_IT>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d017      	beq.n	8005c6e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	e00f      	b.n	8005c6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f87c 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	e00b      	b.n	8005c6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f878 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e007      	b.n	8005c6e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f874 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005c6c:	e057      	b.n	8005d1e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6e:	bf00      	nop
    return;
 8005c70:	e055      	b.n	8005d1e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <HAL_UART_IRQHandler+0x260>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 feaf 	bl	80069f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c96:	e045      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d031      	beq.n	8005d22 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
    }
    return;
 8005cc6:	e02c      	b.n	8005d22 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x2ac>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fcb4 	bl	800664a <UART_EndTransmit_IT>
    return;
 8005ce2:	e01f      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_UART_IRQHandler+0x2c8>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fe8f 	bl	8006a1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cfe:	e011      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da09      	bge.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fe79 	bl	8006a08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d16:	bf00      	nop
 8005d18:	e004      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d22:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	10000001 	.word	0x10000001
 8005d30:	04000120 	.word	0x04000120
 8005d34:	0800661f 	.word	0x0800661f

08005d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d64:	b088      	sub	sp, #32
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4bb1      	ldr	r3, [pc, #708]	; (800605c <UART_SetConfig+0x2fc>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4aa6      	ldr	r2, [pc, #664]	; (8006060 <UART_SetConfig+0x300>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	69f9      	ldr	r1, [r7, #28]
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	f023 010f 	bic.w	r1, r3, #15
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a97      	ldr	r2, [pc, #604]	; (8006064 <UART_SetConfig+0x304>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d121      	bne.n	8005e50 <UART_SetConfig+0xf0>
 8005e0c:	4b96      	ldr	r3, [pc, #600]	; (8006068 <UART_SetConfig+0x308>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d816      	bhi.n	8005e48 <UART_SetConfig+0xe8>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0xc0>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e37 	.word	0x08005e37
 8005e2c:	08005e43 	.word	0x08005e43
 8005e30:	2301      	movs	r3, #1
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e0e8      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005e36:	2302      	movs	r3, #2
 8005e38:	76fb      	strb	r3, [r7, #27]
 8005e3a:	e0e5      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	e0e2      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005e42:	2308      	movs	r3, #8
 8005e44:	76fb      	strb	r3, [r7, #27]
 8005e46:	e0df      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	76fb      	strb	r3, [r7, #27]
 8005e4c:	bf00      	nop
 8005e4e:	e0db      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a85      	ldr	r2, [pc, #532]	; (800606c <UART_SetConfig+0x30c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d134      	bne.n	8005ec4 <UART_SetConfig+0x164>
 8005e5a:	4b83      	ldr	r3, [pc, #524]	; (8006068 <UART_SetConfig+0x308>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	d829      	bhi.n	8005ebc <UART_SetConfig+0x15c>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x110>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005ebd 	.word	0x08005ebd
 8005e78:	08005ebd 	.word	0x08005ebd
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005eb1 	.word	0x08005eb1
 8005e84:	08005ebd 	.word	0x08005ebd
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	08005ebd 	.word	0x08005ebd
 8005e90:	08005eab 	.word	0x08005eab
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ebd 	.word	0x08005ebd
 8005ea0:	08005eb7 	.word	0x08005eb7
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	76fb      	strb	r3, [r7, #27]
 8005ea8:	e0ae      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	76fb      	strb	r3, [r7, #27]
 8005eae:	e0ab      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	76fb      	strb	r3, [r7, #27]
 8005eb4:	e0a8      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	76fb      	strb	r3, [r7, #27]
 8005eba:	e0a5      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	76fb      	strb	r3, [r7, #27]
 8005ec0:	bf00      	nop
 8005ec2:	e0a1      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a69      	ldr	r2, [pc, #420]	; (8006070 <UART_SetConfig+0x310>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d120      	bne.n	8005f10 <UART_SetConfig+0x1b0>
 8005ece:	4b66      	ldr	r3, [pc, #408]	; (8006068 <UART_SetConfig+0x308>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d00f      	beq.n	8005efc <UART_SetConfig+0x19c>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d802      	bhi.n	8005ee6 <UART_SetConfig+0x186>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <UART_SetConfig+0x190>
 8005ee4:	e010      	b.n	8005f08 <UART_SetConfig+0x1a8>
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d005      	beq.n	8005ef6 <UART_SetConfig+0x196>
 8005eea:	2b30      	cmp	r3, #48	; 0x30
 8005eec:	d009      	beq.n	8005f02 <UART_SetConfig+0x1a2>
 8005eee:	e00b      	b.n	8005f08 <UART_SetConfig+0x1a8>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	76fb      	strb	r3, [r7, #27]
 8005ef4:	e088      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	76fb      	strb	r3, [r7, #27]
 8005efa:	e085      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005efc:	2304      	movs	r3, #4
 8005efe:	76fb      	strb	r3, [r7, #27]
 8005f00:	e082      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f02:	2308      	movs	r3, #8
 8005f04:	76fb      	strb	r3, [r7, #27]
 8005f06:	e07f      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	76fb      	strb	r3, [r7, #27]
 8005f0c:	bf00      	nop
 8005f0e:	e07b      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a57      	ldr	r2, [pc, #348]	; (8006074 <UART_SetConfig+0x314>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d120      	bne.n	8005f5c <UART_SetConfig+0x1fc>
 8005f1a:	4b53      	ldr	r3, [pc, #332]	; (8006068 <UART_SetConfig+0x308>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d00f      	beq.n	8005f48 <UART_SetConfig+0x1e8>
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d802      	bhi.n	8005f32 <UART_SetConfig+0x1d2>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <UART_SetConfig+0x1dc>
 8005f30:	e010      	b.n	8005f54 <UART_SetConfig+0x1f4>
 8005f32:	2b80      	cmp	r3, #128	; 0x80
 8005f34:	d005      	beq.n	8005f42 <UART_SetConfig+0x1e2>
 8005f36:	2bc0      	cmp	r3, #192	; 0xc0
 8005f38:	d009      	beq.n	8005f4e <UART_SetConfig+0x1ee>
 8005f3a:	e00b      	b.n	8005f54 <UART_SetConfig+0x1f4>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	76fb      	strb	r3, [r7, #27]
 8005f40:	e062      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f42:	2302      	movs	r3, #2
 8005f44:	76fb      	strb	r3, [r7, #27]
 8005f46:	e05f      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	76fb      	strb	r3, [r7, #27]
 8005f4c:	e05c      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f4e:	2308      	movs	r3, #8
 8005f50:	76fb      	strb	r3, [r7, #27]
 8005f52:	e059      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f54:	2310      	movs	r3, #16
 8005f56:	76fb      	strb	r3, [r7, #27]
 8005f58:	bf00      	nop
 8005f5a:	e055      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a45      	ldr	r2, [pc, #276]	; (8006078 <UART_SetConfig+0x318>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d124      	bne.n	8005fb0 <UART_SetConfig+0x250>
 8005f66:	4b40      	ldr	r3, [pc, #256]	; (8006068 <UART_SetConfig+0x308>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f74:	d012      	beq.n	8005f9c <UART_SetConfig+0x23c>
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7a:	d802      	bhi.n	8005f82 <UART_SetConfig+0x222>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <UART_SetConfig+0x230>
 8005f80:	e012      	b.n	8005fa8 <UART_SetConfig+0x248>
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d006      	beq.n	8005f96 <UART_SetConfig+0x236>
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8c:	d009      	beq.n	8005fa2 <UART_SetConfig+0x242>
 8005f8e:	e00b      	b.n	8005fa8 <UART_SetConfig+0x248>
 8005f90:	2300      	movs	r3, #0
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	e038      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f96:	2302      	movs	r3, #2
 8005f98:	76fb      	strb	r3, [r7, #27]
 8005f9a:	e035      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	76fb      	strb	r3, [r7, #27]
 8005fa0:	e032      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	76fb      	strb	r3, [r7, #27]
 8005fa6:	e02f      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	76fb      	strb	r3, [r7, #27]
 8005fac:	bf00      	nop
 8005fae:	e02b      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <UART_SetConfig+0x300>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d124      	bne.n	8006004 <UART_SetConfig+0x2a4>
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <UART_SetConfig+0x308>)
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d012      	beq.n	8005ff0 <UART_SetConfig+0x290>
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fce:	d802      	bhi.n	8005fd6 <UART_SetConfig+0x276>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <UART_SetConfig+0x284>
 8005fd4:	e012      	b.n	8005ffc <UART_SetConfig+0x29c>
 8005fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fda:	d006      	beq.n	8005fea <UART_SetConfig+0x28a>
 8005fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fe0:	d009      	beq.n	8005ff6 <UART_SetConfig+0x296>
 8005fe2:	e00b      	b.n	8005ffc <UART_SetConfig+0x29c>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	76fb      	strb	r3, [r7, #27]
 8005fe8:	e00e      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005fea:	2302      	movs	r3, #2
 8005fec:	76fb      	strb	r3, [r7, #27]
 8005fee:	e00b      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	76fb      	strb	r3, [r7, #27]
 8005ff4:	e008      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	76fb      	strb	r3, [r7, #27]
 8005ffa:	e005      	b.n	8006008 <UART_SetConfig+0x2a8>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	76fb      	strb	r3, [r7, #27]
 8006000:	bf00      	nop
 8006002:	e001      	b.n	8006008 <UART_SetConfig+0x2a8>
 8006004:	2310      	movs	r3, #16
 8006006:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <UART_SetConfig+0x300>)
 800600e:	4293      	cmp	r3, r2
 8006010:	f040 80a1 	bne.w	8006156 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006014:	7efb      	ldrb	r3, [r7, #27]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d836      	bhi.n	8006088 <UART_SetConfig+0x328>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x2c0>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006045 	.word	0x08006045
 8006024:	08006089 	.word	0x08006089
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006089 	.word	0x08006089
 8006030:	08006053 	.word	0x08006053
 8006034:	08006089 	.word	0x08006089
 8006038:	08006089 	.word	0x08006089
 800603c:	08006089 	.word	0x08006089
 8006040:	08006081 	.word	0x08006081
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fd fd28 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8006048:	6178      	str	r0, [r7, #20]
        break;
 800604a:	e022      	b.n	8006092 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <UART_SetConfig+0x31c>)
 800604e:	617b      	str	r3, [r7, #20]
        break;
 8006050:	e01f      	b.n	8006092 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fd fc8d 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8006056:	6178      	str	r0, [r7, #20]
        break;
 8006058:	e01b      	b.n	8006092 <UART_SetConfig+0x332>
 800605a:	bf00      	nop
 800605c:	cfff69f3 	.word	0xcfff69f3
 8006060:	40008000 	.word	0x40008000
 8006064:	40013800 	.word	0x40013800
 8006068:	40021000 	.word	0x40021000
 800606c:	40004400 	.word	0x40004400
 8006070:	40004800 	.word	0x40004800
 8006074:	40004c00 	.word	0x40004c00
 8006078:	40005000 	.word	0x40005000
 800607c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006084:	617b      	str	r3, [r7, #20]
        break;
 8006086:	e004      	b.n	8006092 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	76bb      	strb	r3, [r7, #26]
        break;
 8006090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 811d 	beq.w	80062d4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	4a97      	ldr	r2, [pc, #604]	; (80062fc <UART_SetConfig+0x59c>)
 80060a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a4:	461a      	mov	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d305      	bcc.n	80060ca <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d902      	bls.n	80060d0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	76bb      	strb	r3, [r7, #26]
 80060ce:	e101      	b.n	80062d4 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f04f 0100 	mov.w	r1, #0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	4a87      	ldr	r2, [pc, #540]	; (80062fc <UART_SetConfig+0x59c>)
 80060de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f04f 0400 	mov.w	r4, #0
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	f7fa f8f0 	bl	80002d0 <__aeabi_uldivmod>
 80060f0:	4603      	mov	r3, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	4619      	mov	r1, r3
 80060f6:	4622      	mov	r2, r4
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	f04f 0400 	mov.w	r4, #0
 8006100:	0214      	lsls	r4, r2, #8
 8006102:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006106:	020b      	lsls	r3, r1, #8
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6852      	ldr	r2, [r2, #4]
 800610c:	0852      	lsrs	r2, r2, #1
 800610e:	4611      	mov	r1, r2
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	eb13 0b01 	adds.w	fp, r3, r1
 8006118:	eb44 0c02 	adc.w	ip, r4, r2
 800611c:	4658      	mov	r0, fp
 800611e:	4661      	mov	r1, ip
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f04f 0400 	mov.w	r4, #0
 8006128:	461a      	mov	r2, r3
 800612a:	4623      	mov	r3, r4
 800612c:	f7fa f8d0 	bl	80002d0 <__aeabi_uldivmod>
 8006130:	4603      	mov	r3, r0
 8006132:	460c      	mov	r4, r1
 8006134:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613c:	d308      	bcc.n	8006150 <UART_SetConfig+0x3f0>
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006144:	d204      	bcs.n	8006150 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e0c1      	b.n	80062d4 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	76bb      	strb	r3, [r7, #26]
 8006154:	e0be      	b.n	80062d4 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615e:	d164      	bne.n	800622a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006160:	7efb      	ldrb	r3, [r7, #27]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d827      	bhi.n	80061b6 <UART_SetConfig+0x456>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x40c>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061a7 	.word	0x080061a7
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061b7 	.word	0x080061b7
 800618c:	080061af 	.word	0x080061af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006190:	f7fd fc82 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8006194:	6178      	str	r0, [r7, #20]
        break;
 8006196:	e013      	b.n	80061c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd fc94 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 800619c:	6178      	str	r0, [r7, #20]
        break;
 800619e:	e00f      	b.n	80061c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b57      	ldr	r3, [pc, #348]	; (8006300 <UART_SetConfig+0x5a0>)
 80061a2:	617b      	str	r3, [r7, #20]
        break;
 80061a4:	e00c      	b.n	80061c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fd fbe3 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 80061aa:	6178      	str	r0, [r7, #20]
        break;
 80061ac:	e008      	b.n	80061c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	617b      	str	r3, [r7, #20]
        break;
 80061b4:	e004      	b.n	80061c0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	76bb      	strb	r3, [r7, #26]
        break;
 80061be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8086 	beq.w	80062d4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	4a4b      	ldr	r2, [pc, #300]	; (80062fc <UART_SetConfig+0x59c>)
 80061ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d2:	461a      	mov	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061da:	005a      	lsls	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	441a      	add	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	d916      	bls.n	8006224 <UART_SetConfig+0x4c4>
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fc:	d212      	bcs.n	8006224 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f023 030f 	bic.w	r3, r3, #15
 8006206:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	b29a      	uxth	r2, r3
 8006214:	89fb      	ldrh	r3, [r7, #14]
 8006216:	4313      	orrs	r3, r2
 8006218:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	89fa      	ldrh	r2, [r7, #14]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e057      	b.n	80062d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	76bb      	strb	r3, [r7, #26]
 8006228:	e054      	b.n	80062d4 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800622a:	7efb      	ldrb	r3, [r7, #27]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d828      	bhi.n	8006282 <UART_SetConfig+0x522>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0x4d8>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	08006283 	.word	0x08006283
 8006248:	08006273 	.word	0x08006273
 800624c:	08006283 	.word	0x08006283
 8006250:	08006283 	.word	0x08006283
 8006254:	08006283 	.word	0x08006283
 8006258:	0800627b 	.word	0x0800627b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fd fc1c 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8006260:	6178      	str	r0, [r7, #20]
        break;
 8006262:	e013      	b.n	800628c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006264:	f7fd fc2e 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8006268:	6178      	str	r0, [r7, #20]
        break;
 800626a:	e00f      	b.n	800628c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <UART_SetConfig+0x5a0>)
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e00c      	b.n	800628c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fd fb7d 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8006276:	6178      	str	r0, [r7, #20]
        break;
 8006278:	e008      	b.n	800628c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	617b      	str	r3, [r7, #20]
        break;
 8006280:	e004      	b.n	800628c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	76bb      	strb	r3, [r7, #26]
        break;
 800628a:	bf00      	nop
    }

    if (pclk != 0U)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	4a19      	ldr	r2, [pc, #100]	; (80062fc <UART_SetConfig+0x59c>)
 8006298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629c:	461a      	mov	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d908      	bls.n	80062d0 <UART_SetConfig+0x570>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d204      	bcs.n	80062d0 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	e001      	b.n	80062d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80062f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80062fc:	08007574 	.word	0x08007574
 8006300:	00f42400 	.word	0x00f42400

08006304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006402:	d10a      	bne.n	800641a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006458:	f7fb f8b4 	bl	80015c4 <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b08      	cmp	r3, #8
 800646a:	d10e      	bne.n	800648a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f82c 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e022      	b.n	80064d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d10e      	bne.n	80064b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f816 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e00c      	b.n	80064d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	e062      	b.n	80065b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d05e      	beq.n	80065b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fb f867 	bl	80015c4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <UART_WaitOnFlagUntilTimeout+0x30>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11d      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006516:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e045      	b.n	80065d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02e      	beq.n	80065b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006560:	d126      	bne.n	80065b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800657a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e00f      	b.n	80065d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	429a      	cmp	r2, r3
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d08d      	beq.n	80064ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff fb85 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fb61 	bl	8005d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800668c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006694:	2b22      	cmp	r3, #34	; 0x22
 8006696:	d13b      	bne.n	8006710 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800669e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066a0:	89bb      	ldrh	r3, [r7, #12]
 80066a2:	b2d9      	uxtb	r1, r3
 80066a4:	89fb      	ldrh	r3, [r7, #14]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ac:	400a      	ands	r2, r1
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d124      	bne.n	8006724 <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066e8:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fa fd17 	bl	800113c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800670e:	e009      	b.n	8006724 <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	8b1b      	ldrh	r3, [r3, #24]
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0208 	orr.w	r2, r2, #8
 8006720:	b292      	uxth	r2, r2
 8006722:	831a      	strh	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800673a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006742:	2b22      	cmp	r3, #34	; 0x22
 8006744:	d13b      	bne.n	80067be <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800674c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006754:	89ba      	ldrh	r2, [r7, #12]
 8006756:	89fb      	ldrh	r3, [r7, #14]
 8006758:	4013      	ands	r3, r2
 800675a:	b29a      	uxth	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006764:	1c9a      	adds	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d124      	bne.n	80067d2 <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006796:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa fcc0 	bl	800113c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067bc:	e009      	b.n	80067d2 <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	8b1b      	ldrh	r3, [r3, #24]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0208 	orr.w	r2, r2, #8
 80067ce:	b292      	uxth	r2, r2
 80067d0:	831a      	strh	r2, [r3, #24]
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067ea:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f2:	2b22      	cmp	r3, #34	; 0x22
 80067f4:	d168      	bne.n	80068c8 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067fc:	81fb      	strh	r3, [r7, #14]
 80067fe:	e03f      	b.n	8006880 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006806:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006808:	893b      	ldrh	r3, [r7, #8]
 800680a:	b2d9      	uxtb	r1, r3
 800680c:	89bb      	ldrh	r3, [r7, #12]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	400a      	ands	r2, r1
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11b      	bne.n	800687a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006850:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fa fc61 	bl	800113c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800687a:	89fb      	ldrh	r3, [r7, #14]
 800687c:	3b01      	subs	r3, #1
 800687e:	81fb      	strh	r3, [r7, #14]
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1bc      	bne.n	8006800 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800688c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d023      	beq.n	80068dc <UART_RxISR_8BIT_FIFOEN+0x100>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800689a:	897a      	ldrh	r2, [r7, #10]
 800689c:	429a      	cmp	r2, r3
 800689e:	d21d      	bcs.n	80068dc <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <UART_RxISR_8BIT_FIFOEN+0x108>)
 80068b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0220 	orr.w	r2, r2, #32
 80068c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068c6:	e009      	b.n	80068dc <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	8b1b      	ldrh	r3, [r3, #24]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0208 	orr.w	r2, r2, #8
 80068d8:	b292      	uxth	r2, r2
 80068da:	831a      	strh	r2, [r3, #24]
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	0800667f 	.word	0x0800667f

080068e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068f6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	2b22      	cmp	r3, #34	; 0x22
 8006900:	d168      	bne.n	80069d4 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006908:	82fb      	strh	r3, [r7, #22]
 800690a:	e03f      	b.n	800698c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006912:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006918:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800691a:	8a3a      	ldrh	r2, [r7, #16]
 800691c:	8abb      	ldrh	r3, [r7, #20]
 800691e:	4013      	ands	r3, r2
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692a:	1c9a      	adds	r2, r3, #2
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d11b      	bne.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800695c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fa fbdb 	bl	800113c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	3b01      	subs	r3, #1
 800698a:	82fb      	strh	r3, [r7, #22]
 800698c:	8afb      	ldrh	r3, [r7, #22]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1bc      	bne.n	800690c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006998:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800699a:	8a7b      	ldrh	r3, [r7, #18]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d023      	beq.n	80069e8 <UART_RxISR_16BIT_FIFOEN+0x100>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069a6:	8a7a      	ldrh	r2, [r7, #18]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d21d      	bcs.n	80069e8 <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80069ba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <UART_RxISR_16BIT_FIFOEN+0x108>)
 80069c0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0220 	orr.w	r2, r2, #32
 80069d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069d2:	e009      	b.n	80069e8 <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	8b1b      	ldrh	r3, [r3, #24]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0208 	orr.w	r2, r2, #8
 80069e4:	b292      	uxth	r2, r2
 80069e6:	831a      	strh	r2, [r3, #24]
}
 80069e8:	bf00      	nop
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	0800672d 	.word	0x0800672d

080069f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e027      	b.n	8006a96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2224      	movs	r2, #36	; 0x24
 8006a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e02d      	b.n	8006b16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2224      	movs	r2, #36	; 0x24
 8006ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0201 	bic.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f850 	bl	8006b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e02d      	b.n	8006b92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2224      	movs	r2, #36	; 0x24
 8006b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f812 	bl	8006b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <UARTEx_SetNbDataToProcess+0xc8>)
 8006ba6:	f107 0314 	add.w	r3, r7, #20
 8006baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <UARTEx_SetNbDataToProcess+0xcc>)
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bbc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d108      	bne.n	8006bda <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bd8:	e03d      	b.n	8006c56 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bda:	2308      	movs	r3, #8
 8006bdc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bde:	2308      	movs	r3, #8
 8006be0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	0e5b      	lsrs	r3, r3, #25
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	0f5b      	lsrs	r3, r3, #29
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c02:	7fbb      	ldrb	r3, [r7, #30]
 8006c04:	7f3a      	ldrb	r2, [r7, #28]
 8006c06:	f107 0120 	add.w	r1, r7, #32
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	7f3a      	ldrb	r2, [r7, #28]
 8006c16:	f107 0120 	add.w	r1, r7, #32
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c2c:	7ffb      	ldrb	r3, [r7, #31]
 8006c2e:	7f7a      	ldrb	r2, [r7, #29]
 8006c30:	f107 0120 	add.w	r1, r7, #32
 8006c34:	440a      	add	r2, r1
 8006c36:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	7f7a      	ldrb	r2, [r7, #29]
 8006c40:	f107 0120 	add.w	r1, r7, #32
 8006c44:	440a      	add	r2, r1
 8006c46:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c56:	bf00      	nop
 8006c58:	3724      	adds	r7, #36	; 0x24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	0800751c 	.word	0x0800751c
 8006c68:	08007524 	.word	0x08007524

08006c6c <__errno>:
 8006c6c:	4b01      	ldr	r3, [pc, #4]	; (8006c74 <__errno+0x8>)
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c

08006c78 <__libc_init_array>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4e0d      	ldr	r6, [pc, #52]	; (8006cb0 <__libc_init_array+0x38>)
 8006c7c:	4c0d      	ldr	r4, [pc, #52]	; (8006cb4 <__libc_init_array+0x3c>)
 8006c7e:	1ba4      	subs	r4, r4, r6
 8006c80:	10a4      	asrs	r4, r4, #2
 8006c82:	2500      	movs	r5, #0
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d109      	bne.n	8006c9c <__libc_init_array+0x24>
 8006c88:	4e0b      	ldr	r6, [pc, #44]	; (8006cb8 <__libc_init_array+0x40>)
 8006c8a:	4c0c      	ldr	r4, [pc, #48]	; (8006cbc <__libc_init_array+0x44>)
 8006c8c:	f000 fc26 	bl	80074dc <_init>
 8006c90:	1ba4      	subs	r4, r4, r6
 8006c92:	10a4      	asrs	r4, r4, #2
 8006c94:	2500      	movs	r5, #0
 8006c96:	42a5      	cmp	r5, r4
 8006c98:	d105      	bne.n	8006ca6 <__libc_init_array+0x2e>
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ca0:	4798      	blx	r3
 8006ca2:	3501      	adds	r5, #1
 8006ca4:	e7ee      	b.n	8006c84 <__libc_init_array+0xc>
 8006ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006caa:	4798      	blx	r3
 8006cac:	3501      	adds	r5, #1
 8006cae:	e7f2      	b.n	8006c96 <__libc_init_array+0x1e>
 8006cb0:	080075c8 	.word	0x080075c8
 8006cb4:	080075c8 	.word	0x080075c8
 8006cb8:	080075c8 	.word	0x080075c8
 8006cbc:	080075cc 	.word	0x080075cc

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <siprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b500      	push	{lr}
 8006cd4:	b09c      	sub	sp, #112	; 0x70
 8006cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cd8:	9002      	str	r0, [sp, #8]
 8006cda:	9006      	str	r0, [sp, #24]
 8006cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce0:	4809      	ldr	r0, [pc, #36]	; (8006d08 <siprintf+0x38>)
 8006ce2:	9107      	str	r1, [sp, #28]
 8006ce4:	9104      	str	r1, [sp, #16]
 8006ce6:	4909      	ldr	r1, [pc, #36]	; (8006d0c <siprintf+0x3c>)
 8006ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	a902      	add	r1, sp, #8
 8006cf4:	f000 f866 	bl	8006dc4 <_svfiprintf_r>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	b01c      	add	sp, #112	; 0x70
 8006d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d04:	b003      	add	sp, #12
 8006d06:	4770      	bx	lr
 8006d08:	2000000c 	.word	0x2000000c
 8006d0c:	ffff0208 	.word	0xffff0208

08006d10 <__ssputs_r>:
 8006d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	688e      	ldr	r6, [r1, #8]
 8006d16:	429e      	cmp	r6, r3
 8006d18:	4682      	mov	sl, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4690      	mov	r8, r2
 8006d1e:	4699      	mov	r9, r3
 8006d20:	d837      	bhi.n	8006d92 <__ssputs_r+0x82>
 8006d22:	898a      	ldrh	r2, [r1, #12]
 8006d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d28:	d031      	beq.n	8006d8e <__ssputs_r+0x7e>
 8006d2a:	6825      	ldr	r5, [r4, #0]
 8006d2c:	6909      	ldr	r1, [r1, #16]
 8006d2e:	1a6f      	subs	r7, r5, r1
 8006d30:	6965      	ldr	r5, [r4, #20]
 8006d32:	2302      	movs	r3, #2
 8006d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d38:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d3c:	f109 0301 	add.w	r3, r9, #1
 8006d40:	443b      	add	r3, r7
 8006d42:	429d      	cmp	r5, r3
 8006d44:	bf38      	it	cc
 8006d46:	461d      	movcc	r5, r3
 8006d48:	0553      	lsls	r3, r2, #21
 8006d4a:	d530      	bpl.n	8006dae <__ssputs_r+0x9e>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f000 fb2b 	bl	80073a8 <_malloc_r>
 8006d52:	4606      	mov	r6, r0
 8006d54:	b950      	cbnz	r0, 8006d6c <__ssputs_r+0x5c>
 8006d56:	230c      	movs	r3, #12
 8006d58:	f8ca 3000 	str.w	r3, [sl]
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	463a      	mov	r2, r7
 8006d6e:	6921      	ldr	r1, [r4, #16]
 8006d70:	f000 faa8 	bl	80072c4 <memcpy>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	6126      	str	r6, [r4, #16]
 8006d82:	6165      	str	r5, [r4, #20]
 8006d84:	443e      	add	r6, r7
 8006d86:	1bed      	subs	r5, r5, r7
 8006d88:	6026      	str	r6, [r4, #0]
 8006d8a:	60a5      	str	r5, [r4, #8]
 8006d8c:	464e      	mov	r6, r9
 8006d8e:	454e      	cmp	r6, r9
 8006d90:	d900      	bls.n	8006d94 <__ssputs_r+0x84>
 8006d92:	464e      	mov	r6, r9
 8006d94:	4632      	mov	r2, r6
 8006d96:	4641      	mov	r1, r8
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	f000 fa9e 	bl	80072da <memmove>
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	1b9b      	subs	r3, r3, r6
 8006da2:	60a3      	str	r3, [r4, #8]
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	441e      	add	r6, r3
 8006da8:	6026      	str	r6, [r4, #0]
 8006daa:	2000      	movs	r0, #0
 8006dac:	e7dc      	b.n	8006d68 <__ssputs_r+0x58>
 8006dae:	462a      	mov	r2, r5
 8006db0:	f000 fb54 	bl	800745c <_realloc_r>
 8006db4:	4606      	mov	r6, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d1e2      	bne.n	8006d80 <__ssputs_r+0x70>
 8006dba:	6921      	ldr	r1, [r4, #16]
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f000 faa5 	bl	800730c <_free_r>
 8006dc2:	e7c8      	b.n	8006d56 <__ssputs_r+0x46>

08006dc4 <_svfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	461d      	mov	r5, r3
 8006dca:	898b      	ldrh	r3, [r1, #12]
 8006dcc:	061f      	lsls	r7, r3, #24
 8006dce:	b09d      	sub	sp, #116	; 0x74
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	d50f      	bpl.n	8006df8 <_svfiprintf_r+0x34>
 8006dd8:	690b      	ldr	r3, [r1, #16]
 8006dda:	b96b      	cbnz	r3, 8006df8 <_svfiprintf_r+0x34>
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	f000 fae3 	bl	80073a8 <_malloc_r>
 8006de2:	6020      	str	r0, [r4, #0]
 8006de4:	6120      	str	r0, [r4, #16]
 8006de6:	b928      	cbnz	r0, 8006df4 <_svfiprintf_r+0x30>
 8006de8:	230c      	movs	r3, #12
 8006dea:	f8c8 3000 	str.w	r3, [r8]
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	e0c8      	b.n	8006f86 <_svfiprintf_r+0x1c2>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	6163      	str	r3, [r4, #20]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e02:	2330      	movs	r3, #48	; 0x30
 8006e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e08:	9503      	str	r5, [sp, #12]
 8006e0a:	f04f 0b01 	mov.w	fp, #1
 8006e0e:	4637      	mov	r7, r6
 8006e10:	463d      	mov	r5, r7
 8006e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e16:	b10b      	cbz	r3, 8006e1c <_svfiprintf_r+0x58>
 8006e18:	2b25      	cmp	r3, #37	; 0x25
 8006e1a:	d13e      	bne.n	8006e9a <_svfiprintf_r+0xd6>
 8006e1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006e20:	d00b      	beq.n	8006e3a <_svfiprintf_r+0x76>
 8006e22:	4653      	mov	r3, sl
 8006e24:	4632      	mov	r2, r6
 8006e26:	4621      	mov	r1, r4
 8006e28:	4640      	mov	r0, r8
 8006e2a:	f7ff ff71 	bl	8006d10 <__ssputs_r>
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f000 80a4 	beq.w	8006f7c <_svfiprintf_r+0x1b8>
 8006e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e36:	4453      	add	r3, sl
 8006e38:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3a:	783b      	ldrb	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 809d 	beq.w	8006f7c <_svfiprintf_r+0x1b8>
 8006e42:	2300      	movs	r3, #0
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	9307      	str	r3, [sp, #28]
 8006e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e54:	931a      	str	r3, [sp, #104]	; 0x68
 8006e56:	462f      	mov	r7, r5
 8006e58:	2205      	movs	r2, #5
 8006e5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006e5e:	4850      	ldr	r0, [pc, #320]	; (8006fa0 <_svfiprintf_r+0x1dc>)
 8006e60:	f7f9 f9e6 	bl	8000230 <memchr>
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	b9d0      	cbnz	r0, 8006e9e <_svfiprintf_r+0xda>
 8006e68:	06d9      	lsls	r1, r3, #27
 8006e6a:	bf44      	itt	mi
 8006e6c:	2220      	movmi	r2, #32
 8006e6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e72:	071a      	lsls	r2, r3, #28
 8006e74:	bf44      	itt	mi
 8006e76:	222b      	movmi	r2, #43	; 0x2b
 8006e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e7c:	782a      	ldrb	r2, [r5, #0]
 8006e7e:	2a2a      	cmp	r2, #42	; 0x2a
 8006e80:	d015      	beq.n	8006eae <_svfiprintf_r+0xea>
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	462f      	mov	r7, r5
 8006e86:	2000      	movs	r0, #0
 8006e88:	250a      	movs	r5, #10
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e90:	3b30      	subs	r3, #48	; 0x30
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	d94d      	bls.n	8006f32 <_svfiprintf_r+0x16e>
 8006e96:	b1b8      	cbz	r0, 8006ec8 <_svfiprintf_r+0x104>
 8006e98:	e00f      	b.n	8006eba <_svfiprintf_r+0xf6>
 8006e9a:	462f      	mov	r7, r5
 8006e9c:	e7b8      	b.n	8006e10 <_svfiprintf_r+0x4c>
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <_svfiprintf_r+0x1dc>)
 8006ea0:	1a80      	subs	r0, r0, r2
 8006ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8006ea6:	4318      	orrs	r0, r3
 8006ea8:	9004      	str	r0, [sp, #16]
 8006eaa:	463d      	mov	r5, r7
 8006eac:	e7d3      	b.n	8006e56 <_svfiprintf_r+0x92>
 8006eae:	9a03      	ldr	r2, [sp, #12]
 8006eb0:	1d11      	adds	r1, r2, #4
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	9103      	str	r1, [sp, #12]
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	db01      	blt.n	8006ebe <_svfiprintf_r+0xfa>
 8006eba:	9207      	str	r2, [sp, #28]
 8006ebc:	e004      	b.n	8006ec8 <_svfiprintf_r+0x104>
 8006ebe:	4252      	negs	r2, r2
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	9207      	str	r2, [sp, #28]
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	783b      	ldrb	r3, [r7, #0]
 8006eca:	2b2e      	cmp	r3, #46	; 0x2e
 8006ecc:	d10c      	bne.n	8006ee8 <_svfiprintf_r+0x124>
 8006ece:	787b      	ldrb	r3, [r7, #1]
 8006ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed2:	d133      	bne.n	8006f3c <_svfiprintf_r+0x178>
 8006ed4:	9b03      	ldr	r3, [sp, #12]
 8006ed6:	1d1a      	adds	r2, r3, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	9203      	str	r2, [sp, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb8      	it	lt
 8006ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ee4:	3702      	adds	r7, #2
 8006ee6:	9305      	str	r3, [sp, #20]
 8006ee8:	4d2e      	ldr	r5, [pc, #184]	; (8006fa4 <_svfiprintf_r+0x1e0>)
 8006eea:	7839      	ldrb	r1, [r7, #0]
 8006eec:	2203      	movs	r2, #3
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7f9 f99e 	bl	8000230 <memchr>
 8006ef4:	b138      	cbz	r0, 8006f06 <_svfiprintf_r+0x142>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	1b40      	subs	r0, r0, r5
 8006efa:	fa03 f000 	lsl.w	r0, r3, r0
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	4303      	orrs	r3, r0
 8006f02:	3701      	adds	r7, #1
 8006f04:	9304      	str	r3, [sp, #16]
 8006f06:	7839      	ldrb	r1, [r7, #0]
 8006f08:	4827      	ldr	r0, [pc, #156]	; (8006fa8 <_svfiprintf_r+0x1e4>)
 8006f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f0e:	2206      	movs	r2, #6
 8006f10:	1c7e      	adds	r6, r7, #1
 8006f12:	f7f9 f98d 	bl	8000230 <memchr>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d038      	beq.n	8006f8c <_svfiprintf_r+0x1c8>
 8006f1a:	4b24      	ldr	r3, [pc, #144]	; (8006fac <_svfiprintf_r+0x1e8>)
 8006f1c:	bb13      	cbnz	r3, 8006f64 <_svfiprintf_r+0x1a0>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	3308      	adds	r3, #8
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2c:	444b      	add	r3, r9
 8006f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f30:	e76d      	b.n	8006e0e <_svfiprintf_r+0x4a>
 8006f32:	fb05 3202 	mla	r2, r5, r2, r3
 8006f36:	2001      	movs	r0, #1
 8006f38:	460f      	mov	r7, r1
 8006f3a:	e7a6      	b.n	8006e8a <_svfiprintf_r+0xc6>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	3701      	adds	r7, #1
 8006f40:	9305      	str	r3, [sp, #20]
 8006f42:	4619      	mov	r1, r3
 8006f44:	250a      	movs	r5, #10
 8006f46:	4638      	mov	r0, r7
 8006f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f4c:	3a30      	subs	r2, #48	; 0x30
 8006f4e:	2a09      	cmp	r2, #9
 8006f50:	d903      	bls.n	8006f5a <_svfiprintf_r+0x196>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0c8      	beq.n	8006ee8 <_svfiprintf_r+0x124>
 8006f56:	9105      	str	r1, [sp, #20]
 8006f58:	e7c6      	b.n	8006ee8 <_svfiprintf_r+0x124>
 8006f5a:	fb05 2101 	mla	r1, r5, r1, r2
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4607      	mov	r7, r0
 8006f62:	e7f0      	b.n	8006f46 <_svfiprintf_r+0x182>
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <_svfiprintf_r+0x1ec>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f3af 8000 	nop.w
 8006f74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f78:	4681      	mov	r9, r0
 8006f7a:	d1d6      	bne.n	8006f2a <_svfiprintf_r+0x166>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	065b      	lsls	r3, r3, #25
 8006f80:	f53f af35 	bmi.w	8006dee <_svfiprintf_r+0x2a>
 8006f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f86:	b01d      	add	sp, #116	; 0x74
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	ab03      	add	r3, sp, #12
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4622      	mov	r2, r4
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <_svfiprintf_r+0x1ec>)
 8006f94:	a904      	add	r1, sp, #16
 8006f96:	4640      	mov	r0, r8
 8006f98:	f000 f882 	bl	80070a0 <_printf_i>
 8006f9c:	e7ea      	b.n	8006f74 <_svfiprintf_r+0x1b0>
 8006f9e:	bf00      	nop
 8006fa0:	0800758c 	.word	0x0800758c
 8006fa4:	08007592 	.word	0x08007592
 8006fa8:	08007596 	.word	0x08007596
 8006fac:	00000000 	.word	0x00000000
 8006fb0:	08006d11 	.word	0x08006d11

08006fb4 <_printf_common>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	4691      	mov	r9, r2
 8006fba:	461f      	mov	r7, r3
 8006fbc:	688a      	ldr	r2, [r1, #8]
 8006fbe:	690b      	ldr	r3, [r1, #16]
 8006fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	bfb8      	it	lt
 8006fc8:	4613      	movlt	r3, r2
 8006fca:	f8c9 3000 	str.w	r3, [r9]
 8006fce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	b112      	cbz	r2, 8006fde <_printf_common+0x2a>
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f8c9 3000 	str.w	r3, [r9]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	0699      	lsls	r1, r3, #26
 8006fe2:	bf42      	ittt	mi
 8006fe4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006fe8:	3302      	addmi	r3, #2
 8006fea:	f8c9 3000 	strmi.w	r3, [r9]
 8006fee:	6825      	ldr	r5, [r4, #0]
 8006ff0:	f015 0506 	ands.w	r5, r5, #6
 8006ff4:	d107      	bne.n	8007006 <_printf_common+0x52>
 8006ff6:	f104 0a19 	add.w	sl, r4, #25
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	42ab      	cmp	r3, r5
 8007004:	dc28      	bgt.n	8007058 <_printf_common+0xa4>
 8007006:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	3300      	adds	r3, #0
 800700e:	bf18      	it	ne
 8007010:	2301      	movne	r3, #1
 8007012:	0692      	lsls	r2, r2, #26
 8007014:	d42d      	bmi.n	8007072 <_printf_common+0xbe>
 8007016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800701a:	4639      	mov	r1, r7
 800701c:	4630      	mov	r0, r6
 800701e:	47c0      	blx	r8
 8007020:	3001      	adds	r0, #1
 8007022:	d020      	beq.n	8007066 <_printf_common+0xb2>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	68e5      	ldr	r5, [r4, #12]
 8007028:	f8d9 2000 	ldr.w	r2, [r9]
 800702c:	f003 0306 	and.w	r3, r3, #6
 8007030:	2b04      	cmp	r3, #4
 8007032:	bf08      	it	eq
 8007034:	1aad      	subeq	r5, r5, r2
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	6922      	ldr	r2, [r4, #16]
 800703a:	bf0c      	ite	eq
 800703c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007040:	2500      	movne	r5, #0
 8007042:	4293      	cmp	r3, r2
 8007044:	bfc4      	itt	gt
 8007046:	1a9b      	subgt	r3, r3, r2
 8007048:	18ed      	addgt	r5, r5, r3
 800704a:	f04f 0900 	mov.w	r9, #0
 800704e:	341a      	adds	r4, #26
 8007050:	454d      	cmp	r5, r9
 8007052:	d11a      	bne.n	800708a <_printf_common+0xd6>
 8007054:	2000      	movs	r0, #0
 8007056:	e008      	b.n	800706a <_printf_common+0xb6>
 8007058:	2301      	movs	r3, #1
 800705a:	4652      	mov	r2, sl
 800705c:	4639      	mov	r1, r7
 800705e:	4630      	mov	r0, r6
 8007060:	47c0      	blx	r8
 8007062:	3001      	adds	r0, #1
 8007064:	d103      	bne.n	800706e <_printf_common+0xba>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	3501      	adds	r5, #1
 8007070:	e7c3      	b.n	8006ffa <_printf_common+0x46>
 8007072:	18e1      	adds	r1, r4, r3
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	2030      	movs	r0, #48	; 0x30
 8007078:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800707c:	4422      	add	r2, r4
 800707e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007082:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007086:	3302      	adds	r3, #2
 8007088:	e7c5      	b.n	8007016 <_printf_common+0x62>
 800708a:	2301      	movs	r3, #1
 800708c:	4622      	mov	r2, r4
 800708e:	4639      	mov	r1, r7
 8007090:	4630      	mov	r0, r6
 8007092:	47c0      	blx	r8
 8007094:	3001      	adds	r0, #1
 8007096:	d0e6      	beq.n	8007066 <_printf_common+0xb2>
 8007098:	f109 0901 	add.w	r9, r9, #1
 800709c:	e7d8      	b.n	8007050 <_printf_common+0x9c>
	...

080070a0 <_printf_i>:
 80070a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070a8:	460c      	mov	r4, r1
 80070aa:	7e09      	ldrb	r1, [r1, #24]
 80070ac:	b085      	sub	sp, #20
 80070ae:	296e      	cmp	r1, #110	; 0x6e
 80070b0:	4617      	mov	r7, r2
 80070b2:	4606      	mov	r6, r0
 80070b4:	4698      	mov	r8, r3
 80070b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070b8:	f000 80b3 	beq.w	8007222 <_printf_i+0x182>
 80070bc:	d822      	bhi.n	8007104 <_printf_i+0x64>
 80070be:	2963      	cmp	r1, #99	; 0x63
 80070c0:	d036      	beq.n	8007130 <_printf_i+0x90>
 80070c2:	d80a      	bhi.n	80070da <_printf_i+0x3a>
 80070c4:	2900      	cmp	r1, #0
 80070c6:	f000 80b9 	beq.w	800723c <_printf_i+0x19c>
 80070ca:	2958      	cmp	r1, #88	; 0x58
 80070cc:	f000 8083 	beq.w	80071d6 <_printf_i+0x136>
 80070d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80070d8:	e032      	b.n	8007140 <_printf_i+0xa0>
 80070da:	2964      	cmp	r1, #100	; 0x64
 80070dc:	d001      	beq.n	80070e2 <_printf_i+0x42>
 80070de:	2969      	cmp	r1, #105	; 0x69
 80070e0:	d1f6      	bne.n	80070d0 <_printf_i+0x30>
 80070e2:	6820      	ldr	r0, [r4, #0]
 80070e4:	6813      	ldr	r3, [r2, #0]
 80070e6:	0605      	lsls	r5, r0, #24
 80070e8:	f103 0104 	add.w	r1, r3, #4
 80070ec:	d52a      	bpl.n	8007144 <_printf_i+0xa4>
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6011      	str	r1, [r2, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da03      	bge.n	80070fe <_printf_i+0x5e>
 80070f6:	222d      	movs	r2, #45	; 0x2d
 80070f8:	425b      	negs	r3, r3
 80070fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070fe:	486f      	ldr	r0, [pc, #444]	; (80072bc <_printf_i+0x21c>)
 8007100:	220a      	movs	r2, #10
 8007102:	e039      	b.n	8007178 <_printf_i+0xd8>
 8007104:	2973      	cmp	r1, #115	; 0x73
 8007106:	f000 809d 	beq.w	8007244 <_printf_i+0x1a4>
 800710a:	d808      	bhi.n	800711e <_printf_i+0x7e>
 800710c:	296f      	cmp	r1, #111	; 0x6f
 800710e:	d020      	beq.n	8007152 <_printf_i+0xb2>
 8007110:	2970      	cmp	r1, #112	; 0x70
 8007112:	d1dd      	bne.n	80070d0 <_printf_i+0x30>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	f043 0320 	orr.w	r3, r3, #32
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	e003      	b.n	8007126 <_printf_i+0x86>
 800711e:	2975      	cmp	r1, #117	; 0x75
 8007120:	d017      	beq.n	8007152 <_printf_i+0xb2>
 8007122:	2978      	cmp	r1, #120	; 0x78
 8007124:	d1d4      	bne.n	80070d0 <_printf_i+0x30>
 8007126:	2378      	movs	r3, #120	; 0x78
 8007128:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800712c:	4864      	ldr	r0, [pc, #400]	; (80072c0 <_printf_i+0x220>)
 800712e:	e055      	b.n	80071dc <_printf_i+0x13c>
 8007130:	6813      	ldr	r3, [r2, #0]
 8007132:	1d19      	adds	r1, r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6011      	str	r1, [r2, #0]
 8007138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800713c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007140:	2301      	movs	r3, #1
 8007142:	e08c      	b.n	800725e <_printf_i+0x1be>
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6011      	str	r1, [r2, #0]
 8007148:	f010 0f40 	tst.w	r0, #64	; 0x40
 800714c:	bf18      	it	ne
 800714e:	b21b      	sxthne	r3, r3
 8007150:	e7cf      	b.n	80070f2 <_printf_i+0x52>
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	1d18      	adds	r0, r3, #4
 8007158:	6010      	str	r0, [r2, #0]
 800715a:	0628      	lsls	r0, r5, #24
 800715c:	d501      	bpl.n	8007162 <_printf_i+0xc2>
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	e002      	b.n	8007168 <_printf_i+0xc8>
 8007162:	0668      	lsls	r0, r5, #25
 8007164:	d5fb      	bpl.n	800715e <_printf_i+0xbe>
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	4854      	ldr	r0, [pc, #336]	; (80072bc <_printf_i+0x21c>)
 800716a:	296f      	cmp	r1, #111	; 0x6f
 800716c:	bf14      	ite	ne
 800716e:	220a      	movne	r2, #10
 8007170:	2208      	moveq	r2, #8
 8007172:	2100      	movs	r1, #0
 8007174:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007178:	6865      	ldr	r5, [r4, #4]
 800717a:	60a5      	str	r5, [r4, #8]
 800717c:	2d00      	cmp	r5, #0
 800717e:	f2c0 8095 	blt.w	80072ac <_printf_i+0x20c>
 8007182:	6821      	ldr	r1, [r4, #0]
 8007184:	f021 0104 	bic.w	r1, r1, #4
 8007188:	6021      	str	r1, [r4, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d13d      	bne.n	800720a <_printf_i+0x16a>
 800718e:	2d00      	cmp	r5, #0
 8007190:	f040 808e 	bne.w	80072b0 <_printf_i+0x210>
 8007194:	4665      	mov	r5, ip
 8007196:	2a08      	cmp	r2, #8
 8007198:	d10b      	bne.n	80071b2 <_printf_i+0x112>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	07db      	lsls	r3, r3, #31
 800719e:	d508      	bpl.n	80071b2 <_printf_i+0x112>
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bfde      	ittt	le
 80071a8:	2330      	movle	r3, #48	; 0x30
 80071aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071b2:	ebac 0305 	sub.w	r3, ip, r5
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	f8cd 8000 	str.w	r8, [sp]
 80071bc:	463b      	mov	r3, r7
 80071be:	aa03      	add	r2, sp, #12
 80071c0:	4621      	mov	r1, r4
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff fef6 	bl	8006fb4 <_printf_common>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d14d      	bne.n	8007268 <_printf_i+0x1c8>
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	b005      	add	sp, #20
 80071d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071d6:	4839      	ldr	r0, [pc, #228]	; (80072bc <_printf_i+0x21c>)
 80071d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80071dc:	6813      	ldr	r3, [r2, #0]
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	1d1d      	adds	r5, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6015      	str	r5, [r2, #0]
 80071e6:	060a      	lsls	r2, r1, #24
 80071e8:	d50b      	bpl.n	8007202 <_printf_i+0x162>
 80071ea:	07ca      	lsls	r2, r1, #31
 80071ec:	bf44      	itt	mi
 80071ee:	f041 0120 	orrmi.w	r1, r1, #32
 80071f2:	6021      	strmi	r1, [r4, #0]
 80071f4:	b91b      	cbnz	r3, 80071fe <_printf_i+0x15e>
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	f022 0220 	bic.w	r2, r2, #32
 80071fc:	6022      	str	r2, [r4, #0]
 80071fe:	2210      	movs	r2, #16
 8007200:	e7b7      	b.n	8007172 <_printf_i+0xd2>
 8007202:	064d      	lsls	r5, r1, #25
 8007204:	bf48      	it	mi
 8007206:	b29b      	uxthmi	r3, r3
 8007208:	e7ef      	b.n	80071ea <_printf_i+0x14a>
 800720a:	4665      	mov	r5, ip
 800720c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007210:	fb02 3311 	mls	r3, r2, r1, r3
 8007214:	5cc3      	ldrb	r3, [r0, r3]
 8007216:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800721a:	460b      	mov	r3, r1
 800721c:	2900      	cmp	r1, #0
 800721e:	d1f5      	bne.n	800720c <_printf_i+0x16c>
 8007220:	e7b9      	b.n	8007196 <_printf_i+0xf6>
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	6961      	ldr	r1, [r4, #20]
 8007228:	1d18      	adds	r0, r3, #4
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	0628      	lsls	r0, r5, #24
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	d501      	bpl.n	8007236 <_printf_i+0x196>
 8007232:	6019      	str	r1, [r3, #0]
 8007234:	e002      	b.n	800723c <_printf_i+0x19c>
 8007236:	066a      	lsls	r2, r5, #25
 8007238:	d5fb      	bpl.n	8007232 <_printf_i+0x192>
 800723a:	8019      	strh	r1, [r3, #0]
 800723c:	2300      	movs	r3, #0
 800723e:	6123      	str	r3, [r4, #16]
 8007240:	4665      	mov	r5, ip
 8007242:	e7b9      	b.n	80071b8 <_printf_i+0x118>
 8007244:	6813      	ldr	r3, [r2, #0]
 8007246:	1d19      	adds	r1, r3, #4
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	681d      	ldr	r5, [r3, #0]
 800724c:	6862      	ldr	r2, [r4, #4]
 800724e:	2100      	movs	r1, #0
 8007250:	4628      	mov	r0, r5
 8007252:	f7f8 ffed 	bl	8000230 <memchr>
 8007256:	b108      	cbz	r0, 800725c <_printf_i+0x1bc>
 8007258:	1b40      	subs	r0, r0, r5
 800725a:	6060      	str	r0, [r4, #4]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	6123      	str	r3, [r4, #16]
 8007260:	2300      	movs	r3, #0
 8007262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007266:	e7a7      	b.n	80071b8 <_printf_i+0x118>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	462a      	mov	r2, r5
 800726c:	4639      	mov	r1, r7
 800726e:	4630      	mov	r0, r6
 8007270:	47c0      	blx	r8
 8007272:	3001      	adds	r0, #1
 8007274:	d0aa      	beq.n	80071cc <_printf_i+0x12c>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	079b      	lsls	r3, r3, #30
 800727a:	d413      	bmi.n	80072a4 <_printf_i+0x204>
 800727c:	68e0      	ldr	r0, [r4, #12]
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	4298      	cmp	r0, r3
 8007282:	bfb8      	it	lt
 8007284:	4618      	movlt	r0, r3
 8007286:	e7a3      	b.n	80071d0 <_printf_i+0x130>
 8007288:	2301      	movs	r3, #1
 800728a:	464a      	mov	r2, r9
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d09a      	beq.n	80071cc <_printf_i+0x12c>
 8007296:	3501      	adds	r5, #1
 8007298:	68e3      	ldr	r3, [r4, #12]
 800729a:	9a03      	ldr	r2, [sp, #12]
 800729c:	1a9b      	subs	r3, r3, r2
 800729e:	42ab      	cmp	r3, r5
 80072a0:	dcf2      	bgt.n	8007288 <_printf_i+0x1e8>
 80072a2:	e7eb      	b.n	800727c <_printf_i+0x1dc>
 80072a4:	2500      	movs	r5, #0
 80072a6:	f104 0919 	add.w	r9, r4, #25
 80072aa:	e7f5      	b.n	8007298 <_printf_i+0x1f8>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ac      	bne.n	800720a <_printf_i+0x16a>
 80072b0:	7803      	ldrb	r3, [r0, #0]
 80072b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072ba:	e76c      	b.n	8007196 <_printf_i+0xf6>
 80072bc:	0800759d 	.word	0x0800759d
 80072c0:	080075ae 	.word	0x080075ae

080072c4 <memcpy>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	1e43      	subs	r3, r0, #1
 80072c8:	440a      	add	r2, r1
 80072ca:	4291      	cmp	r1, r2
 80072cc:	d100      	bne.n	80072d0 <memcpy+0xc>
 80072ce:	bd10      	pop	{r4, pc}
 80072d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d8:	e7f7      	b.n	80072ca <memcpy+0x6>

080072da <memmove>:
 80072da:	4288      	cmp	r0, r1
 80072dc:	b510      	push	{r4, lr}
 80072de:	eb01 0302 	add.w	r3, r1, r2
 80072e2:	d807      	bhi.n	80072f4 <memmove+0x1a>
 80072e4:	1e42      	subs	r2, r0, #1
 80072e6:	4299      	cmp	r1, r3
 80072e8:	d00a      	beq.n	8007300 <memmove+0x26>
 80072ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072f2:	e7f8      	b.n	80072e6 <memmove+0xc>
 80072f4:	4283      	cmp	r3, r0
 80072f6:	d9f5      	bls.n	80072e4 <memmove+0xa>
 80072f8:	1881      	adds	r1, r0, r2
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	42d3      	cmn	r3, r2
 80072fe:	d100      	bne.n	8007302 <memmove+0x28>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007306:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800730a:	e7f7      	b.n	80072fc <memmove+0x22>

0800730c <_free_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4605      	mov	r5, r0
 8007310:	2900      	cmp	r1, #0
 8007312:	d045      	beq.n	80073a0 <_free_r+0x94>
 8007314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007318:	1f0c      	subs	r4, r1, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	bfb8      	it	lt
 800731e:	18e4      	addlt	r4, r4, r3
 8007320:	f000 f8d2 	bl	80074c8 <__malloc_lock>
 8007324:	4a1f      	ldr	r2, [pc, #124]	; (80073a4 <_free_r+0x98>)
 8007326:	6813      	ldr	r3, [r2, #0]
 8007328:	4610      	mov	r0, r2
 800732a:	b933      	cbnz	r3, 800733a <_free_r+0x2e>
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	6014      	str	r4, [r2, #0]
 8007330:	4628      	mov	r0, r5
 8007332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007336:	f000 b8c8 	b.w	80074ca <__malloc_unlock>
 800733a:	42a3      	cmp	r3, r4
 800733c:	d90c      	bls.n	8007358 <_free_r+0x4c>
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	1862      	adds	r2, r4, r1
 8007342:	4293      	cmp	r3, r2
 8007344:	bf04      	itt	eq
 8007346:	681a      	ldreq	r2, [r3, #0]
 8007348:	685b      	ldreq	r3, [r3, #4]
 800734a:	6063      	str	r3, [r4, #4]
 800734c:	bf04      	itt	eq
 800734e:	1852      	addeq	r2, r2, r1
 8007350:	6022      	streq	r2, [r4, #0]
 8007352:	6004      	str	r4, [r0, #0]
 8007354:	e7ec      	b.n	8007330 <_free_r+0x24>
 8007356:	4613      	mov	r3, r2
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	b10a      	cbz	r2, 8007360 <_free_r+0x54>
 800735c:	42a2      	cmp	r2, r4
 800735e:	d9fa      	bls.n	8007356 <_free_r+0x4a>
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	1858      	adds	r0, r3, r1
 8007364:	42a0      	cmp	r0, r4
 8007366:	d10b      	bne.n	8007380 <_free_r+0x74>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	4401      	add	r1, r0
 800736c:	1858      	adds	r0, r3, r1
 800736e:	4282      	cmp	r2, r0
 8007370:	6019      	str	r1, [r3, #0]
 8007372:	d1dd      	bne.n	8007330 <_free_r+0x24>
 8007374:	6810      	ldr	r0, [r2, #0]
 8007376:	6852      	ldr	r2, [r2, #4]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	4401      	add	r1, r0
 800737c:	6019      	str	r1, [r3, #0]
 800737e:	e7d7      	b.n	8007330 <_free_r+0x24>
 8007380:	d902      	bls.n	8007388 <_free_r+0x7c>
 8007382:	230c      	movs	r3, #12
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	e7d3      	b.n	8007330 <_free_r+0x24>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	1821      	adds	r1, r4, r0
 800738c:	428a      	cmp	r2, r1
 800738e:	bf04      	itt	eq
 8007390:	6811      	ldreq	r1, [r2, #0]
 8007392:	6852      	ldreq	r2, [r2, #4]
 8007394:	6062      	str	r2, [r4, #4]
 8007396:	bf04      	itt	eq
 8007398:	1809      	addeq	r1, r1, r0
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	605c      	str	r4, [r3, #4]
 800739e:	e7c7      	b.n	8007330 <_free_r+0x24>
 80073a0:	bd38      	pop	{r3, r4, r5, pc}
 80073a2:	bf00      	nop
 80073a4:	20000094 	.word	0x20000094

080073a8 <_malloc_r>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	1ccd      	adds	r5, r1, #3
 80073ac:	f025 0503 	bic.w	r5, r5, #3
 80073b0:	3508      	adds	r5, #8
 80073b2:	2d0c      	cmp	r5, #12
 80073b4:	bf38      	it	cc
 80073b6:	250c      	movcc	r5, #12
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	4606      	mov	r6, r0
 80073bc:	db01      	blt.n	80073c2 <_malloc_r+0x1a>
 80073be:	42a9      	cmp	r1, r5
 80073c0:	d903      	bls.n	80073ca <_malloc_r+0x22>
 80073c2:	230c      	movs	r3, #12
 80073c4:	6033      	str	r3, [r6, #0]
 80073c6:	2000      	movs	r0, #0
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	f000 f87d 	bl	80074c8 <__malloc_lock>
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <_malloc_r+0xac>)
 80073d0:	6814      	ldr	r4, [r2, #0]
 80073d2:	4621      	mov	r1, r4
 80073d4:	b991      	cbnz	r1, 80073fc <_malloc_r+0x54>
 80073d6:	4c20      	ldr	r4, [pc, #128]	; (8007458 <_malloc_r+0xb0>)
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	b91b      	cbnz	r3, 80073e4 <_malloc_r+0x3c>
 80073dc:	4630      	mov	r0, r6
 80073de:	f000 f863 	bl	80074a8 <_sbrk_r>
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	4629      	mov	r1, r5
 80073e6:	4630      	mov	r0, r6
 80073e8:	f000 f85e 	bl	80074a8 <_sbrk_r>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d124      	bne.n	800743a <_malloc_r+0x92>
 80073f0:	230c      	movs	r3, #12
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f868 	bl	80074ca <__malloc_unlock>
 80073fa:	e7e4      	b.n	80073c6 <_malloc_r+0x1e>
 80073fc:	680b      	ldr	r3, [r1, #0]
 80073fe:	1b5b      	subs	r3, r3, r5
 8007400:	d418      	bmi.n	8007434 <_malloc_r+0x8c>
 8007402:	2b0b      	cmp	r3, #11
 8007404:	d90f      	bls.n	8007426 <_malloc_r+0x7e>
 8007406:	600b      	str	r3, [r1, #0]
 8007408:	50cd      	str	r5, [r1, r3]
 800740a:	18cc      	adds	r4, r1, r3
 800740c:	4630      	mov	r0, r6
 800740e:	f000 f85c 	bl	80074ca <__malloc_unlock>
 8007412:	f104 000b 	add.w	r0, r4, #11
 8007416:	1d23      	adds	r3, r4, #4
 8007418:	f020 0007 	bic.w	r0, r0, #7
 800741c:	1ac3      	subs	r3, r0, r3
 800741e:	d0d3      	beq.n	80073c8 <_malloc_r+0x20>
 8007420:	425a      	negs	r2, r3
 8007422:	50e2      	str	r2, [r4, r3]
 8007424:	e7d0      	b.n	80073c8 <_malloc_r+0x20>
 8007426:	428c      	cmp	r4, r1
 8007428:	684b      	ldr	r3, [r1, #4]
 800742a:	bf16      	itet	ne
 800742c:	6063      	strne	r3, [r4, #4]
 800742e:	6013      	streq	r3, [r2, #0]
 8007430:	460c      	movne	r4, r1
 8007432:	e7eb      	b.n	800740c <_malloc_r+0x64>
 8007434:	460c      	mov	r4, r1
 8007436:	6849      	ldr	r1, [r1, #4]
 8007438:	e7cc      	b.n	80073d4 <_malloc_r+0x2c>
 800743a:	1cc4      	adds	r4, r0, #3
 800743c:	f024 0403 	bic.w	r4, r4, #3
 8007440:	42a0      	cmp	r0, r4
 8007442:	d005      	beq.n	8007450 <_malloc_r+0xa8>
 8007444:	1a21      	subs	r1, r4, r0
 8007446:	4630      	mov	r0, r6
 8007448:	f000 f82e 	bl	80074a8 <_sbrk_r>
 800744c:	3001      	adds	r0, #1
 800744e:	d0cf      	beq.n	80073f0 <_malloc_r+0x48>
 8007450:	6025      	str	r5, [r4, #0]
 8007452:	e7db      	b.n	800740c <_malloc_r+0x64>
 8007454:	20000094 	.word	0x20000094
 8007458:	20000098 	.word	0x20000098

0800745c <_realloc_r>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	4607      	mov	r7, r0
 8007460:	4614      	mov	r4, r2
 8007462:	460e      	mov	r6, r1
 8007464:	b921      	cbnz	r1, 8007470 <_realloc_r+0x14>
 8007466:	4611      	mov	r1, r2
 8007468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800746c:	f7ff bf9c 	b.w	80073a8 <_malloc_r>
 8007470:	b922      	cbnz	r2, 800747c <_realloc_r+0x20>
 8007472:	f7ff ff4b 	bl	800730c <_free_r>
 8007476:	4625      	mov	r5, r4
 8007478:	4628      	mov	r0, r5
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	f000 f826 	bl	80074cc <_malloc_usable_size_r>
 8007480:	42a0      	cmp	r0, r4
 8007482:	d20f      	bcs.n	80074a4 <_realloc_r+0x48>
 8007484:	4621      	mov	r1, r4
 8007486:	4638      	mov	r0, r7
 8007488:	f7ff ff8e 	bl	80073a8 <_malloc_r>
 800748c:	4605      	mov	r5, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	d0f2      	beq.n	8007478 <_realloc_r+0x1c>
 8007492:	4631      	mov	r1, r6
 8007494:	4622      	mov	r2, r4
 8007496:	f7ff ff15 	bl	80072c4 <memcpy>
 800749a:	4631      	mov	r1, r6
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff ff35 	bl	800730c <_free_r>
 80074a2:	e7e9      	b.n	8007478 <_realloc_r+0x1c>
 80074a4:	4635      	mov	r5, r6
 80074a6:	e7e7      	b.n	8007478 <_realloc_r+0x1c>

080074a8 <_sbrk_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4c06      	ldr	r4, [pc, #24]	; (80074c4 <_sbrk_r+0x1c>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4605      	mov	r5, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	f7f9 ff88 	bl	80013c8 <_sbrk>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_sbrk_r+0x1a>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_sbrk_r+0x1a>
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	200001f0 	.word	0x200001f0

080074c8 <__malloc_lock>:
 80074c8:	4770      	bx	lr

080074ca <__malloc_unlock>:
 80074ca:	4770      	bx	lr

080074cc <_malloc_usable_size_r>:
 80074cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d0:	1f18      	subs	r0, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfbc      	itt	lt
 80074d6:	580b      	ldrlt	r3, [r1, r0]
 80074d8:	18c0      	addlt	r0, r0, r3
 80074da:	4770      	bx	lr

080074dc <_init>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr

080074e8 <_fini>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	bf00      	nop
 80074ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ee:	bc08      	pop	{r3}
 80074f0:	469e      	mov	lr, r3
 80074f2:	4770      	bx	lr
